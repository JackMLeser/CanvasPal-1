{"version":3,"file":"contentScript/index.js","mappings":"mBAAA,IAAYA,GAAZ,SAAYA,GACR,qBACA,mBACA,mBACA,oBACH,CALD,CAAYA,IAAAA,EAAQ,KAeb,MAAMC,EAMT,YAAmBC,EAAiBC,EAAkBH,EAASI,MAC3DC,KAAKH,QAAUA,EACfG,KAAKC,aAAeH,EACpBE,KAAKE,cACT,CAEO,kBAAOC,CAAYN,EAAiBC,EAAkBH,EAASI,MAClE,MAAMK,EAAM,GAAGP,KAAWC,IAI1B,OAHKE,KAAKK,UAAUC,IAAIF,IACpBJ,KAAKK,UAAUE,IAAIH,EAAK,IAAIR,EAAOC,EAASC,IAEzCE,KAAKK,UAAUG,IAAIJ,EAC9B,CAEA,QAAAK,CAASX,GACLE,KAAKC,aAAeH,CACxB,CAEA,KAAAY,CAAMC,EAAiBC,GACnBZ,KAAKa,IAAIlB,EAASmB,MAAOH,EAASC,EACtC,CAEA,IAAAG,CAAKJ,EAAiBC,GAClBZ,KAAKa,IAAIlB,EAASI,KAAMY,EAASC,EACrC,CAEA,IAAAI,CAAKL,EAAiBC,GAClBZ,KAAKa,IAAIlB,EAASsB,KAAMN,EAASC,EACrC,CAEA,KAAAM,CAAMP,EAAiBC,GACnBZ,KAAKa,IAAIlB,EAASwB,MAAOR,EAASC,EACtC,CAEO,SAAMC,CAAIf,EAAiBa,KAAoBS,GAClD,GAAItB,GAASE,KAAKC,aAAc,CAC5B,MAAMoB,GAAY,IAAIC,MAAOC,cAEvBC,EAAmB,IAAIH,MADdrB,KAAKyB,aAAa3B,OACqBE,KAAKH,YAAYc,IAEvE,GAAIS,EAAKM,OAAQ,CACb,MAAMC,EAAgB3B,KAAK4B,cAAcR,GACzCS,QAAQhB,IAAIW,EAAkBG,E,MAE9BE,QAAQhB,IAAIW,GAGhB,MAAMM,EAAkB,CACpBT,YACAvB,QACAa,UACAC,KAAMQ,EACNW,MAAOC,QAAQD,OAGnB/B,KAAKiC,SAASH,GAEVhC,IAAUH,EAASwB,OACnBnB,KAAKkC,YAAYJ,E,CAG7B,CAEQ,YAAAL,CAAa3B,GACjB,OAAQA,GACJ,KAAKH,EAASmB,MACV,MAAO,YACX,KAAKnB,EAASI,KACV,MAAO,WACX,KAAKJ,EAASsB,KACV,MAAO,WACX,KAAKtB,EAASwB,MACV,MAAO,WACX,QACI,MAAO,KAEnB,CAEQ,aAAAS,CAAchB,GAClB,IACI,GAAIuB,MAAMC,QAAQxB,GACd,OAAOA,EAAKyB,KAAIC,GAAQtC,KAAK4B,cAAcU,KAG/C,GAAI1B,GAAwB,iBAATA,EAAmB,CAElC,GAAIA,aAAgBoB,MAChB,MAAO,CACHO,KAAM3B,EAAK2B,KACX5B,QAASC,EAAKD,QACdoB,MAAOnB,EAAKmB,OAKpB,MAAMS,EAAiC,CAAC,EACxC,IAAK,MAAOpC,EAAKqC,KAAUC,OAAOC,QAAQ/B,GACtC4B,EAAUpC,GAAOJ,KAAK4B,cAAca,GAExC,OAAOD,C,CAGX,OAAO5B,C,CACT,MAAOM,GACL,MAAO,6B,CAEf,CAEQ,cAAMe,CAASH,GACnB,MAAM,KAAEc,EAAO,UAAaC,OAAOC,QAAQC,MAAMvC,IAAI,QACrDoC,EAAKI,KAAKlB,GAENc,EAAKlB,OAAS9B,EAAOqD,UACrBL,EAAKM,OAAO,EAAGN,EAAKlB,OAAS9B,EAAOqD,gBAGlCJ,OAAOC,QAAQC,MAAMxC,IAAI,CAAEqC,QACrC,CAEQ,kBAAM1C,GACV,MAAM,KAAE0C,EAAO,UAAaC,OAAOC,QAAQC,MAAMvC,IAAI,QAC/C2C,EAAgB,IAAI7B,KAC1B6B,EAAcC,QAAQD,EAAcE,UAAY,IAEhD,MAAMC,EAAeV,EAAKW,QAAQ1C,GAC9B,IAAIS,KAAKT,EAAIQ,WAAa8B,UAGxBN,OAAOC,QAAQC,MAAMxC,IAAI,CAAEqC,KAAMU,GAC3C,CAEQ,WAAApB,CAAYJ,GAChBe,OAAOW,cAAcC,OAAO,CACxBC,KAAM,QACNC,QAAS,0BACTC,MAAO,kBACPjD,QAASmB,EAAMnB,QACfkD,SAAU,GAElB,CAEA,aAAMC,CAAQhE,GACV,MAAM,KAAE8C,EAAO,UAAaC,OAAOC,QAAQC,MAAMvC,IAAI,QACrD,OAAOV,EAAQ8C,EAAKW,QAAQ1C,GAAkBA,EAAIf,QAAUA,IAAS8C,CACzE,EArJwB,EAAAK,SAAW,IACpB,EAAA5C,UAAiC,IAAI0D,IAuJlCnE,EAAOO,YAAY,WC9IlC,MAAM6D,EAKT,cAJQ,KAAAC,QAA+B,GAKnCjE,KAAKkE,OAAS,IAAItE,EAAO,qBAC7B,CAEO,kBAAOO,GAIV,OAHK6D,EAAmBG,WACpBH,EAAmBG,SAAW,IAAIH,GAE/BA,EAAmBG,QAC9B,CAEO,WAAAC,CAAY7B,EAAc8B,GAC7B,MAAMC,EAAK,GAAG/B,KAAQjB,KAAKiD,QAM3B,OALAvE,KAAKiE,QAAQjB,KAAK,CACdT,OACAiC,UAAWC,YAAYF,MACvBF,aAEGC,CACX,CAEO,SAAAI,CAAUnC,GACb,MAAMoC,EAAS3E,KAAKiE,QAAQW,MAAKC,GAAKA,EAAEtC,OAASA,IAASsC,EAAEC,UACxDH,IACAA,EAAOG,QAAUL,YAAYF,MAC7BI,EAAOI,SAAWJ,EAAOG,QAAUH,EAAOH,UAC1CxE,KAAKkE,OAAOxD,MAAM,wBAAwB6B,KAAS,CAC/CwC,SAAU,GAAGJ,EAAOI,SAASC,QAAQ,OACrCX,SAAUM,EAAON,WAG7B,CAEO,SAAAY,GACH,MAAMC,EAAmBlF,KAAKiE,QAAQV,QAAOsB,QAAoBM,IAAfN,EAAEE,WAEpD,GAAgC,IAA5BG,EAAiBxD,OACjB,MAAO,CACHuC,QAAS,GACTmB,QAAS,CACLC,cAAe,EACfC,gBAAiB,EACjBC,iBAAkB,CAAEhD,KAAM,OAAQwC,SAAU,GAC5CS,iBAAkB,CAAEjD,KAAM,OAAQwC,SAAU,KAKxD,MAAMM,EAAgBH,EAAiBO,QAAO,CAACC,EAAKb,IAAMa,GAAOb,EAAEE,UAAY,IAAI,GAC7EO,EAAkBD,EAAgBH,EAAiBxD,OAEnDiE,EAAS,IAAIT,GAAkBU,MAAK,CAACC,EAAGC,KACzCA,EAAEf,UAAY,IAAMc,EAAEd,UAAY,KAEvC,MAAO,CACHd,QAASiB,EACTE,QAAS,CACLC,gBACAC,kBACAC,iBAAkB,CACdhD,KAAMoD,EAAO,GAAGpD,KAChBwC,SAAUY,EAAO,GAAGZ,UAAY,GAEpCS,iBAAkB,CACdjD,KAAMoD,EAAOA,EAAOjE,OAAS,GAAGa,KAChCwC,SAAUY,EAAOA,EAAOjE,OAAS,GAAGqD,UAAY,IAIhE,CAEO,KAAAgB,GACH/F,KAAKiE,QAAU,EACnB,CAEO,YAAA+B,CAAgBzD,EAAc0D,EAAsB5B,GAEvD,OADArE,KAAKoE,YAAY7B,EAAM8B,GAChB4B,IAAKC,SAAQ,IAAMlG,KAAK0E,UAAUnC,IAC7C,CAEO,OAAA4D,CAAW5D,EAAc0D,EAAa5B,GACzCrE,KAAKoE,YAAY7B,EAAM8B,GACvB,MAAM+B,EAASH,IAEf,OADAjG,KAAK0E,UAAUnC,GACR6D,CACX,EChHG,MAAMC,EAMT,WAAAC,GALQ,KAAAC,MAA4B,KAG5B,KAAAC,WAAqB,EAGzBxG,KAAKkE,OAAS,IAAItE,EAAO,cACzBI,KAAKyG,mBAAqBzC,EAAmB7D,cAC7CH,KAAK0G,cACL1G,KAAK2G,4BACT,CAEQ,WAAAD,GACJ,MAAME,EAAY,KACd,IAAKC,SAASC,KAGV,YADAC,sBAAsBH,GAI1B5G,KAAKuG,MAAQM,SAASG,cAAc,OACpChH,KAAKuG,MAAMjC,GAAK,wBAChBtE,KAAKuG,MAAMU,UAAY,ykBAevBjH,KAAKuG,MAAMW,MAAMC,QAAU,6iBAmB3B,MAAMD,EAAQL,SAASG,cAAc,SACrCE,EAAME,YAAc,ssDA4DhBP,SAASQ,KACTR,SAASQ,KAAKC,YAAYJ,GAE1BL,SAASU,iBAAiB,oBAAoB,KAC1CV,SAASQ,KAAKC,YAAYJ,EAAM,IAIxCL,SAASC,KAAKQ,YAAYtH,KAAKuG,OAG/BM,SAASW,eAAe,0BAA0BD,iBAAiB,SAAS,KACxEvH,KAAKyH,kBAAkB,IAG3BZ,SAASW,eAAe,kBAAkBD,iBAAiB,SAAS,KAChEvH,KAAKyG,mBAAmBV,QACxB/F,KAAK0H,0BAA0B,GACjC,EAIsB,YAAxBb,SAASc,WACTd,SAASU,iBAAiB,mBAAoBX,GAE9CA,GAER,CAEQ,0BAAAD,GACJE,SAASU,iBAAiB,WAAYK,KAE7BA,EAAEC,SAAWD,EAAEE,UAAYF,EAAEG,UAAsB,MAAVH,EAAExH,MAC5CwH,EAAEI,iBACFhI,KAAKyH,mB,GAGjB,CAEO,gBAAAA,GACCzH,KAAKuG,QACLvG,KAAKwG,WAAaxG,KAAKwG,UACvBxG,KAAKuG,MAAMW,MAAMe,QAAUjI,KAAKwG,UAAY,QAAU,OACtDxG,KAAKkE,OAAOxD,MAAM,gBAAeV,KAAKwG,UAAY,QAAU,WAEpE,CAEQ,wBAAAkB,GACJ,MAAMQ,EAAmBrB,SAASW,eAAe,uBACjD,IAAKU,EAAkB,OAEvB,MAAMC,EAASnI,KAAKyG,mBAAmBxB,YAEvCiD,EAAiBjB,UAAY,8OAKYkB,EAAO/C,QAAQC,cAAcL,QAAQ,sLAIrCmD,EAAO/C,QAAQE,gBAAgBN,QAAQ,sLAIxCmD,EAAO/C,QAAQG,iBAAiBhD,SAAS4F,EAAO/C,QAAQG,iBAAiBR,SAASC,QAAQ,uLAI1FmD,EAAO/C,QAAQI,iBAAiBjD,SAAS4F,EAAO/C,QAAQI,iBAAiBT,SAASC,QAAQ,wKAKxHmD,EAAOlE,QAAQmE,OAAO,GAAG/F,KAAIsC,GAAU,kFAEzBA,EAAOpC,qDACAvC,KAAKqI,oBAAoB1D,EAAOI,UAAY,OAAOJ,EAAOI,UAAUC,QAAQ,8DAEhGsD,KAAK,mCAGpB,CAEQ,mBAAAD,CAAoBtD,GACxB,OAAIA,EAAW,IAAY,cACvBA,EAAW,GAAW,gBACnB,aACX,CAEO,oBAAAwD,CAAqBC,GACxB,MAAMC,EAAY5B,SAASW,eAAe,mBAC1C,IAAKiB,EAAW,OAEhB,MAAMC,EAAa1I,KAAK2I,wBAAwBH,GAC1CI,EAAiB5I,KAAK6I,kBAAkBL,GAE9CC,EAAUxB,UAAY,kJAGFuB,EAAY9G,+DAEtB1B,KAAK8I,iBAAiBJ,uBACtB1I,KAAK+I,2BAA2BH,uCAEpC5I,KAAKgJ,qBAAqBR,eAIhCxI,KAAK0H,0BACT,CAEQ,uBAAAiB,CAAwBH,GAC5B,OAAOA,EAAY/C,QAAO,CAACwD,EAAKC,KAC5BD,EAAIC,EAAWxF,OAASuF,EAAIC,EAAWxF,OAAS,GAAK,EAC9CuF,IACR,CAAC,EACR,CAEQ,iBAAAJ,CAAkBL,GACtB,OAAOA,EAAY/C,QAAO,CAACwD,EAAKC,KACxBA,EAAWC,eAAiB,GAAKF,EAAIG,MAAQH,EAAIG,MAAQ,GAAK,EACzDF,EAAWC,eAAiB,GAAKF,EAAII,QAAUJ,EAAII,QAAU,GAAK,EACtEJ,EAAIK,KAAOL,EAAIK,KAAO,GAAK,EACzBL,IACR,CAAC,EACR,CAEQ,gBAAAH,CAAiBS,GACrB,MAAO,+JAGG7G,OAAOC,QAAQ4G,GAAQlH,KAAI,EAAEqB,EAAM8F,KAAW,mGAEtC9F,MAAS8F,oDAEhBlB,KAAK,mCAGpB,CAEQ,0BAAAS,CAA2BU,GAC/B,MAAMC,EAAS,CACXN,KAAM,UACNC,OAAQ,UACRC,IAAK,WAGT,MAAO,oKAGG5G,OAAOC,QAAQ8G,GAAQpH,KAAI,EAAEsH,EAAOH,KAAW,+DACLE,EAAOC,kCACzCA,MAAUH,oDAEjBlB,KAAK,mCAGpB,CAEQ,oBAAAU,CAAqBR,GACzB,MAAO,gKAGGA,EAAYnG,KAAI6G,GAAclJ,KAAK4J,uBAAuBV,KAAaZ,KAAK,mCAG1F,CAEQ,sBAAAsB,CAAuBV,GAC3B,MAAMW,EAAgBX,EAAWC,eAAiB,GAAM,UACpCD,EAAWC,eAAiB,GAAM,UAAY,UAElE,MAAO,iFAC+DU,gGACxBX,EAAWtF,uGAE3CsF,EAAWY,OAAS,MAAMZ,EAAWY,UAAUZ,EAAWa,mBAAqB,wIAGxEb,EAAWc,QAAQC,gJAGff,EAAWgB,sEAEPL,2EACHM,KAAKC,MAAiC,IAA3BlB,EAAWC,uEAIpD,CAEO,iBAAAkB,CAAkB1J,EAAiBC,GACtCZ,KAAKkE,OAAOxD,MAAMC,EAASC,EAE/B,CAEO,yBAAA0J,CAA0BC,GAEjC,EChTG,MAAMC,EAIT,WAAAlE,GAHQ,KAAAC,MAA4B,KAIhCvG,KAAKkE,OAAS,IAAItE,EAAO,kBACzBI,KAAK0G,aACT,CAEQ,WAAAA,GACJ,MAAME,EAAY,KACd,IAAKC,SAASC,KAGV,YADAC,sBAAsBH,GAI1B5G,KAAKuG,MAAQM,SAASG,cAAc,OACpChH,KAAKuG,MAAMjC,GAAK,mBAChBtE,KAAKuG,MAAMW,MAAMC,QAAU,4iBAkB3B,MAAMsD,EAAS5D,SAASG,cAAc,OACtCyD,EAAOxD,UAAY,2YAMnBjH,KAAKuG,MAAMe,YAAYmD,GAEvB,MAAMC,EAAU7D,SAASG,cAAc,OACvC0D,EAAQpG,GAAK,qBACbtE,KAAKuG,MAAMe,YAAYoD,GAEvB7D,SAASC,KAAKQ,YAAYtH,KAAKuG,OAE/BM,SAASW,eAAe,qBAAqBD,iBAAiB,SAAS,KACnEvH,KAAKyH,kBAAkB,GACzB,EAIsB,YAAxBZ,SAASc,WACTd,SAASU,iBAAiB,oBAAoB,KAC1CX,IAEAC,SAASU,iBAAiB,WAAYK,KAC7BA,EAAEC,SAAWD,EAAEE,UAAYF,EAAEG,UAAsB,MAAVH,EAAExH,MAC5CwH,EAAEI,iBACFhI,KAAKyH,mB,GAEX,KAGNb,IAEAC,SAASU,iBAAiB,WAAYK,KAC7BA,EAAEC,SAAWD,EAAEE,UAAYF,EAAEG,UAAsB,MAAVH,EAAExH,MAC5CwH,EAAEI,iBACFhI,KAAKyH,mB,IAIrB,CAEO,gBAAAA,GACH,GAAIzH,KAAKuG,MAAO,CACZ,MAAMC,EAAyC,UAA7BxG,KAAKuG,MAAMW,MAAMe,QACnCjI,KAAKuG,MAAMW,MAAMe,QAAUzB,EAAY,OAAS,O,CAExD,CAEO,eAAAmE,CAAgB5J,GACnB,MAAM2J,EAAU7D,SAASW,eAAe,sBACnCkD,IAELA,EAAQzD,UAAY,qKAGAlG,EAAK6J,kBAAsC,IAApB7J,EAAK6J,WAAmB,IAAM,+CAE/D5K,KAAK6K,uBAAuB9J,EAAK+J,kLAIjC9K,KAAK+K,iBAAiBhK,EAAKiK,4CAGzC,CAEQ,sBAAAH,CAAuBC,GAC3B,MAAMpB,EAAS,CACXuB,IAAK,UACLC,aAAc,UACdC,OAAQ,UACRC,QAAS,WAGb,OAAO1I,OAAOC,QAAQmI,GACjBzI,KAAI,EAAEqB,EAAM8F,KAAW,2DACoBE,EAAOhG,8BACzCA,EAAK2H,OAAO,GAAGC,cAAgB5H,EAAK0E,MAAM,OAAOoB,4CAExDlB,KAAK,GAChB,CAEQ,gBAAAyC,CAAiBC,GACrB,OAAOA,EACF3I,KAAIkJ,GAAa,uNAGJA,EAAUC,uIAGJD,EAAU7H,yIAGR6H,EAAUE,0IAGTF,EAAUG,8EAG9BpD,KAAK,GAChB,CAEO,gBAAAqD,CAAiBhL,EAAiBC,GACrCZ,KAAKkE,OAAOxD,MAAMC,EAASC,EAC/B,ECxIG,MAAMgL,EAKT,WAAAtF,GACItG,KAAKkE,OAAS,IAAItE,EAAO,oBAC7B,CAEO,oBAAMiM,CAAe5H,GACxB,IACI,MAAMrB,QAAa5C,KAAK8D,UAClBjD,EAAsB,CACxBQ,UAAWC,KAAKiD,MAChBN,UACAmB,QAASpF,KAAK8L,iBAAiB7H,IAMnC,IAHArB,EAAKmJ,QAAQlL,GAGN+B,EAAKlB,OAASkK,EAAkB3I,UACnCL,EAAKoJ,YAEHnJ,OAAOC,QAAQC,MAAMxC,IAAI,CAAE,CAACqL,EAAkBK,aAAcrJ,IAClE5C,KAAKkE,OAAOxD,MAAM,yBAA0BG,E,CAC9C,MAAOK,GACLlB,KAAKkE,OAAOhD,MAAM,gCAAiCA,E,CAE3D,CAEQ,gBAAA4K,CAAiB7H,GACrB,GAAuB,IAAnBA,EAAQvC,OACR,MAAO,CACH2D,cAAe,EACfC,gBAAiB,EACjBC,iBAAkB,GAClBC,iBAAkB,IAI1B,MAAMH,EAAgBpB,EAAQwB,QAAO,CAACC,EAAKb,IAAMa,EAAMb,EAAEE,UAAU,GAC7DmH,EAAgB,IAAIjI,GAAS2B,MAAK,CAACC,EAAGC,IAAMA,EAAEf,SAAWc,EAAEd,WAEjE,MAAO,CACHM,gBACAC,gBAAiBD,EAAgBpB,EAAQvC,OACzC6D,iBAAkB2G,EAAc,GAAG3J,KACnCiD,iBAAkB0G,EAAcA,EAAcxK,OAAS,GAAGa,KAElE,CAEO,aAAMuB,GACT,IAEI,aADqBjB,OAAOC,QAAQC,MAAMvC,IAAIoL,EAAkBK,cAClDL,EAAkBK,cAAgB,E,CAClD,MAAO/K,GAEL,OADAlB,KAAKkE,OAAOhD,MAAM,qCAAsCA,GACjD,E,CAEf,CAEO,4BAAMiL,GAcT,MAAMvJ,QAAa5C,KAAK8D,UACxB,GAAIlB,EAAKlB,OAAS,EACd,MAAO,CACH0K,OAAQ,GACRC,SAAU,GACVC,gBAAiB,CAAC,iCAK1B,MAAMC,EAA6C,CAAC,EACpD3J,EAAK4J,SAAQ3L,IACTA,EAAIoD,QAAQuI,SAAQ7H,IACX4H,EAAiB5H,EAAOpC,QACzBgK,EAAiB5H,EAAOpC,MAAQ,IAEpCgK,EAAiB5H,EAAOpC,MAAMS,KAAK2B,EAAOI,SAAS,GACrD,IAIN,MAAMqH,EAAS1J,OAAOC,QAAQ4J,GAAkBlK,KAAI,EAAEoK,EAAWC,MAC7D,MAAMC,EAASD,EAAUtE,MAAM,EAAG+B,KAAKyC,MAAMF,EAAUhL,OAAS,IAC1DmL,EAAQH,EAAUtE,MAAM+B,KAAKyC,MAAMF,EAAUhL,OAAS,IAEtDoL,EAAY9M,KAAK+M,iBAAiBJ,GAClCK,EAAWhN,KAAK+M,iBAAiBF,GACjCI,GAAqBH,EAAYE,GAAYA,EAAY,IAE/D,MAAO,CACHP,YACAnH,gBAAiBwH,EACjBI,MAAOlN,KAAKmN,eAAeF,GAC3BA,mBACH,IAICZ,EAAW3J,OAAOC,QAAQ4J,GAC3BlK,KAAI,EAAEoK,EAAWC,MAAe,CAC7BD,YACAW,UAAWV,EAAUhL,OACrB4D,gBAAiBtF,KAAK+M,iBAAiBL,OAE1CnJ,QAAO8J,GAAKA,EAAE/H,gBAAkB,KAAO+H,EAAED,UAA0B,GAAdxK,EAAKlB,SAC1DkE,MAAK,CAACC,EAAGC,IAAMA,EAAER,gBAAkBQ,EAAEsH,UAAYvH,EAAEP,gBAAkBO,EAAEuH,YAK5E,MAAO,CAAEhB,SAAQC,WAAUC,gBAFHtM,KAAKsN,wBAAwBlB,EAAQC,GAGjE,CAEQ,gBAAAU,CAAiBQ,GACrB,OAAOA,EAAQ9H,QAAO,CAACC,EAAK8H,IAAM9H,EAAM8H,GAAG,GAAKD,EAAQ7L,MAC5D,CAEQ,cAAAyL,CAAe1K,GACnB,OAAIA,GAAS,EAAU,YACnBA,EAAQ,EAAU,YACf,QACX,CAEQ,uBAAA6K,CACJlB,EACAC,GAEA,MAAMC,EAA4B,GAG5BmB,EAAerB,EAAO7I,QAAOmK,GAAiB,cAAZA,EAAER,QA4B1C,OA3BIO,EAAa/L,OAAS,GACtB4K,EAAgBtJ,KACZ,wCAAwCyK,EACnCpL,KAAIsL,GAAM,GAAGA,EAAGlB,cAAckB,EAAGV,iBAAiBjI,QAAQ,gBAC1DsD,KAAK,SAKlB+D,EAASG,SAAQoB,IACTA,EAAQtI,gBAAkB,KAC1BgH,EAAgBtJ,KACZ,uBAAuB4K,EAAQnB,mBAAmBmB,EAAQtI,gBAAgBN,QAAQ,gBACxE4I,EAAQR,mB,IAM1Bf,EAAS3K,OAAS,GAClB4K,EAAgBtJ,KAAK,4EAGM,IAA3BsJ,EAAgB5K,QAChB4K,EAAgBtJ,KAAK,2CAGlBsJ,CACX,CAEO,eAAMuB,GACT,UACUhL,OAAOC,QAAQC,MAAM+K,OAAOlC,EAAkBK,aACpDjM,KAAKkE,OAAOnD,KAAK,2B,CACnB,MAAOG,GACLlB,KAAKkE,OAAOhD,MAAM,mCAAoCA,E,CAE9D,EAtLwB,EAAA+B,SAAW,IACX,EAAAgJ,YAAc,kBCvB1C,MAAM8B,EAAe,ICSd,MAeH,WAAAzH,GATQ,KAAA0H,OAAsB,CAC1BC,SAAS,EACTC,SAAU,OACVC,eAAe,EACfC,qBAAqB,EACrBC,mBAAmB,EACnBC,wBAAwB,GAIxBtO,KAAKkE,OAAS,IAAItE,EAAO,gBACzBI,KAAKuO,UAAY,IAAIlI,EACrBrG,KAAKwO,UAAY,IAAIhE,EACrBxK,KAAKyG,mBAAqBzC,EAAmB7D,cAC7CH,KAAKyO,kBAAoB,IAAI7C,EAC7B5L,KAAK0O,8BACL1O,KAAK2O,+BACL3O,KAAK4O,iBACT,CAEQ,4BAAAD,GAEJE,aAAYC,UACR,GAAI9O,KAAKgO,OAAOC,SAAWjO,KAAKgO,OAAOM,uBAAwB,CAC3D,MAEMS,EAFS/O,KAAKyG,mBAAmBxB,YAEXhB,QAAQV,QAAOsB,QAAoBM,IAAfN,EAAEE,WAAwB1C,KAAIwC,IAAK,CAC/EtC,KAAMsC,EAAEtC,KACRwC,SAAUF,EAAEE,SACZV,SAAUQ,EAAER,mBAGVrE,KAAKyO,kBAAkB5C,eAAekD,GAExC/O,KAAKgO,OAAOM,8BACNtO,KAAKsK,2B,IAGpB,IACP,CAEQ,+BAAMA,GACV,MAAMC,QAAiBvK,KAAKyO,kBAAkBtC,yBAC9CnM,KAAKuO,UAAUjE,0BAA0BC,EAC7C,CAEQ,2BAAAmE,GACJ7H,SAASU,iBAAiB,WAAYK,IAClC,IAAKA,EAAEC,SAAWD,EAAEE,UAAYF,EAAEG,SAC9B,OAAQH,EAAExH,KACN,IAAK,IACDwH,EAAEI,iBACFhI,KAAKgP,kBACL,MACJ,IAAK,IACDpH,EAAEI,iBACFhI,KAAKuO,UAAU9G,mBACf,MACJ,IAAK,IACDG,EAAEI,iBACFhI,KAAKwO,UAAU/G,mBACf,MACJ,IAAK,IACDG,EAAEI,iBACFhI,KAAKiP,2B,GAKzB,CAEQ,8BAAMA,GACVjP,KAAKgO,OAAOM,wBAA0BtO,KAAKgO,OAAOM,uBAC9CtO,KAAKgO,OAAOM,8BACNtO,KAAKsK,4BAEftK,KAAKkP,iBACT,CAEQ,qBAAMN,GACV,IACI,MAAMxI,QAAevD,OAAOC,QAAQqM,KAAK3O,IAAI,eACzC4F,EAAOgJ,cACPpP,KAAKgO,OAAS,IAAKhO,KAAKgO,UAAW5H,EAAOgJ,aAC1CpP,KAAKqP,c,CAEX,MAAOnO,GACLlB,KAAKkE,OAAOhD,MAAM,8BAA+BA,E,CAEzD,CAEQ,qBAAMgO,GACV,UACUrM,OAAOC,QAAQqM,KAAK5O,IAAI,CAAE6O,YAAapP,KAAKgO,Q,CACpD,MAAO9M,GACLlB,KAAKkE,OAAOhD,MAAM,6BAA8BA,E,CAExD,CAEQ,WAAAmO,GACCrP,KAAKgO,OAAOC,SAKjBjO,KAAKkE,OAAOzD,SAAST,KAAKsP,eAEtBtP,KAAKgO,OAAOG,eACZnO,KAAKwO,UAAU/G,oBAGfzH,KAAKgO,OAAOI,qBAAuBpO,KAAKgO,OAAOK,oBAC/CrO,KAAKuO,UAAU9G,oBAXfzH,KAAKuP,kBAab,CAEQ,gBAAAA,GACW1I,SAAS2I,iBAAiB,wBAClChD,SAAQjG,IACVA,EAAsBW,MAAMe,QAAU,MAAM,GAErD,CAEO,eAAA+G,GACHhP,KAAKgO,OAAOC,SAAWjO,KAAKgO,OAAOC,QACnCjO,KAAKqP,cACLrP,KAAKkP,kBAELlP,KAAKkE,OAAOnD,KAAK,eAAcf,KAAKgO,OAAOC,QAAU,UAAY,YACrE,CAEO,iBAAAwB,CAAkBC,GACrB1P,KAAKgO,OAAS,IAAKhO,KAAKgO,UAAW0B,GACnC1P,KAAKqP,cACLrP,KAAKkP,iBACT,CAEQ,WAAAI,GACJ,OAAQtP,KAAKgO,OAAOE,UAChB,IAAK,QAAS,OAAO,EACrB,IAAK,OAGL,QAAS,OAAO,EAFhB,IAAK,OAAQ,OAAO,EACpB,IAAK,QAAS,OAAO,EAG7B,CAEO,YAAAyB,GACH,OAAO3P,KAAKuO,SAChB,CAEO,YAAAqB,GACH,OAAO5P,KAAKwO,SAChB,CAEO,cAAAqB,GACH,OAAO7P,KAAKgO,OAAOC,OACvB,CAEO,SAAA6B,GACH,MAAO,IAAK9P,KAAKgO,OACrB,CAEO,0BAAM+B,SACH/P,KAAKyO,kBAAkBZ,YACzB7N,KAAKgO,OAAOM,8BACNtO,KAAKsK,2BAEnB,CAEO,4BAAM6B,GACT,OAAOnM,KAAKyO,kBAAkBtC,wBAClC,GDtIG,MAAM6D,EACT,WAAA1J,GACItG,KAAKiQ,YACT,CAEQ,UAAAA,GACJ,IACI,MAAMrP,EAAOZ,KAAKkQ,sBAClBrN,OAAOsN,QAAQC,YAAY,CAAE1M,KAAM,iBAAkB9C,SAAQyP,OAAMC,IAC/DzO,QAAQX,MAAM,iCAAkCoP,EAAI,G,CAE1D,MAAOA,GACLzO,QAAQX,MAAM,mCAAoCoP,GAClDzN,OAAOsN,QAAQC,YAAY,CACvB1M,KAAM,QACNxC,MAAO,oCACRmP,MAAMxO,QAAQX,M,CAEzB,CAEO,mBAAAgP,GACH,IACI,MAAMK,EAAiC,GACjCC,EAA4E,CAAC,EA4CnF,OAzCqB3J,SAAS2I,iBAAiB,iBAClChD,SAAQlK,IAEjB,MAAMmO,EAAgBnO,EAAKoO,cAAc,wCACnCC,EAAaF,GAAerJ,aAAawJ,QAAU,iBAIzD,GAD0BtO,EAAKoO,cAAc,yBACtB,CACnB,MAAMnO,EAAOD,EAAKoO,cAAc,wBAAwBtJ,aAAawJ,QAAU,GACzEC,EAAcvO,EAAKoO,cAAc,sBACjChN,EAAOmN,GAAazJ,aAAawJ,QAC3BC,GAAaC,aAAa,UAAUF,QACpCtO,EAAKoO,cAAc,4BAA4BI,aAAa,UAAUF,QAAU,GAGtFG,EAAiBzO,EAAKoO,cAAc,8CAC1C,IAAI1G,EAAU+G,GAAgB3J,aAAawJ,QAAU,GAGjDtO,EAAKoO,cAAc,gCACnB1G,EAAU,WAGVzH,IACKiO,EAAkBG,KACnBH,EAAkBG,GAAc,IAEpCH,EAAkBG,GAAY3N,KAAK,CAAET,OAAMmB,OAAMsG,Y,KAM7DtH,OAAOC,QAAQ6N,GAAmBhE,SAAQ,EAAEmE,EAAYnI,MAChDA,EAAY9G,OAAS,GACrB6O,EAAcvN,KAAK,CAAE2N,aAAYnI,e,IAIzC3G,QAAQhB,IAAI,4BAA6B0P,GAClCA,C,CACT,MAAOD,GAEL,MADAzO,QAAQX,MAAM,gCAAiCoP,GACzCA,C,CAEd,EAGG,MAAMU,EACT,WAAA1K,GACItG,KAAKiQ,YACT,CAEQ,UAAAA,GACJ,GAAIjQ,KAAKiR,eACL,IACI,MAAMrQ,EAAOZ,KAAKkR,kBAClBrO,OAAOsN,QAAQC,YAAY,CAAE1M,KAAM,aAAc9C,SAAQyP,OAAMC,IAC3DzO,QAAQX,MAAM,6BAA8BoP,EAAI,G,CAEtD,MAAOA,GACLzO,QAAQX,MAAM,+BAAgCoP,GAC9CzN,OAAOsN,QAAQC,YAAY,CACvB1M,KAAM,QACNxC,MAAO,gCACRmP,MAAMxO,QAAQX,M,CAG7B,CAEQ,YAAA+P,GACJ,MAAME,EAAYtK,SAAS6J,cAAc,iCAAiCtJ,YACpEgK,EAAiBC,OAAOC,SAASC,SAASC,SAAS,WACnDC,EAA+D,OAA9C5K,SAASW,eAAe,kBACzCkK,EAAgE,OAA9C7K,SAAS6J,cAAc,mBAE/C,SAAUS,GAAWK,SAAS,UAAYJ,GAAkBK,GAAkBC,EAClF,CAEO,eAAAR,GACH,IACI,MAAMS,EAAuB,CACzB,gBACA,kBACA,eACA,eACA,iBACA,gCAGJ,IAAIhB,EAAa,GACjB,IAAK,MAAMiB,KAAYD,EAAsB,CACzC,MAAMjG,EAAU7E,SAAS6J,cAAckB,GACvC,GAAIlG,GAAStE,aAAawJ,OAAQ,CAC9BD,EAAajF,EAAQtE,YAAYwJ,OACjC,K,EAIR,IAAKD,EAAY,CACb,MAAMkB,EAAahL,SAAS6J,cAAc,yBAEtCC,EADAkB,GAAYzK,YACCyK,EAAWzK,YAAYwJ,OAEvB/J,SAASjD,MAAMkO,MAAM,KAAK,GAAGlB,M,CAIlD,MAAMpI,EAAwC,GA2B9C,OA1BuB3B,SAAS2I,iBAAiB,2CAElChD,SAAQuF,IACnB,MAAMC,EAAgB,CAAC,WAAY,SAAU,oBAC7C,IAAIzP,EAAO,GACX,IAAK,MAAMqP,KAAYI,EAAe,CAClC,MAAMtG,EAAUqG,EAAIrB,cAAckB,GAClC,GAAIlG,GAAStE,aAAawJ,OAAQ,CAC9BrO,EAAOmJ,EAAQtE,YAAYwJ,OAC3B,K,EAIR,MAAMqB,EAAYF,EAAIrB,cAAc,mBAAmBtJ,YACjD8K,EAAeH,EAAIrB,cAAc,oCAAoCtJ,YACrE+K,EAAaJ,EAAIrB,cAAc,6CAA6CtJ,YAE5E0C,EAAuB,MAAdmI,GAAmC,iBAAdA,EAA+B,EAAIjS,KAAKoS,YAAYH,GAClFI,EAAkC,sBAAjBH,EAAuC,EAAIlS,KAAKoS,YAAYF,GAC7EI,EAASH,EAAanS,KAAKoS,YAAYD,EAAWI,QAAQ,IAAK,UAAOpN,EAExE5C,GACAiG,EAAYxF,KAAK,CAAET,OAAMuH,SAAQuI,iBAAgBC,U,IAIlD,CAAE3B,aAAYnI,c,CACvB,MAAO8H,GAEL,MADAzO,QAAQX,MAAM,4BAA6BoP,GACrCA,C,CAEd,CAEQ,WAAA8B,CAAY3P,GAChB,IAAKA,GAAmB,MAAVA,GAA2B,iBAAVA,GAAsC,sBAAVA,EAA+B,OAAO,EACjG,MAAM+P,EAAMC,WAAWhQ,EAAM8P,QAAQ,WAAY,KACjD,OAAOG,MAAMF,GAAO,EAAIA,CAC5B,EAIJ,MAAMG,EAAqB,KAEvB,IAAK9L,SAAS6J,cAAc,WACxB,OAIJ,MAAMkC,EAAc/L,SAAS6J,cAAc,0CACrCO,EAAepK,SAAS6J,cAAc,uCAExCkC,IACA/Q,QAAQhB,IAAI,kCACZ,IAAImP,GAEJiB,IACApP,QAAQhB,IAAI,+BACZ,IAAImQ,E,EAKZnO,OAAOsN,QAAQ0C,UAAUC,aAAY,CAACnS,EAASoS,EAAQC,KACnD,IAGI,OAFAnR,QAAQhB,IAAI,mCAAoCF,GAExCA,EAAQ+C,MACZ,IAAK,mBAcD,OAbA7B,QAAQhB,IAAI,oBAAqBF,EAAQsS,UAEzCpQ,OAAOC,QAAQC,MAAMxC,IAAI,CAAE0S,SAAUtS,EAAQsS,WACxCC,MAAK,KACFrR,QAAQhB,IAAI,mCAEZ8R,IACAK,EAAa,CAAEG,SAAS,GAAO,IAElC9C,OAAMnP,IACHW,QAAQX,MAAM,2BAA4BA,GAC1C8R,EAAa,CAAEG,SAAS,EAAOjS,MAAOA,EAAMP,SAAU,KAEvD,EAEX,IAAK,sBACDkB,QAAQhB,IAAI,0BACZ8R,IACAK,EAAa,CAAEG,SAAS,IACxB,MAEJ,IAAK,gBAcD,OAZAC,MAAMzS,EAAQ0S,IAAK1S,EAAQ2S,SACtBJ,MAAKpE,MAAMyE,IACR,IAAKA,EAASC,GACV,MAAM,IAAIxR,MAAM,uBAAuBuR,EAASE,UAEpD,MAAM7S,QAAa2S,EAASG,OAC5BV,EAAa,CAAEG,SAAS,EAAMvS,QAAO,IAExCyP,OAAMnP,IACHW,QAAQX,MAAM,eAAgBA,GAC9B8R,EAAa,CAAEG,SAAS,EAAOjS,MAAOA,EAAMP,SAAU,KAEvD,EACX,IAAK,sBACDkB,QAAQhB,IAAI,uBAAwBF,EAAQ6H,aAE5CuF,EAAa4B,eAAepH,qBAAqB5H,EAAQ6H,aACzDwK,EAAa,CAAEG,SAAS,IACxB,MAEJ,IAAK,oBACDpF,EAAa6B,eAAejF,gBAAgBhK,EAAQC,MACpDoS,EAAa,CAAEG,SAAS,IACxB,MAEJ,IAAK,eACqB,SAAlBxS,EAAQ4F,MACRwH,EAAa6B,eAAenI,mBACH,SAAlB9G,EAAQ4F,OACfwH,EAAa4B,eAAelI,mBAEhCuL,EAAa,CAAEG,SAAS,IACxB,MAGJ,QACItR,QAAQb,KAAK,wBAAyBL,EAAQ+C,MAC9CsP,EAAa,CAAE9R,MAAO,yB,CAEhC,MAAOA,GACLW,QAAQX,MAAM,0BAA2BA,GACzC8R,EAAa,CAAE9R,MAAO,kB,CAE1B,OAAO,CAAI,IAuDfyS,YAnDmB7E,UACf,MAAM8E,EAAyB9E,MAAO+E,EAAU,EAAGC,EAAa,KAC5D,IAII,aAFMjR,OAAOsN,QAAQC,YAAY,CAAE1M,KAAM,SACzC7B,QAAQhB,IAAI,+BACL,C,CACT,MAAOK,GACL,OAAI2S,EAAUC,GACVjS,QAAQhB,IAAI,6CAA6CgT,EAAU,YAC7D,IAAIE,SAAQC,GAAWL,WAAWK,EAAS,OAC1CJ,EAAuBC,EAAU,EAAGC,KAE/CjS,QAAQX,MAAM,kDACP,E,GAIf,IAGI,UADgC0S,IAE5B,MAAM,IAAI5R,MAAM,yCAIda,OAAOsN,QAAQC,YAAY,CAAE1M,KAAM,yBACzC7B,QAAQhB,IAAI,qCAGZ,MAAMoT,EAAO,KAETtB,IApWa,MAEhB5E,EAAa8B,kBACd9B,EAAaiB,kBAIjBjB,EAAa0B,kBAAkB,CAC3BxB,SAAS,EACTE,eAAe,EACfC,qBAAqB,EACrBC,mBAAmB,EACnBC,wBAAwB,EACxBJ,SAAU,UAId,MAAMK,EAAYR,EAAa4B,eACzBnB,EAAYT,EAAa6B,eAG1B/I,SAASW,eAAe,0BACzB+G,EAAU9G,mBAETZ,SAASW,eAAe,qBACzBgH,EAAU/G,mBAGd5F,QAAQhB,IAAI,yCAAyC,EA2U7CqT,GAEArS,QAAQhB,IAAI,0BAA0B,EAGd,YAAxBgG,SAASc,WACTd,SAASU,iBAAiB,mBAAoB0M,GAE9CA,G,CAEN,MAAO/S,GACLW,QAAQX,MAAM,uCAAwCA,E,IAKvC,I","sources":["webpack://canvaspal/./src/utils/logger.ts","webpack://canvaspal/./src/utils/performanceMonitor.ts","webpack://canvaspal/./src/utils/debugPanel.ts","webpack://canvaspal/./src/utils/dateDebugPanel.ts","webpack://canvaspal/./src/utils/performanceLogger.ts","webpack://canvaspal/./src/contentScript/index.ts","webpack://canvaspal/./src/utils/debugManager.ts"],"sourcesContent":["export enum LogLevel {\n    DEBUG = 0,\n    INFO = 1,\n    WARN = 2,\n    ERROR = 3\n}\n\ninterface LogEntry {\n    timestamp: string;\n    level: LogLevel;\n    message: string;\n    data?: any;\n    stack?: string;\n}\n\nexport class Logger {\n    private static readonly MAX_LOGS = 1000;\n    private static instances: Map<string, Logger> = new Map();\n    private context: string;\n    private currentLevel: LogLevel;\n\n    public constructor(context: string, level: LogLevel = LogLevel.INFO) {\n        this.context = context;\n        this.currentLevel = level;\n        this.cleanOldLogs();\n    }\n\n    public static getInstance(context: string, level: LogLevel = LogLevel.INFO): Logger {\n        const key = `${context}-${level}`;\n        if (!this.instances.has(key)) {\n            this.instances.set(key, new Logger(context, level));\n        }\n        return this.instances.get(key)!;\n    }\n\n    setLevel(level: LogLevel): void {\n        this.currentLevel = level;\n    }\n\n    debug(message: string, data?: any): void {\n        this.log(LogLevel.DEBUG, message, data);\n    }\n\n    info(message: string, data?: any): void {\n        this.log(LogLevel.INFO, message, data);\n    }\n\n    warn(message: string, data?: any): void {\n        this.log(LogLevel.WARN, message, data);\n    }\n\n    error(message: string, data?: any): void {\n        this.log(LogLevel.ERROR, message, data);\n    }\n\n    public async log(level: LogLevel, message: string, ...args: any[]): Promise<void> {\n        if (level >= this.currentLevel) {\n            const timestamp = new Date().toISOString();\n            const prefix = this.getLogPrefix(level);\n            const formattedMessage = `[${timestamp}] ${prefix} [${this.context}] ${message}`;\n\n            if (args.length) {\n                const formattedData = this.formatLogData(args);\n                console.log(formattedMessage, formattedData);\n            } else {\n                console.log(formattedMessage);\n            }\n\n            const entry: LogEntry = {\n                timestamp,\n                level,\n                message,\n                data: args,\n                stack: Error().stack\n            };\n\n            this.saveLogs(entry);\n\n            if (level === LogLevel.ERROR) {\n                this.notifyError(entry);\n            }\n        }\n    }\n\n    private getLogPrefix(level: LogLevel): string {\n        switch (level) {\n            case LogLevel.DEBUG:\n                return '🔍 DEBUG:';\n            case LogLevel.INFO:\n                return '📢 INFO:';\n            case LogLevel.WARN:\n                return '⚠️ WARN:';\n            case LogLevel.ERROR:\n                return '❌ ERROR:';\n            default:\n                return '📢';\n        }\n    }\n\n    private formatLogData(data: any): any {\n        try {\n            if (Array.isArray(data)) {\n                return data.map(item => this.formatLogData(item));\n            }\n\n            if (data && typeof data === 'object') {\n                // Check if it's an Error object\n                if (data instanceof Error) {\n                    return {\n                        name: data.name,\n                        message: data.message,\n                        stack: data.stack\n                    };\n                }\n\n                // Handle regular objects\n                const formatted: Record<string, any> = {};\n                for (const [key, value] of Object.entries(data)) {\n                    formatted[key] = this.formatLogData(value);\n                }\n                return formatted;\n            }\n\n            return data;\n        } catch (error) {\n            return '[Error formatting log data]';\n        }\n    }\n\n    private async saveLogs(entry: LogEntry): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        logs.push(entry);\n\n        if (logs.length > Logger.MAX_LOGS) {\n            logs.splice(0, logs.length - Logger.MAX_LOGS);\n        }\n\n        await chrome.storage.local.set({ logs });\n    }\n\n    private async cleanOldLogs(): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n        const filteredLogs = logs.filter((log: LogEntry) => \n            new Date(log.timestamp) > thirtyDaysAgo\n        );\n\n        await chrome.storage.local.set({ logs: filteredLogs });\n    }\n\n    private notifyError(entry: LogEntry): void {\n        chrome.notifications.create({\n            type: 'basic',\n            iconUrl: '/dist/icons/icon128.png',\n            title: 'CanvasPal Error',\n            message: entry.message,\n            priority: 2\n        });\n    }\n\n    async getLogs(level?: LogLevel): Promise<LogEntry[]> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        return level ? logs.filter((log: LogEntry) => log.level === level) : logs;\n    }\n}\n\nexport const logger = Logger.getInstance('default');\n","import { Logger } from './logger';\n\ninterface PerformanceMetric {\n    name: string;\n    startTime: number;\n    endTime?: number;\n    duration?: number;\n    metadata?: Record<string, any>;\n}\n\ninterface PerformanceReport {\n    metrics: PerformanceMetric[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: {\n            name: string;\n            duration: number;\n        };\n        fastestOperation: {\n            name: string;\n            duration: number;\n        };\n    };\n}\n\nexport class PerformanceMonitor {\n    private metrics: PerformanceMetric[] = [];\n    private logger: Logger;\n    private static instance: PerformanceMonitor;\n\n    private constructor() {\n        this.logger = new Logger('PerformanceMonitor');\n    }\n\n    public static getInstance(): PerformanceMonitor {\n        if (!PerformanceMonitor.instance) {\n            PerformanceMonitor.instance = new PerformanceMonitor();\n        }\n        return PerformanceMonitor.instance;\n    }\n\n    public startMetric(name: string, metadata?: Record<string, any>): string {\n        const id = `${name}_${Date.now()}`;\n        this.metrics.push({\n            name,\n            startTime: performance.now(),\n            metadata\n        });\n        return id;\n    }\n\n    public endMetric(name: string): void {\n        const metric = this.metrics.find(m => m.name === name && !m.endTime);\n        if (metric) {\n            metric.endTime = performance.now();\n            metric.duration = metric.endTime - metric.startTime;\n            this.logger.debug(`Performance metric - ${name}:`, {\n                duration: `${metric.duration.toFixed(2)}ms`,\n                metadata: metric.metadata\n            });\n        }\n    }\n\n    public getReport(): PerformanceReport {\n        const completedMetrics = this.metrics.filter(m => m.duration !== undefined);\n        \n        if (completedMetrics.length === 0) {\n            return {\n                metrics: [],\n                summary: {\n                    totalDuration: 0,\n                    averageDuration: 0,\n                    slowestOperation: { name: 'none', duration: 0 },\n                    fastestOperation: { name: 'none', duration: 0 }\n                }\n            };\n        }\n\n        const totalDuration = completedMetrics.reduce((sum, m) => sum + (m.duration || 0), 0);\n        const averageDuration = totalDuration / completedMetrics.length;\n\n        const sorted = [...completedMetrics].sort((a, b) => \n            (b.duration || 0) - (a.duration || 0));\n\n        return {\n            metrics: completedMetrics,\n            summary: {\n                totalDuration,\n                averageDuration,\n                slowestOperation: {\n                    name: sorted[0].name,\n                    duration: sorted[0].duration || 0\n                },\n                fastestOperation: {\n                    name: sorted[sorted.length - 1].name,\n                    duration: sorted[sorted.length - 1].duration || 0\n                }\n            }\n        };\n    }\n\n    public clear(): void {\n        this.metrics = [];\n    }\n\n    public monitorAsync<T>(name: string, fn: () => Promise<T>, metadata?: Record<string, any>): Promise<T> {\n        this.startMetric(name, metadata);\n        return fn().finally(() => this.endMetric(name));\n    }\n\n    public monitor<T>(name: string, fn: () => T, metadata?: Record<string, any>): T {\n        this.startMetric(name, metadata);\n        const result = fn();\n        this.endMetric(name);\n        return result;\n    }\n}","import { Assignment } from '../types/models';\nimport { Logger } from './logger';\nimport { PerformanceMonitor } from './performanceMonitor';\n\nexport class DebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n    private performanceMonitor: PerformanceMonitor;\n    private isVisible: boolean = false;\n\n    constructor() {\n        this.logger = new Logger('DebugPanel');\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.createPanel();\n        this.initializeKeyboardShortcut();\n    }\n\n    private createPanel(): void {\n        const initPanel = () => {\n            if (!document.body) {\n                // Wait for body to be available\n                requestAnimationFrame(initPanel);\n                return;\n            }\n\n            this.panel = document.createElement('div');\n            this.panel.id = 'canvaspal-debug-panel';\n            this.panel.innerHTML = `\n                <div class=\"debug-panel-header\">\n                    <span>🔍 CanvasPal Debug</span>\n                    <div class=\"debug-panel-controls\">\n                        <button id=\"clear-metrics\" title=\"Clear Performance Metrics\">🗑️</button>\n                        <button id=\"canvaspal-debug-close\">✕</button>\n                    </div>\n                </div>\n                <div class=\"debug-panel-content\">\n                    <div id=\"performance-metrics\"></div>\n                    <div id=\"assignment-info\"></div>\n                </div>\n            `;\n\n            // Apply styles\n            this.panel.style.cssText = `\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                width: 350px;\n                max-height: 500px;\n                background: rgba(0, 0, 0, 0.9);\n                color: white;\n                padding: 15px;\n                border-radius: 8px;\n                font-family: monospace;\n                font-size: 12px;\n                z-index: 9999;\n                overflow-y: auto;\n                box-shadow: 0 0 10px rgba(0,0,0,0.5);\n                display: none;\n            `;\n\n            // Add button styles\n            const style = document.createElement('style');\n            style.textContent = `\n                .debug-panel-header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: 10px;\n                    padding-bottom: 10px;\n                    border-bottom: 1px solid rgba(255,255,255,0.1);\n                }\n\n                .debug-panel-controls {\n                    display: flex;\n                    gap: 8px;\n                }\n\n                .debug-panel-controls button {\n                    background: none;\n                    border: none;\n                    color: white;\n                    cursor: pointer;\n                    padding: 4px;\n                    border-radius: 4px;\n                    transition: background 0.2s;\n                }\n\n                .debug-panel-controls button:hover {\n                    background: rgba(255,255,255,0.1);\n                }\n\n                .performance-section {\n                    margin: 10px 0;\n                    padding: 8px;\n                    background: rgba(255,255,255,0.05);\n                    border-radius: 4px;\n                }\n\n                .metric-item {\n                    margin: 4px 0;\n                    display: flex;\n                    justify-content: space-between;\n                }\n\n                .metric-value {\n                    color: #90EE90;\n                }\n\n                .slow-metric {\n                    color: #ff6b6b;\n                }\n\n                .normal-metric {\n                    color: #ffd700;\n                }\n\n                .fast-metric {\n                    color: #90EE90;\n                }\n            `;\n\n            // Wait for head to be available\n            if (document.head) {\n                document.head.appendChild(style);\n            } else {\n                document.addEventListener('DOMContentLoaded', () => {\n                    document.head.appendChild(style);\n                });\n            }\n\n            document.body.appendChild(this.panel);\n\n            // Add event listeners\n            document.getElementById('canvaspal-debug-close')?.addEventListener('click', () => {\n                this.toggleVisibility();\n            });\n\n            document.getElementById('clear-metrics')?.addEventListener('click', () => {\n                this.performanceMonitor.clear();\n                this.updatePerformanceMetrics();\n            });\n        };\n\n        // Start the initialization process\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', initPanel);\n        } else {\n            initPanel();\n        }\n    }\n\n    private initializeKeyboardShortcut(): void {\n        document.addEventListener('keydown', (e) => {\n            // Ctrl/Cmd + Shift + D to toggle debug panel\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'D') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            this.isVisible = !this.isVisible;\n            this.panel.style.display = this.isVisible ? 'block' : 'none';\n            this.logger.debug(`Debug panel ${this.isVisible ? 'shown' : 'hidden'}`);\n        }\n    }\n\n    private updatePerformanceMetrics(): void {\n        const metricsContainer = document.getElementById('performance-metrics');\n        if (!metricsContainer) return;\n\n        const report = this.performanceMonitor.getReport();\n        \n        metricsContainer.innerHTML = `\n            <div class=\"performance-section\">\n                <h3>Performance Summary</h3>\n                <div class=\"metric-item\">\n                    <span>Total Duration:</span>\n                    <span class=\"metric-value\">${report.summary.totalDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Average Duration:</span>\n                    <span class=\"metric-value\">${report.summary.averageDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Slowest Operation:</span>\n                    <span class=\"slow-metric\">${report.summary.slowestOperation.name} (${report.summary.slowestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Fastest Operation:</span>\n                    <span class=\"fast-metric\">${report.summary.fastestOperation.name} (${report.summary.fastestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n            </div>\n            <div class=\"performance-section\">\n                <h3>Recent Operations</h3>\n                ${report.metrics.slice(-5).map(metric => `\n                    <div class=\"metric-item\">\n                        <span>${metric.name}</span>\n                        <span class=\"${this.getMetricSpeedClass(metric.duration || 0)}\">${metric.duration?.toFixed(2)}ms</span>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private getMetricSpeedClass(duration: number): string {\n        if (duration > 100) return 'slow-metric';\n        if (duration > 50) return 'normal-metric';\n        return 'fast-metric';\n    }\n\n    public updateAssignmentInfo(assignments: Assignment[]): void {\n        const container = document.getElementById('assignment-info');\n        if (!container) return;\n\n        const typeCounts = this.getAssignmentTypeCounts(assignments);\n        const priorityRanges = this.getPriorityRanges(assignments);\n\n        container.innerHTML = `\n            <div style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${assignments.length} assignments\n                </div>\n                ${this.renderTypeCounts(typeCounts)}\n                ${this.renderPriorityDistribution(priorityRanges)}\n            </div>\n            ${this.renderAssignmentList(assignments)}\n        `;\n\n        // Update performance metrics\n        this.updatePerformanceMetrics();\n    }\n\n    private getAssignmentTypeCounts(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            acc[assignment.type] = (acc[assignment.type] || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private getPriorityRanges(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            if (assignment.priorityScore >= 0.7) acc.high = (acc.high || 0) + 1;\n            else if (assignment.priorityScore >= 0.4) acc.medium = (acc.medium || 0) + 1;\n            else acc.low = (acc.low || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private renderTypeCounts(counts: Record<string, number>): string {\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Assignment Types:</div>\n                ${Object.entries(counts).map(([type, count]) => `\n                    <div style=\"margin-left: 10px; color: #90EE90;\">\n                        ${type}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderPriorityDistribution(ranges: Record<string, number>): string {\n        const colors = {\n            high: '#ff6b6b',\n            medium: '#ffd700',\n            low: '#90EE90'\n        };\n\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Priority Distribution:</div>\n                ${Object.entries(ranges).map(([range, count]) => `\n                    <div style=\"margin-left: 10px; color: ${colors[range as keyof typeof colors]};\">\n                        ${range}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentList(assignments: Assignment[]): string {\n        return `\n            <div style=\"margin-top: 15px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Detailed Assignments:</div>\n                ${assignments.map(assignment => this.renderAssignmentDetail(assignment)).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentDetail(assignment: Assignment): string {\n        const priorityColor = assignment.priorityScore >= 0.7 ? '#ff6b6b' :\n                            assignment.priorityScore >= 0.4 ? '#ffd700' : '#90EE90';\n\n        return `\n            <div style=\"margin: 8px 0; padding: 8px; border-left: 2px solid ${priorityColor}; background: rgba(255,255,255,0.1);\">\n                <div style=\"margin-bottom: 4px;\">📚 ${assignment.title}</div>\n                <div style=\"color: #90EE90; margin-bottom: 4px;\">\n                    ${assignment.points ? `📝 ${assignment.points}/${assignment.maxPoints} points` : 'No points data'}\n                </div>\n                <div style=\"color: #ADD8E6; font-size: 11px;\">\n                    ⏰ Due: ${assignment.dueDate.toLocaleDateString()}\n                </div>\n                <div style=\"color: #DDA0DD; font-size: 11px;\">\n                    📚 Course: ${assignment.course}\n                </div>\n                <div style=\"color: ${priorityColor}; font-size: 11px; margin-top: 4px;\">\n                    ⚡ Priority: ${Math.round(assignment.priorityScore * 100)}%\n                </div>\n            </div>\n        `;\n    }\n\n    public logDetectionEvent(message: string, data?: any): void {\n        this.logger.debug(message, data);\n        // Could add visual indication of new events in the panel\n    }\n\n    public updatePerformanceAnalysis(analysis: any): void {\n        // Implementation\n    }\n}","import { Logger } from './logger';\n\ninterface DateDebugInfo {\n    totalDates: number;\n    types: {\n        due: number;\n        availability: number;\n        unlock: number;\n        unknown: number;\n    };\n    detections: {\n        element: string;\n        text: string;\n        type: string;\n        date: string;\n    }[];\n}\n\nexport class DateDebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n\n    constructor() {\n        this.logger = new Logger('DateDebugPanel');\n        this.createPanel();\n    }\n\n    private createPanel(): void {\n        const initPanel = () => {\n            if (!document.body) {\n                // Wait for body to be available\n                requestAnimationFrame(initPanel);\n                return;\n            }\n\n            this.panel = document.createElement('div');\n            this.panel.id = 'date-debug-panel';\n            this.panel.style.cssText = `\n                position: fixed;\n                bottom: 20px;\n                left: 20px;\n                width: 300px;\n                max-height: 400px;\n                background: rgba(0, 0, 0, 0.9);\n                color: white;\n                padding: 15px;\n                border-radius: 8px;\n                font-family: monospace;\n                font-size: 12px;\n                z-index: 9999;\n                overflow-y: auto;\n                box-shadow: 0 0 10px rgba(0,0,0,0.5);\n                display: none;\n            `;\n\n            const header = document.createElement('div');\n            header.innerHTML = `\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;\">\n                    <span style=\"color: #ffd700; font-weight: bold;\">📅 Date Detection Debug</span>\n                    <button id=\"date-debug-close\" style=\"background: none; border: none; color: white; cursor: pointer;\">✕</button>\n                </div>\n            `;\n            this.panel.appendChild(header);\n\n            const content = document.createElement('div');\n            content.id = 'date-debug-content';\n            this.panel.appendChild(content);\n\n            document.body.appendChild(this.panel);\n\n            document.getElementById('date-debug-close')?.addEventListener('click', () => {\n                this.toggleVisibility();\n            });\n        };\n\n        // Start the initialization process\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => {\n                initPanel();\n                // Add keyboard shortcut after DOM is ready\n                document.addEventListener('keydown', (e) => {\n                    if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {\n                        e.preventDefault();\n                        this.toggleVisibility();\n                    }\n                });\n            });\n        } else {\n            initPanel();\n            // Add keyboard shortcut immediately since DOM is ready\n            document.addEventListener('keydown', (e) => {\n                if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {\n                    e.preventDefault();\n                    this.toggleVisibility();\n                }\n            });\n        }\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            const isVisible = this.panel.style.display === 'block';\n            this.panel.style.display = isVisible ? 'none' : 'block';\n        }\n    }\n\n    public updateDebugInfo(info: DateDebugInfo): void {\n        const content = document.getElementById('date-debug-content');\n        if (!content) return;\n\n        content.innerHTML = `\n            <div class=\"date-stats\" style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${info.totalDates} date${info.totalDates !== 1 ? 's' : ''}\n                </div>\n                ${this.renderTypeDistribution(info.types)}\n            </div>\n            <div class=\"date-detections\">\n                <div style=\"color: #ffd700; margin-bottom: 8px;\">Detected Dates:</div>\n                ${this.renderDetections(info.detections)}\n            </div>\n        `;\n    }\n\n    private renderTypeDistribution(types: DateDebugInfo['types']): string {\n        const colors = {\n            due: '#ff6b6b',\n            availability: '#4CAF50',\n            unlock: '#2196F3',\n            unknown: '#9e9e9e'\n        };\n\n        return Object.entries(types)\n            .map(([type, count]) => `\n                <div style=\"margin-left: 10px; color: ${colors[type as keyof typeof colors]};\">\n                    ${type.charAt(0).toUpperCase() + type.slice(1)}: ${count}\n                </div>\n            `).join('');\n    }\n\n    private renderDetections(detections: DateDebugInfo['detections']): string {\n        return detections\n            .map(detection => `\n                <div style=\"margin: 8px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px;\">\n                    <div style=\"margin-bottom: 4px; color: #90EE90;\">\n                        ${detection.text}\n                    </div>\n                    <div style=\"font-size: 11px; color: #ADD8E6;\">\n                        Type: ${detection.type}\n                    </div>\n                    <div style=\"font-size: 11px; color: #DDA0DD;\">\n                        Parsed: ${detection.date}\n                    </div>\n                    <div style=\"font-size: 11px; color: #FFB6C1;\">\n                        Element: ${detection.element}\n                    </div>\n                </div>\n            `).join('');\n    }\n\n    public logDateDetection(message: string, data?: any): void {\n        this.logger.debug(message, data);\n    }\n}","import { Logger } from './logger';\n\ninterface PerformanceLog {\n    timestamp: number;\n    metrics: {\n        name: string;\n        duration: number;\n        metadata?: Record<string, any>;\n    }[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: string;\n        fastestOperation: string;\n    };\n}\n\ntype Trend = 'improving' | 'degrading' | 'stable';\n\ninterface PerformanceMetric {\n    name: string;\n    duration: number;\n    metadata?: Record<string, any>;\n    trend?: Trend;\n}\n\nexport class PerformanceLogger {\n    private logger: Logger;\n    private static readonly MAX_LOGS = 100;\n    private static readonly STORAGE_KEY = 'performanceLogs';\n\n    constructor() {\n        this.logger = new Logger('PerformanceLogger');\n    }\n\n    public async logPerformance(metrics: { name: string; duration: number; metadata?: Record<string, any> }[]): Promise<void> {\n        try {\n            const logs = await this.getLogs();\n            const log: PerformanceLog = {\n                timestamp: Date.now(),\n                metrics,\n                summary: this.calculateSummary(metrics)\n            };\n            \n            logs.unshift(log);\n            \n            // Keep only the most recent logs\n            while (logs.length > PerformanceLogger.MAX_LOGS) {\n                logs.pop();\n            }\n            await chrome.storage.local.set({ [PerformanceLogger.STORAGE_KEY]: logs });\n            this.logger.debug('Performance log saved:', log);\n        } catch (error) {\n            this.logger.error('Error saving performance log:', error);\n        }\n    }\n\n    private calculateSummary(metrics: { name: string; duration: number }[]): PerformanceLog['summary'] {\n        if (metrics.length === 0) {\n            return {\n                totalDuration: 0,\n                averageDuration: 0,\n                slowestOperation: '',\n                fastestOperation: ''\n            };\n        }\n\n        const totalDuration = metrics.reduce((sum, m) => sum + m.duration, 0);\n        const sortedMetrics = [...metrics].sort((a, b) => b.duration - a.duration);\n\n        return {\n            totalDuration,\n            averageDuration: totalDuration / metrics.length,\n            slowestOperation: sortedMetrics[0].name,\n            fastestOperation: sortedMetrics[sortedMetrics.length - 1].name\n        };\n    }\n\n    public async getLogs(): Promise<PerformanceLog[]> {\n        try {\n            const result = await chrome.storage.local.get(PerformanceLogger.STORAGE_KEY);\n            return result[PerformanceLogger.STORAGE_KEY] || [];\n        } catch (error) {\n            this.logger.error('Error retrieving performance logs:', error);\n            return [];\n        }\n    }\n\n    public async getPerformanceAnalysis(): Promise<{\n        trends: {\n            operation: string;\n            averageDuration: number;\n            trend: Trend;\n            percentageChange: number;\n        }[];\n        hotspots: {\n            operation: string;\n            frequency: number;\n            averageDuration: number;\n        }[];\n        recommendations: string[];\n    }> {\n        const logs = await this.getLogs();\n        if (logs.length < 2) {\n            return {\n                trends: [],\n                hotspots: [],\n                recommendations: ['Not enough data for analysis']\n            };\n        }\n\n        // Group metrics by operation name\n        const operationMetrics: Record<string, number[]> = {};\n        logs.forEach(log => {\n            log.metrics.forEach(metric => {\n                if (!operationMetrics[metric.name]) {\n                    operationMetrics[metric.name] = [];\n                }\n                operationMetrics[metric.name].push(metric.duration);\n            });\n        });\n\n        // Calculate trends\n        const trends = Object.entries(operationMetrics).map(([operation, durations]) => {\n            const recent = durations.slice(0, Math.floor(durations.length / 2));\n            const older = durations.slice(Math.floor(durations.length / 2));\n            \n            const recentAvg = this.calculateAverage(recent);\n            const olderAvg = this.calculateAverage(older);\n            const percentageChange = ((recentAvg - olderAvg) / olderAvg) * 100;\n\n            return {\n                operation,\n                averageDuration: recentAvg,\n                trend: this.calculateTrend(percentageChange),\n                percentageChange\n            };\n        });\n\n        // Identify hotspots\n        const hotspots = Object.entries(operationMetrics)\n            .map(([operation, durations]) => ({\n                operation,\n                frequency: durations.length,\n                averageDuration: this.calculateAverage(durations)\n            }))\n            .filter(h => h.averageDuration > 100 || h.frequency > logs.length * 0.5)\n            .sort((a, b) => b.averageDuration * b.frequency - a.averageDuration * a.frequency);\n\n        // Generate recommendations\n        const recommendations = this.generateRecommendations(trends, hotspots);\n\n        return { trends, hotspots, recommendations };\n    }\n\n    private calculateAverage(numbers: number[]): number {\n        return numbers.reduce((sum, n) => sum + n, 0) / numbers.length;\n    }\n\n    private calculateTrend(value: number): Trend {\n        if (value < -5) return 'improving';\n        if (value > 5) return 'degrading';\n        return 'stable';\n    }\n\n    private generateRecommendations(\n        trends: { operation: string; trend: string; percentageChange: number }[],\n        hotspots: { operation: string; frequency: number; averageDuration: number }[]\n    ): string[] {\n        const recommendations: string[] = [];\n\n        // Check for degrading performance\n        const degradingOps = trends.filter(t => t.trend === 'degrading');\n        if (degradingOps.length > 0) {\n            recommendations.push(\n                `Performance degradation detected in: ${degradingOps\n                    .map(op => `${op.operation} (${op.percentageChange.toFixed(1)}% slower)`)\n                    .join(', ')}`\n            );\n        }\n\n        // Check for frequent slow operations\n        hotspots.forEach(hotspot => {\n            if (hotspot.averageDuration > 200) {\n                recommendations.push(\n                    `Consider optimizing ${hotspot.operation} (avg: ${hotspot.averageDuration.toFixed(1)}ms, ` +\n                    `called ${hotspot.frequency} times)`\n                );\n            }\n        });\n\n        // Add general recommendations\n        if (hotspots.length > 3) {\n            recommendations.push('Consider reducing the number of expensive operations running in parallel');\n        }\n\n        if (recommendations.length === 0) {\n            recommendations.push('Performance is within acceptable ranges');\n        }\n\n        return recommendations;\n    }\n\n    public async clearLogs(): Promise<void> {\n        try {\n            await chrome.storage.local.remove(PerformanceLogger.STORAGE_KEY);\n            this.logger.info('Performance logs cleared');\n        } catch (error) {\n            this.logger.error('Error clearing performance logs:', error);\n        }\n    }\n}","import { Assignment } from '../types/models';\nimport { DebugPanel } from '../utils/debugPanel';\nimport { DateDebugPanel } from '../utils/dateDebugPanel';\nimport { DebugManager } from '../utils/debugManager';\n\n// Create debug manager instance\nconst debugManager = new DebugManager();\n\n// Function to initialize debug panels\nconst setupDebugPanels = () => {\n    // First enable debug mode if not already enabled\n    if (!debugManager.isDebugEnabled()) {\n        debugManager.toggleDebugMode();\n    }\n\n    // Configure debug settings\n    debugManager.updateDebugConfig({\n        enabled: true,\n        showDateDebug: true,\n        showAssignmentDebug: true,\n        showPriorityDebug: true,\n        showPerformanceMetrics: true,\n        logLevel: 'debug'\n    });\n\n    // Force create and show debug panels\n    const mainPanel = debugManager.getMainPanel();\n    const datePanel = debugManager.getDatePanel();\n\n    // Ensure panels are in the DOM\n    if (!document.getElementById('canvaspal-debug-panel')) {\n        mainPanel.toggleVisibility();\n    }\n    if (!document.getElementById('date-debug-panel')) {\n        datePanel.toggleVisibility();\n    }\n\n    console.log('Debug panels initialized and displayed');\n};\n\nexport interface GradeData {\n    courseName: string;\n    assignments: {\n        name: string;\n        points: number;\n        pointsPossible: number;\n        weight?: number;\n    }[];\n}\n\nexport interface DashboardData {\n    courseName: string;\n    assignments: {\n        name: string;\n        dueDate: string;\n        type: string;\n    }[];\n}\n\nexport class DashboardScraper {\n    constructor() {\n        this.initialize();\n    }\n\n    private initialize() {\n        try {\n            const data = this.scrapeDashboardData();\n            chrome.runtime.sendMessage({ type: 'DASHBOARD_DATA', data }).catch(err => {\n                console.error('Failed to send dashboard data:', err);\n            });\n        } catch (err) {\n            console.error('Failed to scrape dashboard data:', err);\n            chrome.runtime.sendMessage({\n                type: 'ERROR',\n                error: 'Failed to scrape dashboard data'\n            }).catch(console.error);\n        }\n    }\n\n    public scrapeDashboardData(): DashboardData[] {\n        try {\n            const dashboardData: DashboardData[] = [];\n            const courseAssignments: { [courseName: string]: DashboardData['assignments'] } = {};\n            \n            // Find all planner items\n            const plannerItems = document.querySelectorAll('.planner-item');\n            plannerItems.forEach(item => {\n                // Get course name\n                const courseElement = item.querySelector('.course-title, .planner-course-title');\n                const courseName = courseElement?.textContent?.trim() || 'Unknown Course';\n                \n                // Get assignment details\n                const assignmentElement = item.querySelector('.planner-item-details');\n                if (assignmentElement) {\n                    const name = item.querySelector('.planner-item-title')?.textContent?.trim() || '';\n                    const typeElement = item.querySelector('.planner-item-type');\n                    const type = typeElement?.textContent?.trim() ||\n                                typeElement?.getAttribute('title')?.trim() ||\n                                item.querySelector('.planner-item-type-icon')?.getAttribute('title')?.trim() || '';\n                    \n                    // Get due date\n                    const dueDateElement = item.querySelector('.planner-item-due-date, .planner-item-time');\n                    let dueDate = dueDateElement?.textContent?.trim() || '';\n                    \n                    // If it's an \"all day\" event, look for that text\n                    if (item.querySelector('.planner-item-time-all-day')) {\n                        dueDate = 'All Day';\n                    }\n\n                    if (name) {\n                        if (!courseAssignments[courseName]) {\n                            courseAssignments[courseName] = [];\n                        }\n                        courseAssignments[courseName].push({ name, type, dueDate });\n                    }\n                }\n            });\n\n            // Convert to DashboardData array\n            Object.entries(courseAssignments).forEach(([courseName, assignments]) => {\n                if (assignments.length > 0) {\n                    dashboardData.push({ courseName, assignments });\n                }\n            });\n\n            console.log('Extracted dashboard data:', dashboardData);\n            return dashboardData;\n        } catch (err) {\n            console.error('Error in scrapeDashboardData:', err);\n            throw err;\n        }\n    }\n}\n\nexport class GradeDataScraper {\n    constructor() {\n        this.initialize();\n    }\n\n    private initialize() {\n        if (this.isGradesPage()) {\n            try {\n                const data = this.scrapeGradeData();\n                chrome.runtime.sendMessage({ type: 'GRADE_DATA', data }).catch(err => {\n                    console.error('Failed to send grade data:', err);\n                });\n            } catch (err) {\n                console.error('Failed to scrape grade data:', err);\n                chrome.runtime.sendMessage({ \n                    type: 'ERROR', \n                    error: 'Failed to scrape grade data' \n                }).catch(console.error);\n            }\n        }\n    }\n\n    private isGradesPage(): boolean {\n        const pageTitle = document.querySelector('h1.ic-Action-header__Heading')?.textContent;\n        const hasGradesInUrl = window.location.pathname.includes('/grades');\n        const hasGradesTable = document.getElementById('grades_summary') !== null;\n        const hasGradesHeader = document.querySelector('.student_grades') !== null;\n\n        return !!(pageTitle?.includes('Grade') || hasGradesInUrl || hasGradesTable || hasGradesHeader);\n    }\n\n    public scrapeGradeData(): GradeData {\n        try {\n            const courseTitleSelectors = [\n                '.course-title',\n                'h2.course-title',\n                '.course_name',\n                '#course_name',\n                '.context_title',\n                'h1.ic-Action-header__Heading'\n            ];\n\n            let courseName = '';\n            for (const selector of courseTitleSelectors) {\n                const element = document.querySelector(selector);\n                if (element?.textContent?.trim()) {\n                    courseName = element.textContent.trim();\n                    break;\n                }\n            }\n\n            if (!courseName) {\n                const breadcrumb = document.querySelector('.ic-app-crumbs__title');\n                if (breadcrumb?.textContent) {\n                    courseName = breadcrumb.textContent.trim();\n                } else {\n                    courseName = document.title.split(':')[0].trim();\n                }\n            }\n\n            const assignments: GradeData['assignments'] = [];\n            const assignmentRows = document.querySelectorAll('.student_assignment, .assignment_graded');\n\n            assignmentRows.forEach(row => {\n                const nameSelectors = ['.title a', '.title', '.assignment_name'];\n                let name = '';\n                for (const selector of nameSelectors) {\n                    const element = row.querySelector(selector);\n                    if (element?.textContent?.trim()) {\n                        name = element.textContent.trim();\n                        break;\n                    }\n                }\n\n                const gradeText = row.querySelector('.grade, .score')?.textContent;\n                const possibleText = row.querySelector('.points_possible, .total-points')?.textContent;\n                const weightText = row.querySelector('.assignment_group .group_weight, .weight')?.textContent;\n            \n                const points = gradeText === '-' || gradeText === 'not a number' ? 0 : this.parseNumber(gradeText);\n                const pointsPossible = possibleText === 'also not a number' ? 0 : this.parseNumber(possibleText);\n                const weight = weightText ? this.parseNumber(weightText.replace('%', '')) : undefined;\n            \n                if (name) {\n                    assignments.push({ name, points, pointsPossible, weight });\n                }\n            });\n            \n            return { courseName, assignments };\n        } catch (err) {\n            console.error('Error in scrapeGradeData:', err);\n            throw err;\n        }\n    }\n\n    private parseNumber(value: string | null | undefined): number {\n        if (!value || value === '-' || value === 'not a number' || value === 'also not a number') return 0;\n        const num = parseFloat(value.replace(/[^\\d.-]/g, ''));\n        return isNaN(num) ? 0 : num;\n    }\n}\n\n// Initialize scrapers\nconst initializeScrapers = () => {\n    // Check if we're on a Canvas page\n    if (!document.querySelector('.ic-app')) {\n        return;\n    }\n\n    // Initialize scrapers based on page type\n    const isDashboard = document.querySelector('.dashboard-planner, .planner-container');\n    const isGradesPage = document.querySelector('.student_grades, .gradebook-content');\n\n    if (isDashboard) {\n        console.log('Initializing dashboard scraper');\n        new DashboardScraper();\n    }\n    if (isGradesPage) {\n        console.log('Initializing grades scraper');\n        new GradeDataScraper();\n    }\n};\n\n// Message handling\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    try {\n        console.log('Content script received message:', message);\n        \n        switch (message.type) {\n            case 'SETTINGS_UPDATED':\n                console.log('Settings updated:', message.settings);\n                // Store settings in local storage for quick access\n                chrome.storage.local.set({ settings: message.settings })\n                    .then(() => {\n                        console.log('Settings saved to local storage');\n                        // Re-initialize scrapers with new settings\n                        initializeScrapers();\n                        sendResponse({ success: true });\n                    })\n                    .catch(error => {\n                        console.error('Failed to save settings:', error);\n                        sendResponse({ success: false, error: error.message });\n                    });\n                return true; // Keep channel open for async response\n\n            case 'REFRESH_ASSIGNMENTS':\n                console.log('Refreshing assignments');\n                initializeScrapers();\n                sendResponse({ success: true });\n                break;\n\n            case 'FETCH_REQUEST':\n                // Handle fetch requests from background script\n                fetch(message.url, message.options)\n                    .then(async response => {\n                        if (!response.ok) {\n                            throw new Error(`HTTP error! status: ${response.status}`);\n                        }\n                        const data = await response.json();\n                        sendResponse({ success: true, data });\n                    })\n                    .catch(error => {\n                        console.error('Fetch error:', error);\n                        sendResponse({ success: false, error: error.message });\n                    });\n                return true; // Keep channel open for async response\n            case 'ASSIGNMENTS_UPDATED':\n                console.log('Assignments updated:', message.assignments);\n                // Update debug panels with assignment information\n                debugManager.getMainPanel().updateAssignmentInfo(message.assignments);\n                sendResponse({ success: true });\n                break;\n\n            case 'DEBUG_DATE_UPDATE':\n                debugManager.getDatePanel().updateDebugInfo(message.data);\n                sendResponse({ success: true });\n                break;\n\n            case 'DEBUG_TOGGLE':\n                if (message.panel === 'date') {\n                    debugManager.getDatePanel().toggleVisibility();\n                } else if (message.panel === 'main') {\n                    debugManager.getMainPanel().toggleVisibility();\n                }\n                sendResponse({ success: true });\n                break;\n\n\n            default:\n                console.warn('Unknown message type:', message.type);\n                sendResponse({ error: 'Unknown message type' });\n        }\n    } catch (error) {\n        console.error('Error handling message:', error);\n        sendResponse({ error: 'Internal error' });\n    }\n    return true; // Keep the message channel open for async response\n});\n\n// Initialize on load\nconst initialize = async () => {\n    const waitForBackgroundReady = async (retries = 0, maxRetries = 3): Promise<boolean> => {\n        try {\n            // Try to ping the background script\n            await chrome.runtime.sendMessage({ type: 'PING' });\n            console.log('Background script is ready');\n            return true;\n        } catch (error) {\n            if (retries < maxRetries) {\n                console.log(`Waiting for background script... (attempt ${retries + 1})`);\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                return waitForBackgroundReady(retries + 1, maxRetries);\n            }\n            console.error('Background script not available after retries');\n            return false;\n        }\n    };\n\n    try {\n        // Wait for background script to be ready\n        const isBackgroundReady = await waitForBackgroundReady();\n        if (!isBackgroundReady) {\n            throw new Error('Background script not available');\n        }\n\n        // Now notify background script that content script is ready\n        await chrome.runtime.sendMessage({ type: 'CONTENT_SCRIPT_READY' });\n        console.log('Content script ready message sent');\n\n        // Initialize scrapers and debug panels\n        const init = () => {\n            // Initialize scrapers\n            initializeScrapers();\n            \n            // Initialize debug panels\n            setupDebugPanels();\n            \n            console.log('Initialization complete');\n        };\n\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', init);\n        } else {\n            init();\n        }\n    } catch (error) {\n        console.error('Failed to initialize content script:', error);\n    }\n};\n\n// Wait for a moment before initializing to ensure extension is ready\nsetTimeout(initialize, 500);\n","import { Logger } from './logger';\nimport { DebugPanel } from './debugPanel';\nimport { DateDebugPanel } from './dateDebugPanel';\nimport { PerformanceMonitor } from './performanceMonitor';\nimport { PerformanceLogger } from './performanceLogger';\n\ninterface DebugConfig {\n    enabled: boolean;\n    logLevel: 'debug' | 'info' | 'warn' | 'error';\n    showDateDebug: boolean;\n    showAssignmentDebug: boolean;\n    showPriorityDebug: boolean;\n    showPerformanceMetrics: boolean;\n}\n\nexport class DebugManager {\n    private logger: Logger;\n    private mainPanel: DebugPanel;\n    private datePanel: DateDebugPanel;\n    private performanceMonitor: PerformanceMonitor;\n    private performanceLogger: PerformanceLogger;\n    private config: DebugConfig = {\n        enabled: false,\n        logLevel: 'info',\n        showDateDebug: false,\n        showAssignmentDebug: false,\n        showPriorityDebug: false,\n        showPerformanceMetrics: false\n    };\n\n    constructor() {\n        this.logger = new Logger('DebugManager');\n        this.mainPanel = new DebugPanel();\n        this.datePanel = new DateDebugPanel();\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.performanceLogger = new PerformanceLogger();\n        this.initializeKeyboardShortcuts();\n        this.initializePerformanceLogging();\n        this.loadDebugConfig();\n    }\n\n    private initializePerformanceLogging(): void {\n        // Log performance metrics every 5 minutes if debug mode is enabled\n        setInterval(async () => {\n            if (this.config.enabled && this.config.showPerformanceMetrics) {\n                const report = this.performanceMonitor.getReport();\n                // Filter out metrics with undefined duration and ensure proper type\n                const validMetrics = report.metrics.filter(m => m.duration !== undefined).map(m => ({\n                    name: m.name,\n                    duration: m.duration as number,\n                    metadata: m.metadata\n                }));\n                \n                await this.performanceLogger.logPerformance(validMetrics);\n                \n                if (this.config.showPerformanceMetrics) {\n                    await this.updatePerformanceAnalysis();\n                }\n            }\n        }, 5 * 60 * 1000);\n    }\n\n    private async updatePerformanceAnalysis(): Promise<void> {\n        const analysis = await this.performanceLogger.getPerformanceAnalysis();\n        this.mainPanel.updatePerformanceAnalysis(analysis);\n    }\n\n    private initializeKeyboardShortcuts(): void {\n        document.addEventListener('keydown', (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey) {\n                switch (e.key) {\n                    case '`': // Toggle all debug features\n                        e.preventDefault();\n                        this.toggleDebugMode();\n                        break;\n                    case 'D': // Main debug panel\n                        e.preventDefault();\n                        this.mainPanel.toggleVisibility();\n                        break;\n                    case 'T': // Date debug panel\n                        e.preventDefault();\n                        this.datePanel.toggleVisibility();\n                        break;\n                    case 'P': // Performance metrics\n                        e.preventDefault();\n                        this.togglePerformanceMetrics();\n                        break;\n                }\n            }\n        });\n    }\n\n    private async togglePerformanceMetrics(): Promise<void> {\n        this.config.showPerformanceMetrics = !this.config.showPerformanceMetrics;\n        if (this.config.showPerformanceMetrics) {\n            await this.updatePerformanceAnalysis();\n        }\n        this.saveDebugConfig();\n    }\n\n    private async loadDebugConfig(): Promise<void> {\n        try {\n            const result = await chrome.storage.sync.get('debugConfig');\n            if (result.debugConfig) {\n                this.config = { ...this.config, ...result.debugConfig };\n                this.applyConfig();\n            }\n        } catch (error) {\n            this.logger.error('Error loading debug config:', error);\n        }\n    }\n\n    private async saveDebugConfig(): Promise<void> {\n        try {\n            await chrome.storage.sync.set({ debugConfig: this.config });\n        } catch (error) {\n            this.logger.error('Error saving debug config:', error);\n        }\n    }\n\n    private applyConfig(): void {\n        if (!this.config.enabled) {\n            this.disableAllPanels();\n            return;\n        }\n\n        this.logger.setLevel(this.getLogLevel());\n        \n        if (this.config.showDateDebug) {\n            this.datePanel.toggleVisibility();\n        }\n        \n        if (this.config.showAssignmentDebug || this.config.showPriorityDebug) {\n            this.mainPanel.toggleVisibility();\n        }\n    }\n\n    private disableAllPanels(): void {\n        const panels = document.querySelectorAll('[id$=\"-debug-panel\"]');\n        panels.forEach(panel => {\n            (panel as HTMLElement).style.display = 'none';\n        });\n    }\n\n    public toggleDebugMode(): void {\n        this.config.enabled = !this.config.enabled;\n        this.applyConfig();\n        this.saveDebugConfig();\n\n        this.logger.info(`Debug mode ${this.config.enabled ? 'enabled' : 'disabled'}`);\n    }\n\n    public updateDebugConfig(newConfig: Partial<DebugConfig>): void {\n        this.config = { ...this.config, ...newConfig };\n        this.applyConfig();\n        this.saveDebugConfig();\n    }\n\n    private getLogLevel(): number {\n        switch (this.config.logLevel) {\n            case 'debug': return 0;\n            case 'info': return 1;\n            case 'warn': return 2;\n            case 'error': return 3;\n            default: return 1;\n        }\n    }\n\n    public getMainPanel(): DebugPanel {\n        return this.mainPanel;\n    }\n\n    public getDatePanel(): DateDebugPanel {\n        return this.datePanel;\n    }\n\n    public isDebugEnabled(): boolean {\n        return this.config.enabled;\n    }\n\n    public getConfig(): DebugConfig {\n        return { ...this.config };\n    }\n\n    public async clearPerformanceLogs(): Promise<void> {\n        await this.performanceLogger.clearLogs();\n        if (this.config.showPerformanceMetrics) {\n            await this.updatePerformanceAnalysis();\n        }\n    }\n\n    public async getPerformanceAnalysis() {\n        return this.performanceLogger.getPerformanceAnalysis();\n    }\n}"],"names":["LogLevel","Logger","context","level","INFO","this","currentLevel","cleanOldLogs","getInstance","key","instances","has","set","get","setLevel","debug","message","data","log","DEBUG","info","warn","WARN","error","ERROR","args","timestamp","Date","toISOString","formattedMessage","getLogPrefix","length","formattedData","formatLogData","console","entry","stack","Error","saveLogs","notifyError","Array","isArray","map","item","name","formatted","value","Object","entries","logs","chrome","storage","local","push","MAX_LOGS","splice","thirtyDaysAgo","setDate","getDate","filteredLogs","filter","notifications","create","type","iconUrl","title","priority","getLogs","Map","PerformanceMonitor","metrics","logger","instance","startMetric","metadata","id","now","startTime","performance","endMetric","metric","find","m","endTime","duration","toFixed","getReport","completedMetrics","undefined","summary","totalDuration","averageDuration","slowestOperation","fastestOperation","reduce","sum","sorted","sort","a","b","clear","monitorAsync","fn","finally","monitor","result","DebugPanel","constructor","panel","isVisible","performanceMonitor","createPanel","initializeKeyboardShortcut","initPanel","document","body","requestAnimationFrame","createElement","innerHTML","style","cssText","textContent","head","appendChild","addEventListener","getElementById","toggleVisibility","updatePerformanceMetrics","readyState","e","ctrlKey","metaKey","shiftKey","preventDefault","display","metricsContainer","report","slice","getMetricSpeedClass","join","updateAssignmentInfo","assignments","container","typeCounts","getAssignmentTypeCounts","priorityRanges","getPriorityRanges","renderTypeCounts","renderPriorityDistribution","renderAssignmentList","acc","assignment","priorityScore","high","medium","low","counts","count","ranges","colors","range","renderAssignmentDetail","priorityColor","points","maxPoints","dueDate","toLocaleDateString","course","Math","round","logDetectionEvent","updatePerformanceAnalysis","analysis","DateDebugPanel","header","content","updateDebugInfo","totalDates","renderTypeDistribution","types","renderDetections","detections","due","availability","unlock","unknown","charAt","toUpperCase","detection","text","date","element","logDateDetection","PerformanceLogger","logPerformance","calculateSummary","unshift","pop","STORAGE_KEY","sortedMetrics","getPerformanceAnalysis","trends","hotspots","recommendations","operationMetrics","forEach","operation","durations","recent","floor","older","recentAvg","calculateAverage","olderAvg","percentageChange","trend","calculateTrend","frequency","h","generateRecommendations","numbers","n","degradingOps","t","op","hotspot","clearLogs","remove","debugManager","config","enabled","logLevel","showDateDebug","showAssignmentDebug","showPriorityDebug","showPerformanceMetrics","mainPanel","datePanel","performanceLogger","initializeKeyboardShortcuts","initializePerformanceLogging","loadDebugConfig","setInterval","async","validMetrics","toggleDebugMode","togglePerformanceMetrics","saveDebugConfig","sync","debugConfig","applyConfig","getLogLevel","disableAllPanels","querySelectorAll","updateDebugConfig","newConfig","getMainPanel","getDatePanel","isDebugEnabled","getConfig","clearPerformanceLogs","DashboardScraper","initialize","scrapeDashboardData","runtime","sendMessage","catch","err","dashboardData","courseAssignments","courseElement","querySelector","courseName","trim","typeElement","getAttribute","dueDateElement","GradeDataScraper","isGradesPage","scrapeGradeData","pageTitle","hasGradesInUrl","window","location","pathname","includes","hasGradesTable","hasGradesHeader","courseTitleSelectors","selector","breadcrumb","split","row","nameSelectors","gradeText","possibleText","weightText","parseNumber","pointsPossible","weight","replace","num","parseFloat","isNaN","initializeScrapers","isDashboard","onMessage","addListener","sender","sendResponse","settings","then","success","fetch","url","options","response","ok","status","json","setTimeout","waitForBackgroundReady","retries","maxRetries","Promise","resolve","init","setupDebugPanels"],"sourceRoot":""}