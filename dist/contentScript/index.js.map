{"version":3,"file":"contentScript/index.js","mappings":"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","sources":["webpack://canvaspal/./src/contentScript/index.ts","webpack://canvaspal/./src/contentScript/canvasButton.ts"],"sourcesContent":["console.log('CanvasPal content script loaded');\n\nimport { initializeButton } from './canvasButton';\n\n// Wait for both head and body to be available\nconst waitForElements = () => {\n    return new Promise<void>((resolve) => {\n        const checkElements = () => {\n            if (document.head && document.body) {\n                resolve();\n            } else {\n                requestAnimationFrame(checkElements);\n            }\n        };\n        checkElements();\n    });\n};\n\n// Initialize the extension\nconst initialize = async () => {\n    try {\n        await waitForElements();\n        initializeButton();\n    } catch (error) {\n        console.error('Error initializing CanvasPal:', error);\n    }\n};\n\n// Start initialization when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n} else {\n    initialize();\n}\n","// Create and inject the button and popup HTML\nconst createElements = async () => {\n    try {\n        // Ensure we have access to chrome APIs\n        if (!chrome?.runtime) {\n            throw new Error('Chrome APIs not available');\n        }\n\n        // Create and inject styles\n        const styleSheet = document.createElement('style');\n        styleSheet.textContent = `\n            .canvas-pal-button {\n                position: fixed;\n                right: 20px;\n                top: 20px;\n                width: 44px;\n                height: 44px;\n                border-radius: 50%;\n                background: #0066CC;\n                color: white;\n                border: none;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                z-index: 2147483647;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                backdrop-filter: blur(8px);\n            }\n\n            .canvas-pal-button:hover {\n                transform: translateY(-2px);\n                background: #0056b3;\n                box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);\n            }\n\n            .canvas-pal-button.has-assignments {\n                animation: canvas-pal-pulse 2s infinite;\n            }\n\n            @keyframes canvas-pal-pulse {\n                0% { transform: scale(1); }\n                50% { transform: scale(1.05); }\n                100% { transform: scale(1); }\n            }\n\n            .canvas-pal-toggle {\n                position: fixed;\n                top: 20px;\n                right: 70px;\n                z-index: 2147483647;\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                background: rgba(255, 255, 255, 0.9);\n                padding: 6px 12px;\n                border-radius: 20px;\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n                font-family: 'Lato', sans-serif;\n                font-size: 12px;\n            }\n\n            .canvas-pal-toggle input {\n                margin: 0;\n                cursor: pointer;\n            }\n\n            .popup-container {\n                position: fixed;\n                right: 20px;\n                top: 75px;\n                width: 350px;\n                min-height: 400px;\n                background: #f9f9f9;\n                border: 2px solid #000;\n                z-index: 2147483646;\n                display: none;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .popup-container.show {\n                display: block;\n            }\n\n            .popup-header {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                background-color: #0066CC;\n                color: white;\n                padding: 12px;\n                position: relative;\n                border-bottom: 1px solid #666;\n                margin-bottom: 16px;\n            }\n\n            .popup-title {\n                flex-grow: 1;\n                text-align: center;\n                margin: 0;\n                font-size: 2.3em;\n                color: #FFFFFF;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .task-count {\n                position: absolute;\n                bottom: 8px;\n                left: 9px;\n                font-size: .7em;\n                color: #FFFFFF;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .logo img {\n                width: 50px;\n                height: auto;\n                border-radius: 20%;\n                border: 3px solid #FFFFFF;\n                padding: 0;\n            }\n\n            .assignments-list {\n                max-height: 300px;\n                overflow-y: auto;\n                padding: 16px;\n            }\n\n            .assignment-item {\n                padding: 12px;\n                border: 1px solid #eee;\n                margin-bottom: 8px;\n                border-radius: 4px;\n            }\n\n            .assignment-item.high-priority {\n                border-left: 4px solid #d92b2b;\n            }\n\n            .assignment-item.medium-priority {\n                border-left: 4px solid #f0ad4e;\n            }\n\n            .assignment-item.low-priority {\n                border-left: 4px solid #5cb85c;\n            }\n\n            .settings-button {\n                bottom: 16px;\n                right: 16px;\n                position: absolute;\n                text-align: center;\n            }\n\n            .settings-button button {\n                background-color: #0066CC;\n                color: white;\n                padding: 10px 20px;\n                border-radius: 8px;\n                border: none;\n                transition: background-color 0.3s, transform 0.3s;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .settings-button button:hover {\n                background-color: #0056b3;\n                transform: scale(1.08);\n            }\n        `;\n        document.head.appendChild(styleSheet);\n\n        // Create button\n        const button = document.createElement('button');\n        button.className = 'canvas-pal-button';\n        button.textContent = '0';\n        document.body.appendChild(button);\n\n        // Create toggle for non-Canvas pages\n        const toggleContainer = document.createElement('div');\n        toggleContainer.className = 'canvas-pal-toggle';\n        toggleContainer.innerHTML = `\n            <label>\n                <input type=\"checkbox\" id=\"canvas-pal-visibility\" checked>\n                <span>Follow Outside Canvas</span>\n            </label>\n        `;\n        document.body.appendChild(toggleContainer);\n\n        // Create popup container\n        const popup = document.createElement('div');\n        popup.className = 'popup-container';\n        popup.innerHTML = `\n            <div class=\"popup-header\">\n                <div class=\"popup-title\">CanvasPAL</div>\n                <div class=\"task-count\" id=\"taskCount\">0 Tasks</div>\n                <div class=\"logo\">\n                    <img src=\"${chrome.runtime.getURL('icons/CanvasPAL_logo.webp')}\" alt=\"CanvasPAL Logo\" />\n                </div>\n            </div>\n            <div class=\"assignments-list\" id=\"assignmentList\">\n                <!-- Assignments will be populated here -->\n            </div>\n            <div class=\"settings-button\">\n                <button id=\"settings-button\">Settings</button>\n            </div>\n        `;\n        document.body.appendChild(popup);\n\n        // Add settings button click handler\n        const settingsButton = popup.querySelector('#settings-button');\n        if (settingsButton) {\n            settingsButton.addEventListener('click', () => {\n                if (chrome?.runtime) {\n                    window.open(chrome.runtime.getURL('settings/settings.html'));\n                }\n            });\n        }\n\n        return { button, toggleContainer, popup };\n    } catch (error) {\n        console.error('Error creating elements:', error);\n        return null;\n    }\n};\n\n// Helper function to determine priority class\nfunction getPriorityClass(score: number): string {\n    if (score >= 0.7) return 'high-priority';\n    if (score >= 0.4) return 'medium-priority';\n    return 'low-priority';\n}\n\n// Helper function to safely update assignments list\nfunction updateAssignmentsList(assignments: any[], assignmentList: HTMLElement, taskCount: HTMLElement) {\n    try {\n        taskCount.textContent = `${assignments.length} Tasks`;\n        assignmentList.innerHTML = assignments.map(assignment => `\n            <div class=\"assignment-item ${getPriorityClass(assignment.priorityScore)}\">\n                <div style=\"font-weight: bold;\">${assignment.title}</div>\n                <div>Due: ${assignment.dueDate}</div>\n                <div>Course: ${assignment.courseName}</div>\n                <div>Points: ${assignment.points}</div>\n            </div>\n        `).join('');\n    } catch (error) {\n        console.error('Error updating assignments list:', error);\n    }\n}\n\n// Initialize button and popup functionality\nexport const initializeButton = async () => {\n    try {\n        const isCanvasPage = window.location.href.includes('.instructure.com');\n        const elements = await createElements();\n        \n        if (!elements) {\n            console.error('Failed to create elements');\n            return;\n        }\n\n        const { button, toggleContainer, popup } = elements;\n\n        // Show/hide toggle based on page type\n        toggleContainer.style.display = isCanvasPage ? 'flex' : 'none';\n\n        // Initialize visibility from settings\n        if (chrome?.storage?.local) {\n            chrome.storage.local.get('settings', (data) => {\n                try {\n                    const settings = data.settings || { displayOptions: { showOutsideCanvas: true } };\n                    const showOutsideCanvas = settings.displayOptions?.showOutsideCanvas ?? true;\n                    \n                    // Update checkbox state\n                    const checkbox = document.getElementById('canvas-pal-visibility') as HTMLInputElement;\n                    if (checkbox) {\n                        checkbox.checked = showOutsideCanvas;\n                    }\n\n                    // Update button visibility\n                    if (!isCanvasPage) {\n                        button.style.display = showOutsideCanvas ? 'flex' : 'none';\n                    }\n                } catch (error) {\n                    console.error('Error handling settings:', error);\n                }\n            });\n        }\n\n        // Handle button click\n        button.addEventListener('click', () => {\n            popup.classList.toggle('show');\n        });\n\n        // Handle toggle change\n        const checkbox = document.getElementById('canvas-pal-visibility');\n        checkbox?.addEventListener('change', (e) => {\n            const target = e.target as HTMLInputElement;\n            if (chrome?.storage?.local) {\n                chrome.storage.local.get('settings', (data) => {\n                    try {\n                        const settings = data.settings || { displayOptions: {} };\n                        if (!settings.displayOptions) settings.displayOptions = {};\n                        settings.displayOptions.showOutsideCanvas = target.checked;\n                        chrome.storage.local.set({ settings });\n                        \n                        // Update button visibility\n                        if (!isCanvasPage) {\n                            button.style.display = target.checked ? 'flex' : 'none';\n                        }\n                    } catch (error) {\n                        console.error('Error updating settings:', error);\n                    }\n                });\n            }\n        });\n\n        // Close popup when clicking outside\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            if (!popup.contains(target) && !button.contains(target)) {\n                popup.classList.remove('show');\n            }\n        });\n\n        // Handle assignment updates\n        if (chrome?.runtime) {\n            chrome.runtime.onMessage.addListener((message) => {\n                try {\n                    if (message.type === 'ASSIGNMENTS_UPDATE') {\n                        button.textContent = message.data.length.toString();\n                        button.classList.toggle('has-assignments', message.data.length > 0);\n\n                        const assignmentList = document.getElementById('assignmentList');\n                        const taskCount = document.getElementById('taskCount');\n                        \n                        if (assignmentList && taskCount) {\n                            updateAssignmentsList(message.data, assignmentList, taskCount);\n                        }\n                    }\n                } catch (error) {\n                    console.error('Error handling assignment update:', error);\n                }\n            });\n\n            // Get initial assignments\n            chrome.runtime.sendMessage({ type: 'GET_ASSIGNMENTS' }, (response) => {\n                try {\n                    if (response?.assignments) {\n                        button.textContent = response.assignments.length.toString();\n                        button.classList.toggle('has-assignments', response.assignments.length > 0);\n                    }\n                } catch (error) {\n                    console.error('Error getting initial assignments:', error);\n                }\n            });\n        }\n    } catch (error) {\n        console.error('Error initializing button:', error);\n    }\n};\n"],"names":["console","log","initialize","async","Promise","resolve","checkElements","document","head","body","requestAnimationFrame","isCanvasPage","window","location","href","includes","elements","chrome","runtime","Error","styleSheet","createElement","textContent","appendChild","button","className","toggleContainer","innerHTML","popup","getURL","settingsButton","querySelector","addEventListener","open","error","createElements","style","display","storage","local","get","data","settings","displayOptions","showOutsideCanvas","checkbox","getElementById","checked","classList","toggle","e","target","set","contains","remove","onMessage","addListener","message","type","length","toString","assignmentList","taskCount","assignments","map","assignment","score","priorityScore","title","dueDate","courseName","points","join","updateAssignmentsList","sendMessage","response","initializeButton","readyState"],"sourceRoot":""}