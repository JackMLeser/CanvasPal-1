{"version":3,"file":"contentScript/index.js","mappings":"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","sources":["webpack://canvaspal/./src/contentScript/canvasButton.ts","webpack://canvaspal/./src/utils/logger.ts","webpack://canvaspal/./src/utils/performanceMonitor.ts","webpack://canvaspal/./src/utils/debugPanel.ts","webpack://canvaspal/./src/utils/dateDebugPanel.ts","webpack://canvaspal/./src/utils/dateDebugger.ts","webpack://canvaspal/./src/utils/assignmentDetector.ts","webpack://canvaspal/./src/contentScript/index.ts"],"sourcesContent":["// Create and inject the button and popup HTML\nconst createElements = async () => {\n    try {\n        console.log('Creating CanvasPal elements');\n        \n        // Ensure we have access to chrome APIs\n        if (!chrome?.runtime) {\n            throw new Error('Chrome APIs not available');\n        }\n\n        // Get icon URL\n        const iconUrl = chrome.runtime.getURL('icons/icon128.png');\n        console.log('Icon URL:', iconUrl);\n\n        // Create and inject styles\n        const styleSheet = document.createElement('style');\n        styleSheet.textContent = `\n            .canvas-pal-button {\n                position: fixed;\n                right: 20px;\n                top: 20px;\n                width: 44px;\n                height: 44px;\n                border-radius: 50%;\n                background: #0066CC;\n                color: white;\n                border: none;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                z-index: 2147483647;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                backdrop-filter: blur(8px);\n            }\n\n            .canvas-pal-button:hover {\n                transform: translateY(-2px);\n                background: #0056b3;\n                box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);\n            }\n\n            .canvas-pal-button.has-assignments {\n                animation: canvas-pal-pulse 2s infinite;\n            }\n\n            @keyframes canvas-pal-pulse {\n                0% { transform: scale(1); }\n                50% { transform: scale(1.05); }\n                100% { transform: scale(1); }\n            }\n\n            .canvas-pal-toggle {\n                position: fixed;\n                top: 20px;\n                right: 70px;\n                z-index: 2147483647;\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                background: rgba(255, 255, 255, 0.9);\n                padding: 6px 12px;\n                border-radius: 20px;\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n                font-family: 'Lato', sans-serif;\n                font-size: 12px;\n            }\n\n            .canvas-pal-toggle input {\n                margin: 0;\n                cursor: pointer;\n            }\n\n            .popup-container {\n                position: fixed;\n                right: 20px;\n                top: 75px;\n                width: 350px;\n                min-height: 400px;\n                background: #f9f9f9;\n                border: 2px solid #000;\n                z-index: 2147483646;\n                display: none;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .popup-container.show {\n                display: block;\n            }\n\n            .popup-header {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                background-color: #0066CC;\n                color: white;\n                padding: 12px;\n                position: relative;\n                border-bottom: 1px solid #666;\n                margin-bottom: 16px;\n            }\n\n            .popup-title {\n                flex-grow: 1;\n                text-align: center;\n                margin: 0;\n                font-size: 2.3em;\n                color: #FFFFFF;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .task-count {\n                position: absolute;\n                bottom: 8px;\n                left: 9px;\n                font-size: .7em;\n                color: #FFFFFF;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .logo {\n                margin-left: 16px;\n                display: flex;\n                align-items: center;\n            }\n\n            .logo img {\n                width: 50px;\n                height: 50px;\n                border-radius: 20%;\n                border: 3px solid #FFFFFF;\n                padding: 0;\n                background: white;\n                object-fit: contain;\n            }\n\n            .assignments-list {\n                max-height: 300px;\n                overflow-y: auto;\n                padding: 16px;\n            }\n\n            .assignment-item {\n                padding: 12px;\n                border: 1px solid #eee;\n                margin-bottom: 8px;\n                border-radius: 4px;\n                background: white;\n            }\n\n            .assignment-item.high-priority {\n                border-left: 4px solid #d92b2b;\n            }\n\n            .assignment-item.medium-priority {\n                border-left: 4px solid #f0ad4e;\n            }\n\n            .assignment-item.low-priority {\n                border-left: 4px solid #5cb85c;\n            }\n\n            .settings-button {\n                bottom: 16px;\n                right: 16px;\n                position: absolute;\n                text-align: center;\n            }\n\n            .settings-button button {\n                background-color: #0066CC;\n                color: white;\n                padding: 10px 20px;\n                border-radius: 8px;\n                border: none;\n                transition: background-color 0.3s, transform 0.3s;\n                font-family: 'Lato', sans-serif;\n                cursor: pointer;\n                font-size: 14px;\n                font-weight: 500;\n            }\n\n            .settings-button button:hover {\n                background-color: #0056b3;\n                transform: scale(1.08);\n            }\n\n            @media (prefers-color-scheme: dark) {\n                .popup-container {\n                    background: #1c1c1e;\n                    border-color: #666;\n                }\n\n                .assignment-item {\n                    background: #2c2c2e;\n                    border-color: #666;\n                    color: white;\n                }\n\n                .logo img {\n                    background: transparent;\n                }\n\n                .canvas-pal-toggle {\n                    background: rgba(45, 59, 69, 0.9);\n                    color: white;\n                }\n            }\n        `;\n        document.head.appendChild(styleSheet);\n\n        // Create button\n        const button = document.createElement('button');\n        button.className = 'canvas-pal-button';\n        button.textContent = '0';\n        document.body.appendChild(button);\n\n        // Create toggle for non-Canvas pages\n        const toggleContainer = document.createElement('div');\n        toggleContainer.className = 'canvas-pal-toggle';\n        toggleContainer.innerHTML = `\n            <label>\n                <input type=\"checkbox\" id=\"canvas-pal-visibility\" checked>\n                <span>Follow Outside Canvas</span>\n            </label>\n        `;\n        document.body.appendChild(toggleContainer);\n\n        // Create popup container\n        const popup = document.createElement('div');\n        popup.className = 'popup-container';\n        popup.innerHTML = `\n            <div class=\"popup-header\">\n                <div class=\"popup-title\">CanvasPAL</div>\n                <div class=\"task-count\" id=\"taskCount\">0 Tasks</div>\n                <div class=\"logo\">\n                    <img src=\"${iconUrl}\" alt=\"CanvasPAL Logo\" />\n                </div>\n            </div>\n            <div class=\"assignments-list\" id=\"assignmentList\">\n                <!-- Assignments will be populated here -->\n            </div>\n            <div class=\"settings-button\">\n                <button id=\"settings-button\">Settings</button>\n            </div>\n        `;\n        document.body.appendChild(popup);\n\n        // Add settings button click handler\n        const settingsButton = popup.querySelector('#settings-button');\n        if (settingsButton) {\n            settingsButton.addEventListener('click', () => {\n                console.log('Settings button clicked');\n                try {\n                    const settingsUrl = chrome.runtime.getURL('settings/settings.html');\n                    console.log('Opening settings at:', settingsUrl);\n                    window.open(settingsUrl, '_blank');\n                } catch (error) {\n                    console.error('Error opening settings:', error);\n                }\n            });\n        }\n\n        return { button, toggleContainer, popup };\n    } catch (error) {\n        console.error('Error creating elements:', error);\n        return null;\n    }\n};\n\n// Helper function to determine priority class\nfunction getPriorityClass(score: number): string {\n    if (score >= 0.7) return 'high-priority';\n    if (score >= 0.4) return 'medium-priority';\n    return 'low-priority';\n}\n\n// Helper function to safely update assignments list\nfunction updateAssignmentsList(assignments: any[], assignmentList: HTMLElement, taskCount: HTMLElement) {\n    try {\n        console.log('Updating assignments list:', assignments);\n        taskCount.textContent = `${assignments.length} Tasks`;\n        assignmentList.innerHTML = assignments.map(assignment => `\n            <div class=\"assignment-item ${getPriorityClass(assignment.priorityScore)}\">\n                <div style=\"font-weight: bold;\">${assignment.title}</div>\n                <div>Due: ${assignment.dueDate}</div>\n                <div>Course: ${assignment.courseName}</div>\n                <div>Points: ${assignment.points}</div>\n            </div>\n        `).join('');\n    } catch (error) {\n        console.error('Error updating assignments list:', error);\n    }\n}\n\n// Initialize button and popup functionality\nexport const initializeButton = async () => {\n    try {\n        console.log('Initializing CanvasPal button');\n        const isCanvasPage = window.location.href.includes('.instructure.com');\n        const elements = await createElements();\n        \n        if (!elements) {\n            console.error('Failed to create elements');\n            return;\n        }\n\n        const { button, toggleContainer, popup } = elements;\n\n        // Show/hide toggle based on page type\n        toggleContainer.style.display = isCanvasPage ? 'flex' : 'none';\n\n        // Initialize visibility from settings\n        if (chrome?.storage?.local) {\n            chrome.storage.local.get('settings', (data) => {\n                try {\n                    const settings = data.settings || { displayOptions: { showOutsideCanvas: true } };\n                    const showOutsideCanvas = settings.displayOptions?.showOutsideCanvas ?? true;\n                    \n                    // Update checkbox state\n                    const checkbox = document.getElementById('canvas-pal-visibility') as HTMLInputElement;\n                    if (checkbox) {\n                        checkbox.checked = showOutsideCanvas;\n                    }\n\n                    // Update button visibility\n                    if (!isCanvasPage) {\n                        button.style.display = showOutsideCanvas ? 'flex' : 'none';\n                    }\n                } catch (error) {\n                    console.error('Error handling settings:', error);\n                }\n            });\n        }\n\n        // Handle button click\n        button.addEventListener('click', () => {\n            popup.classList.toggle('show');\n        });\n\n        // Handle toggle change\n        const checkbox = document.getElementById('canvas-pal-visibility');\n        checkbox?.addEventListener('change', (e) => {\n            const target = e.target as HTMLInputElement;\n            if (chrome?.storage?.local) {\n                chrome.storage.local.get('settings', (data) => {\n                    try {\n                        const settings = data.settings || { displayOptions: {} };\n                        if (!settings.displayOptions) settings.displayOptions = {};\n                        settings.displayOptions.showOutsideCanvas = target.checked;\n                        chrome.storage.local.set({ settings });\n                        \n                        // Update button visibility\n                        if (!isCanvasPage) {\n                            button.style.display = target.checked ? 'flex' : 'none';\n                        }\n                    } catch (error) {\n                        console.error('Error updating settings:', error);\n                    }\n                });\n            }\n        });\n\n        // Close popup when clicking outside\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            if (!popup.contains(target) && !button.contains(target)) {\n                popup.classList.remove('show');\n            }\n        });\n\n        // Handle assignment updates\n        if (chrome?.runtime) {\n            chrome.runtime.onMessage.addListener((message) => {\n                try {\n                    console.log('Received message:', message);\n                    if (message.type === 'ASSIGNMENTS_UPDATE') {\n                        button.textContent = message.data.length.toString();\n                        button.classList.toggle('has-assignments', message.data.length > 0);\n\n                        const assignmentList = document.getElementById('assignmentList');\n                        const taskCount = document.getElementById('taskCount');\n                        \n                        if (assignmentList && taskCount) {\n                            updateAssignmentsList(message.data, assignmentList, taskCount);\n                        }\n                    } else if (message.type === 'REFRESH_ASSIGNMENTS') {\n                        // Request fresh assignments from the background script\n                        chrome.runtime.sendMessage({ type: 'GET_ASSIGNMENTS' });\n                    }\n                } catch (error) {\n                    console.error('Error handling message:', error);\n                }\n            });\n\n            // Get initial assignments\n            console.log('Requesting initial assignments');\n            chrome.runtime.sendMessage({ type: 'GET_ASSIGNMENTS' }, (response) => {\n                try {\n                    console.log('Received initial assignments:', response);\n                    if (response?.assignments) {\n                        button.textContent = response.assignments.length.toString();\n                        button.classList.toggle('has-assignments', response.assignments.length > 0);\n\n                        const assignmentList = document.getElementById('assignmentList');\n                        const taskCount = document.getElementById('taskCount');\n                        \n                        if (assignmentList && taskCount) {\n                            updateAssignmentsList(response.assignments, assignmentList, taskCount);\n                        }\n                    }\n                } catch (error) {\n                    console.error('Error getting initial assignments:', error);\n                }\n            });\n        }\n    } catch (error) {\n        console.error('Error initializing button:', error);\n    }\n};\n","export enum LogLevel {\n    DEBUG = 0,\n    INFO = 1,\n    WARN = 2,\n    ERROR = 3\n}\n\ninterface LogEntry {\n    timestamp: string;\n    level: LogLevel;\n    message: string;\n    data?: any;\n    stack?: string;\n}\n\nexport class Logger {\n    private static readonly MAX_LOGS = 1000;\n    private static instances: Map<string, Logger> = new Map();\n    private context: string;\n    private currentLevel: LogLevel;\n\n    public constructor(context: string, level: LogLevel = LogLevel.INFO) {\n        this.context = context;\n        this.currentLevel = level;\n        this.cleanOldLogs();\n    }\n\n    public static getInstance(context: string, level: LogLevel = LogLevel.INFO): Logger {\n        const key = `${context}-${level}`;\n        if (!this.instances.has(key)) {\n            this.instances.set(key, new Logger(context, level));\n        }\n        return this.instances.get(key)!;\n    }\n\n    setLevel(level: LogLevel): void {\n        this.currentLevel = level;\n    }\n\n    debug(message: string, data?: any): void {\n        this.log(LogLevel.DEBUG, message, data);\n    }\n\n    info(message: string, data?: any): void {\n        this.log(LogLevel.INFO, message, data);\n    }\n\n    warn(message: string, data?: any): void {\n        this.log(LogLevel.WARN, message, data);\n    }\n\n    error(message: string, data?: any): void {\n        this.log(LogLevel.ERROR, message, data);\n    }\n\n    public async log(level: LogLevel, message: string, ...args: any[]): Promise<void> {\n        if (level >= this.currentLevel) {\n            const timestamp = new Date().toISOString();\n            const prefix = this.getLogPrefix(level);\n            const formattedMessage = `[${timestamp}] ${prefix} [${this.context}] ${message}`;\n\n            if (args.length) {\n                const formattedData = this.formatLogData(args);\n                console.log(formattedMessage, formattedData);\n            } else {\n                console.log(formattedMessage);\n            }\n\n            const entry: LogEntry = {\n                timestamp,\n                level,\n                message,\n                data: args,\n                stack: Error().stack\n            };\n\n            this.saveLogs(entry);\n\n            if (level === LogLevel.ERROR) {\n                this.notifyError(entry);\n            }\n        }\n    }\n\n    private getLogPrefix(level: LogLevel): string {\n        switch (level) {\n            case LogLevel.DEBUG:\n                return '🔍 DEBUG:';\n            case LogLevel.INFO:\n                return '📢 INFO:';\n            case LogLevel.WARN:\n                return '⚠️ WARN:';\n            case LogLevel.ERROR:\n                return '❌ ERROR:';\n            default:\n                return '📢';\n        }\n    }\n\n    private formatLogData(data: any): any {\n        try {\n            if (Array.isArray(data)) {\n                return data.map(item => this.formatLogData(item));\n            }\n\n            if (data && typeof data === 'object') {\n                // Check if it's an Error object\n                if (data instanceof Error) {\n                    return {\n                        name: data.name,\n                        message: data.message,\n                        stack: data.stack\n                    };\n                }\n\n                // Handle regular objects\n                const formatted: Record<string, any> = {};\n                for (const [key, value] of Object.entries(data)) {\n                    formatted[key] = this.formatLogData(value);\n                }\n                return formatted;\n            }\n\n            return data;\n        } catch (error) {\n            return '[Error formatting log data]';\n        }\n    }\n\n    private async saveLogs(entry: LogEntry): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        logs.push(entry);\n\n        if (logs.length > Logger.MAX_LOGS) {\n            logs.splice(0, logs.length - Logger.MAX_LOGS);\n        }\n\n        await chrome.storage.local.set({ logs });\n    }\n\n    private async cleanOldLogs(): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n        const filteredLogs = logs.filter((log: LogEntry) => \n            new Date(log.timestamp) > thirtyDaysAgo\n        );\n\n        await chrome.storage.local.set({ logs: filteredLogs });\n    }\n\n    private notifyError(entry: LogEntry): void {\n        chrome.notifications.create({\n            type: 'basic',\n            iconUrl: '/dist/icons/icon128.png',\n            title: 'CanvasPal Error',\n            message: entry.message,\n            priority: 2\n        });\n    }\n\n    async getLogs(level?: LogLevel): Promise<LogEntry[]> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        return level ? logs.filter((log: LogEntry) => log.level === level) : logs;\n    }\n}\n\nexport const logger = Logger.getInstance('default');\n","import { Logger } from './logger';\n\ninterface PerformanceMetric {\n    name: string;\n    startTime: number;\n    endTime?: number;\n    duration?: number;\n    metadata?: Record<string, any>;\n}\n\ninterface PerformanceReport {\n    metrics: PerformanceMetric[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: {\n            name: string;\n            duration: number;\n        };\n        fastestOperation: {\n            name: string;\n            duration: number;\n        };\n    };\n}\n\nexport class PerformanceMonitor {\n    private metrics: PerformanceMetric[] = [];\n    private logger: Logger;\n    private static instance: PerformanceMonitor;\n\n    private constructor() {\n        this.logger = new Logger('PerformanceMonitor');\n    }\n\n    public static getInstance(): PerformanceMonitor {\n        if (!PerformanceMonitor.instance) {\n            PerformanceMonitor.instance = new PerformanceMonitor();\n        }\n        return PerformanceMonitor.instance;\n    }\n\n    public startMetric(name: string, metadata?: Record<string, any>): string {\n        const id = `${name}_${Date.now()}`;\n        this.metrics.push({\n            name,\n            startTime: performance.now(),\n            metadata\n        });\n        return id;\n    }\n\n    public endMetric(name: string): void {\n        const metric = this.metrics.find(m => m.name === name && !m.endTime);\n        if (metric) {\n            metric.endTime = performance.now();\n            metric.duration = metric.endTime - metric.startTime;\n            this.logger.debug(`Performance metric - ${name}:`, {\n                duration: `${metric.duration.toFixed(2)}ms`,\n                metadata: metric.metadata\n            });\n        }\n    }\n\n    public getReport(): PerformanceReport {\n        const completedMetrics = this.metrics.filter(m => m.duration !== undefined);\n        \n        if (completedMetrics.length === 0) {\n            return {\n                metrics: [],\n                summary: {\n                    totalDuration: 0,\n                    averageDuration: 0,\n                    slowestOperation: { name: 'none', duration: 0 },\n                    fastestOperation: { name: 'none', duration: 0 }\n                }\n            };\n        }\n\n        const totalDuration = completedMetrics.reduce((sum, m) => sum + (m.duration || 0), 0);\n        const averageDuration = totalDuration / completedMetrics.length;\n\n        const sorted = [...completedMetrics].sort((a, b) => \n            (b.duration || 0) - (a.duration || 0));\n\n        return {\n            metrics: completedMetrics,\n            summary: {\n                totalDuration,\n                averageDuration,\n                slowestOperation: {\n                    name: sorted[0].name,\n                    duration: sorted[0].duration || 0\n                },\n                fastestOperation: {\n                    name: sorted[sorted.length - 1].name,\n                    duration: sorted[sorted.length - 1].duration || 0\n                }\n            }\n        };\n    }\n\n    public clear(): void {\n        this.metrics = [];\n    }\n\n    public monitorAsync<T>(name: string, fn: () => Promise<T>, metadata?: Record<string, any>): Promise<T> {\n        this.startMetric(name, metadata);\n        return fn().finally(() => this.endMetric(name));\n    }\n\n    public monitor<T>(name: string, fn: () => T, metadata?: Record<string, any>): T {\n        this.startMetric(name, metadata);\n        const result = fn();\n        this.endMetric(name);\n        return result;\n    }\n}","import { Assignment } from '../types/models';\nimport { Logger } from './logger';\nimport { PerformanceMonitor } from './performanceMonitor';\n\nexport class DebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n    private performanceMonitor: PerformanceMonitor;\n    private isVisible: boolean = false;\n    private debugManager: { isDebugEnabled(): boolean };\n\n    constructor(debugManager: { isDebugEnabled(): boolean }) {\n        this.logger = new Logger('DebugPanel');\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.debugManager = debugManager;\n        this.initializeKeyboardShortcut();\n    }\n\n    private createPanel(): void {\n        const initPanel = () => {\n            if (!document.body) {\n                // Wait for body to be available\n                requestAnimationFrame(initPanel);\n                return;\n            }\n\n            this.panel = document.createElement('div');\n            this.panel.id = 'canvaspal-debug-panel';\n            this.panel.innerHTML = `\n                <div class=\"debug-panel-header\">\n                    <span>🔍 CanvasPal Debug</span>\n                    <div class=\"debug-panel-controls\">\n                        <button id=\"clear-metrics\" title=\"Clear Performance Metrics\">🗑️</button>\n                        <button id=\"canvaspal-debug-close\">✕</button>\n                    </div>\n                </div>\n                <div class=\"debug-panel-content\">\n                    <div id=\"performance-metrics\"></div>\n                    <div id=\"assignment-info\"></div>\n                </div>\n            `;\n\n            // Apply styles\n            this.panel.style.cssText = `\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                width: 350px;\n                max-height: 500px;\n                background: rgba(0, 0, 0, 0.9);\n                color: white;\n                padding: 15px;\n                border-radius: 8px;\n                font-family: monospace;\n                font-size: 12px;\n                z-index: 9999;\n                overflow-y: auto;\n                box-shadow: 0 0 10px rgba(0,0,0,0.5);\n                display: none;\n            `;\n\n            // Add button styles\n            const style = document.createElement('style');\n            style.textContent = `\n                .debug-panel-header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: 10px;\n                    padding-bottom: 10px;\n                    border-bottom: 1px solid rgba(255,255,255,0.1);\n                }\n\n                .debug-panel-controls {\n                    display: flex;\n                    gap: 8px;\n                }\n\n                .debug-panel-controls button {\n                    background: none;\n                    border: none;\n                    color: white;\n                    cursor: pointer;\n                    padding: 4px;\n                    border-radius: 4px;\n                    transition: background 0.2s;\n                }\n\n                .debug-panel-controls button:hover {\n                    background: rgba(255,255,255,0.1);\n                }\n\n                .performance-section {\n                    margin: 10px 0;\n                    padding: 8px;\n                    background: rgba(255,255,255,0.05);\n                    border-radius: 4px;\n                }\n\n                .metric-item {\n                    margin: 4px 0;\n                    display: flex;\n                    justify-content: space-between;\n                }\n\n                .metric-value {\n                    color: #90EE90;\n                }\n\n                .slow-metric {\n                    color: #ff6b6b;\n                }\n\n                .normal-metric {\n                    color: #ffd700;\n                }\n\n                .fast-metric {\n                    color: #90EE90;\n                }\n            `;\n\n            // Wait for head to be available\n            if (document.head) {\n                document.head.appendChild(style);\n            } else {\n                document.addEventListener('DOMContentLoaded', () => {\n                    document.head.appendChild(style);\n                });\n            }\n\n            document.body.appendChild(this.panel);\n\n            // Add event listeners\n            document.getElementById('canvaspal-debug-close')?.addEventListener('click', () => {\n                this.toggleVisibility();\n            });\n\n            document.getElementById('clear-metrics')?.addEventListener('click', () => {\n                this.performanceMonitor.clear();\n                this.updatePerformanceMetrics();\n            });\n        };\n\n        // Start the initialization process\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', initPanel);\n        } else {\n            initPanel();\n        }\n    }\n\n    private initializeKeyboardShortcut(): void {\n        document.addEventListener('keydown', (e) => {\n            // Only respond to shortcuts if debug mode is enabled\n            if (this.debugManager.isDebugEnabled() && (e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'D') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        // Only allow showing the panel if debug mode is enabled\n        if (this.isVisible || this.debugManager.isDebugEnabled()) {\n            // Create panel if it doesn't exist and we're showing it\n            if (!this.panel && !this.isVisible) {\n                this.createPanel();\n            }\n            \n            if (this.panel) {\n                this.isVisible = !this.isVisible;\n                this.panel.style.display = this.isVisible ? 'block' : 'none';\n                \n                // Remove panel from DOM when hiding it\n                if (!this.isVisible && this.panel.parentNode) {\n                    this.panel.parentNode.removeChild(this.panel);\n                    this.panel = null;\n                }\n                \n                this.logger.debug(`Debug panel ${this.isVisible ? 'shown' : 'hidden'}`);\n            }\n        }\n    }\n\n    private updatePerformanceMetrics(): void {\n        const metricsContainer = document.getElementById('performance-metrics');\n        if (!metricsContainer) return;\n\n        const report = this.performanceMonitor.getReport();\n        \n        metricsContainer.innerHTML = `\n            <div class=\"performance-section\">\n                <h3>Performance Summary</h3>\n                <div class=\"metric-item\">\n                    <span>Total Duration:</span>\n                    <span class=\"metric-value\">${report.summary.totalDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Average Duration:</span>\n                    <span class=\"metric-value\">${report.summary.averageDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Slowest Operation:</span>\n                    <span class=\"slow-metric\">${report.summary.slowestOperation.name} (${report.summary.slowestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Fastest Operation:</span>\n                    <span class=\"fast-metric\">${report.summary.fastestOperation.name} (${report.summary.fastestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n            </div>\n            <div class=\"performance-section\">\n                <h3>Recent Operations</h3>\n                ${report.metrics.slice(-5).map(metric => `\n                    <div class=\"metric-item\">\n                        <span>${metric.name}</span>\n                        <span class=\"${this.getMetricSpeedClass(metric.duration || 0)}\">${metric.duration?.toFixed(2)}ms</span>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private getMetricSpeedClass(duration: number): string {\n        if (duration > 100) return 'slow-metric';\n        if (duration > 50) return 'normal-metric';\n        return 'fast-metric';\n    }\n\n    public updateAssignmentInfo(assignments: Assignment[]): void {\n        const container = document.getElementById('assignment-info');\n        if (!container) return;\n\n        const typeCounts = this.getAssignmentTypeCounts(assignments);\n        const priorityRanges = this.getPriorityRanges(assignments);\n\n        container.innerHTML = `\n            <div style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${assignments.length} assignments\n                </div>\n                ${this.renderTypeCounts(typeCounts)}\n                ${this.renderPriorityDistribution(priorityRanges)}\n            </div>\n            ${this.renderAssignmentList(assignments)}\n        `;\n\n        // Update performance metrics\n        this.updatePerformanceMetrics();\n    }\n\n    private getAssignmentTypeCounts(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            acc[assignment.type] = (acc[assignment.type] || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private getPriorityRanges(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            if (assignment.priorityScore >= 0.7) acc.high = (acc.high || 0) + 1;\n            else if (assignment.priorityScore >= 0.4) acc.medium = (acc.medium || 0) + 1;\n            else acc.low = (acc.low || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private renderTypeCounts(counts: Record<string, number>): string {\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Assignment Types:</div>\n                ${Object.entries(counts).map(([type, count]) => `\n                    <div style=\"margin-left: 10px; color: #90EE90;\">\n                        ${type}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderPriorityDistribution(ranges: Record<string, number>): string {\n        const colors = {\n            high: '#ff6b6b',\n            medium: '#ffd700',\n            low: '#90EE90'\n        };\n\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Priority Distribution:</div>\n                ${Object.entries(ranges).map(([range, count]) => `\n                    <div style=\"margin-left: 10px; color: ${colors[range as keyof typeof colors]};\">\n                        ${range}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentList(assignments: Assignment[]): string {\n        return `\n            <div style=\"margin-top: 15px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Detailed Assignments:</div>\n                ${assignments.map(assignment => this.renderAssignmentDetail(assignment)).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentDetail(assignment: Assignment): string {\n        const priorityColor = assignment.priorityScore >= 0.7 ? '#ff6b6b' :\n                            assignment.priorityScore >= 0.4 ? '#ffd700' : '#90EE90';\n\n        return `\n            <div style=\"margin: 8px 0; padding: 8px; border-left: 2px solid ${priorityColor}; background: rgba(255,255,255,0.1);\">\n                <div style=\"margin-bottom: 4px;\">📚 ${assignment.title}</div>\n                <div style=\"color: #90EE90; margin-bottom: 4px;\">\n                    ${assignment.points ? `📝 ${assignment.points}/${assignment.maxPoints} points` : 'No points data'}\n                </div>\n                <div style=\"color: #ADD8E6; font-size: 11px;\">\n                    ⏰ Due: ${this.formatDate(assignment.dueDate)}\n                </div>\n                <div style=\"color: #DDA0DD; font-size: 11px;\">\n                    📚 Course: ${assignment.course}\n                </div>\n                <div style=\"color: ${priorityColor}; font-size: 11px; margin-top: 4px;\">\n                    ⚡ Priority: ${Math.round(assignment.priorityScore * 100)}%\n                </div>\n            </div>\n        `;\n    }\n\n    public logDetectionEvent(message: string, data?: any): void {\n        this.logger.debug(message, data);\n        // Could add visual indication of new events in the panel\n    }\n\n    private formatDate(date: string): string {\n        // Handle special date strings\n        if (date === 'All Day' || date === 'No due date') {\n            return date;\n        }\n\n        // Extract date from \"Due: \" format if present\n        const dateStr = date.startsWith('Due: ') ? date.substring(5) : date;\n        \n        try {\n            const dateObj = new Date(dateStr);\n            // Check if date parsing was successful\n            if (!isNaN(dateObj.getTime())) {\n                return dateObj.toLocaleDateString('en-US', {\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric'\n                });\n            }\n            // Return original string if parsing fails\n            return date;\n        } catch {\n            // Return original string if parsing fails\n            return date;\n        }\n    }\n\n    public updatePerformanceAnalysis(analysis: any): void {\n        // Implementation\n    }\n}","import { Logger } from './logger';\n\ninterface DateDebugInfo {\n    totalDates: number;\n    types: {\n        due: number;\n        availability: number;\n        unlock: number;\n        unknown: number;\n    };\n    detections: {\n        element: string;\n        text: string;\n        type: string;\n        date: string;\n    }[];\n}\n\nexport class DateDebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n    private debugManager: { isDebugEnabled(): boolean };\n    private isVisible: boolean = false;\n\n    constructor(debugManager: { isDebugEnabled(): boolean }) {\n        this.logger = new Logger('DateDebugPanel');\n        this.debugManager = debugManager;\n        this.initializeKeyboardShortcut();\n    }\n\n    private initializeKeyboardShortcut(): void {\n        document.addEventListener('keydown', (e) => {\n            if (this.debugManager.isDebugEnabled() && (e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    private createPanel(): void {\n        if (!document.body) {\n            // Wait for body to be available\n            requestAnimationFrame(() => this.createPanel());\n            return;\n        }\n\n        this.panel = document.createElement('div');\n        this.panel.id = 'date-debug-panel';\n        this.panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            left: 20px;\n            width: 300px;\n            max-height: 400px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 9999;\n            overflow-y: auto;\n            box-shadow: 0 0 10px rgba(0,0,0,0.5);\n            display: none;\n        `;\n\n        const header = document.createElement('div');\n        header.innerHTML = `\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;\">\n                <span style=\"color: #ffd700; font-weight: bold;\">📅 Date Detection Debug</span>\n                <button id=\"date-debug-close\" style=\"background: none; border: none; color: white; cursor: pointer;\">✕</button>\n            </div>\n        `;\n        this.panel.appendChild(header);\n\n        const content = document.createElement('div');\n        content.id = 'date-debug-content';\n        this.panel.appendChild(content);\n\n        document.body.appendChild(this.panel);\n\n        document.getElementById('date-debug-close')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n    }\n\n    public toggleVisibility(): void {\n        // Only allow showing the panel if debug mode is enabled\n        if (this.isVisible || this.debugManager.isDebugEnabled()) {\n            // Create panel if it doesn't exist and we're showing it\n            if (!this.panel && !this.isVisible) {\n                this.createPanel();\n            }\n            \n            if (this.panel) {\n                this.isVisible = !this.isVisible;\n                this.panel.style.display = this.isVisible ? 'block' : 'none';\n                \n                // Remove panel from DOM when hiding it\n                if (!this.isVisible && this.panel.parentNode) {\n                    this.panel.parentNode.removeChild(this.panel);\n                    this.panel = null;\n                }\n                \n                this.logger.debug(`Date debug panel ${this.isVisible ? 'shown' : 'hidden'}`);\n            }\n        }\n    }\n\n    public updateDebugInfo(info: DateDebugInfo): void {\n        const content = document.getElementById('date-debug-content');\n        if (!content) return;\n\n        content.innerHTML = `\n            <div class=\"date-stats\" style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${info.totalDates} date${info.totalDates !== 1 ? 's' : ''}\n                </div>\n                ${this.renderTypeDistribution(info.types)}\n            </div>\n            <div class=\"date-detections\">\n                <div style=\"color: #ffd700; margin-bottom: 8px;\">Detected Dates:</div>\n                ${this.renderDetections(info.detections)}\n            </div>\n        `;\n    }\n\n    private renderTypeDistribution(types: DateDebugInfo['types']): string {\n        const colors = {\n            due: '#ff6b6b',\n            availability: '#4CAF50',\n            unlock: '#2196F3',\n            unknown: '#9e9e9e'\n        };\n\n        return Object.entries(types)\n            .map(([type, count]) => `\n                <div style=\"margin-left: 10px; color: ${colors[type as keyof typeof colors]};\">\n                    ${type.charAt(0).toUpperCase() + type.slice(1)}: ${count}\n                </div>\n            `).join('');\n    }\n\n    private renderDetections(detections: DateDebugInfo['detections']): string {\n        return detections\n            .map(detection => `\n                <div style=\"margin: 8px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px;\">\n                    <div style=\"margin-bottom: 4px; color: #90EE90;\">\n                        ${detection.text}\n                    </div>\n                    <div style=\"font-size: 11px; color: #ADD8E6;\">\n                        Type: ${detection.type}\n                    </div>\n                    <div style=\"font-size: 11px; color: #DDA0DD;\">\n                        Parsed: ${detection.date}\n                    </div>\n                    <div style=\"font-size: 11px; color: #FFB6C1;\">\n                        Element: ${detection.element}\n                    </div>\n                </div>\n            `).join('');\n    }\n\n    public logDateDetection(message: string, data?: any): void {\n        this.logger.debug(message, data);\n    }\n}","import { Logger } from './logger';\nimport { DateDebugPanel } from './dateDebugPanel';\n\ninterface DateMatch {\n    element: HTMLElement;\n    date: Date;\n    type: 'due' | 'availability' | 'unlock' | 'unknown';\n    text: string;\n}\n\nexport class DateDebugger {\n    private logger: Logger;\n    private debugPanel: DateDebugPanel;\n    private debugManager: { isDebugEnabled(): boolean };\n    private static readonly DATE_DEBUG_STYLES = `\n        .debug-date {\n            background-color: rgba(255, 255, 0, 0.3) !important;\n            border: 2px solid #ffd700 !important;\n            position: relative !important;\n            z-index: 1000;\n            padding: 2px !important;\n            margin: 2px !important;\n            border-radius: 3px !important;\n            display: inline-block !important;\n        }\n\n        .debug-date::after {\n            content: attr(data-debug-type);\n            position: absolute;\n            top: -20px;\n            left: 0;\n            background: #ffd700;\n            color: black;\n            font-size: 10px;\n            padding: 2px 4px;\n            border-radius: 2px;\n            z-index: 1001;\n            pointer-events: none;\n            white-space: nowrap;\n        }\n\n        .debug-date[data-debug-type=\"DUE DATE\"] {\n            border-color: #ff6b6b !important;\n        }\n\n        .debug-date[data-debug-type=\"DUE DATE\"]::after {\n            background: #ff6b6b;\n            color: white;\n        }\n\n        .debug-date[data-debug-type=\"AVAILABILITY\"] {\n            border-color: #4CAF50 !important;\n        }\n\n        .debug-date[data-debug-type=\"AVAILABILITY\"]::after {\n            background: #4CAF50;\n            color: white;\n        }\n\n        .debug-date[data-debug-type=\"UNLOCK\"] {\n            border-color: #2196F3 !important;\n        }\n\n        .debug-date[data-debug-type=\"UNLOCK\"]::after {\n            background: #2196F3;\n            color: white;\n        }\n    `;\n\n    constructor() {\n        // Create debug manager\n        this.debugManager = {\n            isDebugEnabled: () => true // Always enable debug for development\n        };\n\n        this.logger = new Logger('DateDebugger');\n        this.debugPanel = new DateDebugPanel(this.debugManager);\n        this.injectDebugStyles();\n    }\n\n    private injectDebugStyles(): void {\n        const styleElement = document.createElement('style');\n        styleElement.textContent = DateDebugger.DATE_DEBUG_STYLES;\n        document.head.appendChild(styleElement);\n    }\n\n    public highlightDates(): DateMatch[] {\n        const dateMatches: DateMatch[] = [];\n        \n        // Common date-containing elements\n        const dateElements = document.querySelectorAll<HTMLElement>(\n            '[class*=\"date\"], [class*=\"due\"], [class*=\"deadline\"], ' +\n            '[aria-label*=\"due\"], [title*=\"due\"], ' +\n            '[data-date], [datetime]'\n        );\n\n        dateElements.forEach(element => {\n            const match = this.processDateElement(element);\n            if (match) {\n                dateMatches.push(match);\n                this.applyDebugHighlight(match);\n            }\n        });\n\n        // Look for dates in text content\n        const textMatches = this.findDatesInTextNodes();\n        dateMatches.push(...textMatches);\n\n        // Update debug panel with results\n        this.updateDebugPanel(dateMatches);\n\n        this.logger.debug('Found dates:', dateMatches);\n        return dateMatches;\n    }\n\n    private findDatesInTextNodes(): DateMatch[] {\n        const matches: DateMatch[] = [];\n        const walker = document.createTreeWalker(\n            document.body,\n            NodeFilter.SHOW_TEXT,\n            {\n                acceptNode: (node) => {\n                    if (node.parentElement?.closest('.debug-date')) {\n                        return NodeFilter.FILTER_REJECT;\n                    }\n                    const hasDate = this.containsDatePattern(node.textContent || '');\n                    return hasDate ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n                }\n            }\n        );\n\n        let node: Text | null;\n        while (node = walker.nextNode() as Text) {\n            const textMatches = this.findDatesInText(node);\n            textMatches.forEach(match => {\n                matches.push(match);\n                this.applyDebugHighlight(match);\n            });\n        }\n\n        return matches;\n    }\n\n    private updateDebugPanel(matches: DateMatch[]): void {\n        const types = {\n            due: 0,\n            availability: 0,\n            unlock: 0,\n            unknown: 0\n        };\n\n        matches.forEach(match => {\n            types[match.type]++;\n        });\n\n        const debugInfo = {\n            totalDates: matches.length,\n            types,\n            detections: matches.map(match => ({\n                element: this.getElementDescription(match.element),\n                text: match.text,\n                type: this.getDebugLabel(match.type),\n                date: match.date.toLocaleString()\n            }))\n        };\n\n        this.debugPanel.updateDebugInfo(debugInfo);\n    }\n\n    private getElementDescription(element: HTMLElement): string {\n        const tagName = element.tagName.toLowerCase();\n        const id = element.id ? `#${element.id}` : '';\n        const classes = Array.from(element.classList)\n            .filter(cls => !cls.includes('debug-date'))\n            .map(cls => `.${cls}`)\n            .join('');\n        \n        return `${tagName}${id}${classes}`;\n    }\n\n    private processDateElement(element: HTMLElement): DateMatch | null {\n        const dateStr = element.getAttribute('data-date') ||\n                       element.getAttribute('datetime') ||\n                       element.getAttribute('title') ||\n                       element.getAttribute('aria-label') ||\n                       element.textContent;\n\n        if (!dateStr) return null;\n\n        const date = this.parseDate(dateStr);\n        if (!date) return null;\n\n        const type = this.determineDateType(element, dateStr);\n        \n        return {\n            element,\n            date,\n            type,\n            text: dateStr\n        };\n    }\n\n    private findDatesInText(node: Text): DateMatch[] {\n        const matches: DateMatch[] = [];\n        const text = node.textContent || '';\n        \n        // Common date patterns\n        const datePatterns = [\n            // ISO format\n            /\\d{4}-\\d{2}-\\d{2}/g,\n            // MM/DD/YYYY or DD/MM/YYYY\n            /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/g,\n            // Month DD, YYYY\n            /(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* \\d{1,2},? \\d{4}/gi,\n            // Tomorrow, Today, etc.\n            /\\b(?:today|tomorrow|yesterday)\\b/gi,\n            // Next/Last Day\n            /(?:next|last) (?:monday|tuesday|wednesday|thursday|friday|saturday|sunday)\\b/gi\n        ];\n\n        datePatterns.forEach(pattern => {\n            const regex = new RegExp(pattern);\n            let match;\n            while ((match = regex.exec(text)) !== null) {\n                const date = this.parseDate(match[0]);\n                if (date) {\n                    // Create a new span element to wrap the date text\n                    const span = document.createElement('span');\n                    node.splitText(match.index);\n                    const dateNode = node.splitText(match[0].length);\n                    span.textContent = match[0];\n                    node.parentNode?.replaceChild(span, node);\n\n                    matches.push({\n                        element: span,\n                        date,\n                        type: this.determineDateType(span, match[0]),\n                        text: match[0]\n                    });\n                }\n            }\n        });\n\n        return matches;\n    }\n\n    private parseDate(dateStr: string): Date | null {\n        try {\n            const normalized = dateStr.toLowerCase();\n            \n            // Handle relative dates\n            if (normalized.includes('today')) {\n                return new Date();\n            } else if (normalized.includes('tomorrow')) {\n                const tomorrow = new Date();\n                tomorrow.setDate(tomorrow.getDate() + 1);\n                return tomorrow;\n            } else if (normalized.includes('yesterday')) {\n                const yesterday = new Date();\n                yesterday.setDate(yesterday.getDate() - 1);\n                return yesterday;\n            }\n\n            // Try parsing as ISO date first\n            const date = new Date(dateStr);\n            if (!isNaN(date.getTime())) {\n                return date;\n            }\n\n            // Try other common formats\n            const formats = [\n                // Add more date formats as needed\n                /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/,\n                /(\\w+) (\\d{1,2}),? (\\d{4})/\n            ];\n\n            for (const format of formats) {\n                const match = dateStr.match(format);\n                if (match) {\n                    const parsed = new Date(dateStr);\n                    if (!isNaN(parsed.getTime())) {\n                        return parsed;\n                    }\n                }\n            }\n        } catch (error) {\n            this.logger.debug('Date parsing failed:', { dateStr, error });\n        }\n        return null;\n    }\n\n    private determineDateType(element: HTMLElement, text: string): DateMatch['type'] {\n        const context = (element.textContent + ' ' +\n                        (element.getAttribute('aria-label') || '') + ' ' +\n                        (element.getAttribute('title') || '')).toLowerCase();\n\n        if (context.includes('due') || context.includes('deadline')) {\n            return 'due';\n        } else if (context.includes('available') || context.includes('opens')) {\n            return 'availability';\n        } else if (context.includes('unlock') || context.includes('start')) {\n            return 'unlock';\n        }\n        return 'unknown';\n    }\n\n    private applyDebugHighlight(match: DateMatch): void {\n        const element = match.element;\n        element.classList.add('debug-date');\n        element.setAttribute('data-debug-type', this.getDebugLabel(match.type));\n        element.setAttribute('title', `Detected ${match.type} date: ${match.date.toLocaleDateString()}`);\n    }\n\n    private getDebugLabel(type: DateMatch['type']): string {\n        switch (type) {\n            case 'due': return 'DUE DATE';\n            case 'availability': return 'AVAILABILITY';\n            case 'unlock': return 'UNLOCK';\n            default: return 'DATE';\n        }\n    }\n\n    private containsDatePattern(text: string | null): boolean {\n        if (!text) return false;\n        return /\\d{4}-\\d{2}-\\d{2}|\\d{1,2}\\/\\d{1,2}\\/\\d{4}|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* \\d{1,2},? \\d{4}|\\b(?:today|tomorrow|yesterday)\\b|(?:next|last) (?:monday|tuesday|wednesday|thursday|friday|saturday|sunday)\\b/i.test(text);\n    }\n}","import { Assignment, AssignmentType, AssignmentDetails } from '../types/models';\nimport { Logger, LogLevel } from '../utils/logger';\nimport { DebugPanel } from './debugPanel';\nimport { DateDebugger } from './dateDebugger';\nimport { PerformanceMonitor } from './performanceMonitor';\n\nexport class AssignmentDetector {\n    private logger: Logger;\n    private debugPanel: DebugPanel;\n    private dateDebugger: DateDebugger;\n    private performanceMonitor: PerformanceMonitor;\n    private debugManager: { isDebugEnabled(): boolean };\n\n    constructor() {\n        // Create debug manager\n        this.debugManager = {\n            isDebugEnabled: () => true // Always enable debug for development\n        };\n\n        this.logger = new Logger('AssignmentDetector', LogLevel.INFO);\n        this.debugPanel = new DebugPanel(this.debugManager);\n        this.dateDebugger = new DateDebugger();\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n    }\n\n    public async detectAssignments(): Promise<Assignment[]> {\n        return this.performanceMonitor.monitorAsync('detectAssignments', async () => {\n            try {\n                this.debugPanel.logDetectionEvent('Starting assignment detection');\n                \n                // Monitor date detection\n                const dateMatches = await this.performanceMonitor.monitorAsync('dateDetection', \n                    async () => this.dateDebugger.highlightDates(),\n                    { totalElements: document.querySelectorAll('[class*=\"date\"]').length }\n                );\n\n                this.debugPanel.logDetectionEvent('Date detection complete', {\n                    totalDates: dateMatches.length,\n                    dueDates: dateMatches.filter(m => m.type === 'due').length,\n                    performance: this.performanceMonitor.getReport()\n                });\n\n                // Monitor API fetches in parallel\n                const [plannerItems, missingSubmissions, dashboardItems] = await Promise.all([\n                    this.performanceMonitor.monitorAsync('fetchPlannerItems', \n                        () => this.fetchPlannerItems()),\n                    this.performanceMonitor.monitorAsync('fetchMissingSubmissions', \n                        () => this.fetchMissingSubmissions()),\n                    this.performanceMonitor.monitorAsync('parseDashboardCards', \n                        () => this.parseDashboardCards())\n                ]);\n\n                const allAssignments = [...plannerItems, ...missingSubmissions, ...dashboardItems]\n                    .filter(assignment => this.isValidAssignment(assignment));\n\n                // Monitor date validation\n                await this.performanceMonitor.monitorAsync('validateDates', \n                    async () => this.validateAssignmentDates(allAssignments, dateMatches),\n                    { assignmentCount: allAssignments.length }\n                );\n\n                const performanceReport = this.performanceMonitor.getReport();\n                this.debugPanel.logDetectionEvent('Assignment detection complete', {\n                    totalAssignments: allAssignments.length,\n                    performance: performanceReport\n                });\n\n                return allAssignments;\n            } catch (error) {\n                this.logger.error('Error detecting assignments:', error);\n                return [];\n            }\n        });\n    }\n\n    private async validateAssignmentDates(assignments: Assignment[], dateMatches: any[]): Promise<void> {\n        return this.performanceMonitor.monitorAsync('validateAssignmentDates', async () => {\n            assignments.forEach(assignment => {\n                const matchingDateElements = dateMatches.filter(match => {\n                    try {\n                        const matchDate = new Date(match.date).getTime();\n                        const assignmentDate = new Date(assignment.dueDate).getTime();\n                        return Math.abs(matchDate - assignmentDate) < 24 * 60 * 60 * 1000;\n                    } catch {\n                        return false;\n                    }\n                });\n\n                if (matchingDateElements.length > 0) {\n                    this.debugPanel.logDetectionEvent('Date validation:', {\n                        assignment: assignment.title,\n                        dueDate: assignment.dueDate,\n                        matchingElements: matchingDateElements.length\n                    });\n                }\n            });\n        }, { assignmentCount: assignments.length, dateMatchCount: dateMatches.length });\n    }\n\n    private async fetchPlannerItems(): Promise<Assignment[]> {\n        try {\n            const response = await fetch('/api/v1/planner/items?per_page=50', {\n                headers: {\n                    'Accept': 'application/json+canvas-string-ids, application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                credentials: 'same-origin'\n            });\n\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            \n            const items = await response.json();\n            this.debugPanel.logDetectionEvent('Planner items retrieved:', items);\n\n            return items.map((item: any) => {\n                const assignment = this.convertPlannerItem(item);\n                if (assignment) {\n                    this.debugPanel.logDetectionEvent('Processed planner item:', {\n                        title: assignment.title,\n                        type: assignment.type,\n                        dueDate: assignment.dueDate\n                    });\n                }\n                return assignment;\n            }).filter((item: Assignment | null): item is Assignment => item !== null);\n        } catch (error) {\n            this.logger.error('Error fetching planner items:', error);\n            return [];\n        }\n    }\n\n    private async fetchMissingSubmissions(): Promise<Assignment[]> {\n        try {\n            const response = await fetch('/api/v1/users/self/missing_submissions?include[]=planner_overrides', {\n                headers: {\n                    'Accept': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                credentials: 'same-origin'\n            });\n\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            \n            const submissions = await response.json();\n            return submissions.map((submission: any) => this.convertMissingSubmission(submission))\n                .filter((item: Assignment | null) => item !== null) as Assignment[];\n        } catch (error) {\n            this.logger.error('Error fetching missing submissions:', error);\n            return [];\n        }\n    }\n\n    private async parseDashboardCards(): Promise<Assignment[]> {\n        try {\n            const response = await fetch('/api/v1/dashboard/dashboard_cards', {\n                headers: {\n                    'Accept': 'application/json+canvas-string-ids, application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                credentials: 'same-origin'\n            });\n\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            \n            const cards = await response.json();\n            this.debugPanel.logDetectionEvent('Dashboard cards retrieved:', cards);\n\n            const assignments: Assignment[] = [];\n            for (const card of cards) {\n                if (card.assignments) {\n                    const processed = card.assignments\n                        .map((assignment: any) => {\n                            const converted = this.convertDashboardAssignment(assignment, card);\n                            if (converted) {\n                                this.debugPanel.logDetectionEvent('Processed dashboard assignment:', {\n                                    title: converted.title,\n                                    type: converted.type,\n                                    course: converted.course\n                                });\n                            }\n                            return converted;\n                        })\n                        .filter((item: Assignment | null): item is Assignment => item !== null);\n                    assignments.push(...processed);\n                }\n            }\n\n            return assignments;\n        } catch (error) {\n            this.logger.error('Error parsing dashboard cards:', error);\n            return [];\n        }\n    }\n\n    private convertPlannerItem(item: any): Assignment | null {\n        if (!item.plannable || !item.plannable_type) return null;\n\n        const type = this.determineAssignmentType(item.plannable_type);\n        if (!type || !item.plannable_date) return null;\n\n        return {\n            id: item.plannable_id.toString(),\n            title: item.plannable?.title || item.plannable?.name || '',\n            dueDate: item.plannable_date,\n            course: item.context_name || '',\n            courseId: item.course_id?.toString(),\n            type,\n            points: item.plannable?.points_possible,\n            maxPoints: item.plannable?.points_possible,\n            completed: !!item.planner_override?.marked_complete,\n            priorityScore: 0, // Will be calculated later\n            url: item.html_url,\n            details: {\n                submissionType: item.plannable?.submission_types,\n                isCompleted: !!item.planner_override?.marked_complete,\n                isLocked: !!item.plannable?.locked_for_user,\n                description: item.plannable?.description\n            }\n        };\n    }\n\n    private convertMissingSubmission(submission: any): Assignment | null {\n        if (!submission.due_at) return null;\n\n        return {\n            id: submission.id.toString(),\n            title: submission.name || submission.assignment?.name || '',\n            dueDate: submission.due_at,\n            course: submission.course?.name || '',\n            courseId: submission.course_id?.toString(),\n            type: 'assignment',\n            points: submission.points_possible,\n            maxPoints: submission.points_possible,\n            completed: false,\n            priorityScore: 0,\n            url: submission.html_url,\n            details: {\n                isCompleted: false,\n                isLocked: false\n            }\n        };\n    }\n\n    private convertDashboardAssignment(assignment: any, card: any): Assignment | null {\n        if (!assignment.due_at) return null;\n\n        const type = this.determineAssignmentType(assignment.type);\n        \n        return {\n            id: assignment.id.toString(),\n            title: assignment.name || '',\n            dueDate: assignment.due_at,\n            course: card.shortName || '',\n            courseId: card.id?.toString(),\n            type,\n            points: assignment.points_possible,\n            maxPoints: assignment.points_possible,\n            completed: !!assignment.has_submitted_submissions,\n            priorityScore: 0,\n            url: assignment.html_url,\n            details: {\n                submissionType: assignment.submission_types,\n                isCompleted: !!assignment.has_submitted_submissions,\n                isLocked: !!assignment.locked_for_user,\n                description: assignment.description\n            }\n        };\n    }\n\n    private determineAssignmentType(type: string): AssignmentType {\n        switch (type.toLowerCase()) {\n            case 'quiz':\n            case 'quizzes/quiz':\n                return 'quiz';\n            case 'discussion_topic':\n                return 'discussion';\n            case 'announcement':\n                return 'announcement';\n            default:\n                return 'assignment';\n        }\n    }\n\n    private isValidAssignment(assignment: Assignment | null): assignment is Assignment {\n        return assignment !== null &&\n            !!assignment.title &&\n            !!assignment.dueDate &&\n            !!assignment.course;\n    }\n}","console.log('CanvasPal content script loaded');\n\nimport { initializeButton } from './canvasButton';\nimport { AssignmentDetector } from '../utils/assignmentDetector';\nimport { Assignment } from '../types/models';\n\n// Wait for both head and body to be available\nconst waitForElements = () => {\n    return new Promise<void>((resolve) => {\n        const checkElements = () => {\n            if (document.head && document.body) {\n                resolve();\n            } else {\n                requestAnimationFrame(checkElements);\n            }\n        };\n        checkElements();\n    });\n};\n\n// Initialize the extension\nconst initialize = async () => {\n    try {\n        console.log('Initializing CanvasPal extension');\n        await waitForElements();\n\n        // Initialize button and popup\n        initializeButton();\n\n        // Initialize assignment detector\n        const detector = new AssignmentDetector();\n\n        // Listen for messages\n        chrome.runtime.onMessage.addListener((message: { type: string; data: any }, sender, sendResponse) => {\n            console.log('Content script received message:', message);\n            try {\n                switch (message.type) {\n                    case 'REFRESH_ASSIGNMENTS':\n                        // Detect assignments and send to background\n                        console.log('Refreshing assignments');\n                        detector.detectAssignments().then(assignments => {\n                            console.log('Detected assignments:', assignments);\n                            chrome.runtime.sendMessage({\n                                type: 'DASHBOARD_DATA',\n                                data: [{\n                                    courseName: 'Current Course',\n                                    assignments: assignments.map(a => ({\n                                        name: a.title,\n                                        dueDate: a.dueDate,\n                                        type: a.type\n                                    }))\n                                }]\n                            });\n\n                            // Also send grade data\n                            chrome.runtime.sendMessage({\n                                type: 'GRADE_DATA',\n                                data: {\n                                    courseName: 'Current Course',\n                                    assignments: assignments.map(a => ({\n                                        name: a.title,\n                                        points: a.points,\n                                        pointsPossible: a.maxPoints,\n                                        weight: a.gradeWeight\n                                    }))\n                                }\n                            });\n                        }).catch(error => {\n                            console.error('Error detecting assignments:', error);\n                        });\n                        break;\n                }\n            } catch (error) {\n                console.error('Error processing message:', error);\n            }\n        });\n\n        // Initial assignment detection\n        if (document.querySelector('.ic-app')) {\n            console.log('Running initial assignment detection');\n            detector.detectAssignments().then(assignments => {\n                console.log('Initial assignments detected:', assignments);\n                chrome.runtime.sendMessage({\n                    type: 'DASHBOARD_DATA',\n                    data: [{\n                        courseName: 'Current Course',\n                        assignments: assignments.map(a => ({\n                            name: a.title,\n                            dueDate: a.dueDate,\n                            type: a.type\n                        }))\n                    }]\n                });\n\n                chrome.runtime.sendMessage({\n                    type: 'GRADE_DATA',\n                    data: {\n                        courseName: 'Current Course',\n                        assignments: assignments.map(a => ({\n                            name: a.title,\n                            points: a.points,\n                            pointsPossible: a.maxPoints,\n                            weight: a.gradeWeight\n                        }))\n                    }\n                });\n            }).catch(error => {\n                console.error('Error in initial assignment detection:', error);\n            });\n        }\n\n    } catch (error) {\n        console.error('Error initializing CanvasPal:', error);\n    }\n};\n\n// Start initialization when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n} else {\n    initialize();\n}\n"],"names":["updateAssignmentsList","assignments","assignmentList","taskCount","console","log","textContent","length","innerHTML","map","assignment","score","priorityScore","title","dueDate","courseName","points","join","error","LogLevel","Logger","context","level","INFO","this","currentLevel","cleanOldLogs","getInstance","key","instances","has","set","get","setLevel","debug","message","data","DEBUG","info","warn","WARN","ERROR","args","timestamp","Date","toISOString","formattedMessage","getLogPrefix","formattedData","formatLogData","entry","stack","Error","saveLogs","notifyError","Array","isArray","item","name","formatted","value","Object","entries","logs","chrome","storage","local","push","MAX_LOGS","splice","thirtyDaysAgo","setDate","getDate","filteredLogs","filter","notifications","create","type","iconUrl","priority","getLogs","Map","PerformanceMonitor","metrics","logger","instance","startMetric","metadata","id","now","startTime","performance","endMetric","metric","find","m","endTime","duration","toFixed","getReport","completedMetrics","undefined","summary","totalDuration","averageDuration","slowestOperation","fastestOperation","reduce","sum","sorted","sort","a","b","clear","monitorAsync","fn","finally","monitor","result","DebugPanel","constructor","debugManager","panel","isVisible","performanceMonitor","initializeKeyboardShortcut","createPanel","initPanel","document","body","requestAnimationFrame","createElement","style","cssText","head","appendChild","addEventListener","getElementById","toggleVisibility","updatePerformanceMetrics","readyState","e","isDebugEnabled","ctrlKey","metaKey","shiftKey","preventDefault","display","parentNode","removeChild","metricsContainer","report","slice","getMetricSpeedClass","updateAssignmentInfo","container","typeCounts","getAssignmentTypeCounts","priorityRanges","getPriorityRanges","renderTypeCounts","renderPriorityDistribution","renderAssignmentList","acc","high","medium","low","counts","count","ranges","colors","range","renderAssignmentDetail","priorityColor","maxPoints","formatDate","course","Math","round","logDetectionEvent","date","dateStr","startsWith","substring","dateObj","isNaN","getTime","toLocaleDateString","month","day","year","updatePerformanceAnalysis","analysis","DateDebugPanel","header","content","updateDebugInfo","totalDates","renderTypeDistribution","types","renderDetections","detections","due","availability","unlock","unknown","charAt","toUpperCase","detection","text","element","logDateDetection","DateDebugger","debugPanel","injectDebugStyles","styleElement","DATE_DEBUG_STYLES","highlightDates","dateMatches","querySelectorAll","forEach","match","processDateElement","applyDebugHighlight","textMatches","findDatesInTextNodes","updateDebugPanel","matches","walker","createTreeWalker","NodeFilter","SHOW_TEXT","acceptNode","node","parentElement","closest","FILTER_REJECT","containsDatePattern","FILTER_ACCEPT","nextNode","findDatesInText","debugInfo","getElementDescription","getDebugLabel","toLocaleString","tagName","toLowerCase","from","classList","cls","includes","getAttribute","parseDate","determineDateType","pattern","regex","RegExp","exec","span","splitText","index","replaceChild","normalized","tomorrow","yesterday","formats","format","parsed","add","setAttribute","test","AssignmentDetector","dateDebugger","detectAssignments","async","totalElements","dueDates","plannerItems","missingSubmissions","dashboardItems","Promise","all","fetchPlannerItems","fetchMissingSubmissions","parseDashboardCards","allAssignments","isValidAssignment","validateAssignmentDates","assignmentCount","performanceReport","totalAssignments","matchingDateElements","matchDate","assignmentDate","abs","matchingElements","dateMatchCount","response","fetch","headers","credentials","ok","status","items","json","convertPlannerItem","submission","convertMissingSubmission","cards","card","processed","converted","convertDashboardAssignment","plannable","plannable_type","determineAssignmentType","plannable_date","plannable_id","toString","context_name","courseId","course_id","points_possible","completed","planner_override","marked_complete","url","html_url","details","submissionType","submission_types","isCompleted","isLocked","locked_for_user","description","due_at","shortName","has_submitted_submissions","initialize","resolve","checkElements","isCanvasPage","window","location","href","elements","runtime","getURL","styleSheet","button","className","toggleContainer","popup","settingsButton","querySelector","settingsUrl","open","createElements","settings","displayOptions","showOutsideCanvas","checkbox","checked","toggle","target","contains","remove","onMessage","addListener","sendMessage","initializeButton","detector","sender","sendResponse","then","pointsPossible","weight","gradeWeight","catch"],"sourceRoot":""}