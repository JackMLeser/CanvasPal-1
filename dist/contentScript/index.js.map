{"version":3,"file":"contentScript/index.js","mappings":"yBAGAA,OAAOC,QAAQC,UAAUC,aAAY,CAACC,EAASC,EAAQC,KACnD,IACI,OAAQF,EAAQG,MACZ,IAAK,mBAEDC,QAAQC,IAAI,oBAAqBL,EAAQM,UACzCJ,EAAa,CAAEK,SAAS,IACxB,MAChB,IAAK,sBAEGC,SAASC,cAAc,0CACvB,IAAIC,EAER,IAAIC,EACJT,EAAa,CAAEK,SAAS,IACxB,MAGQ,QACIH,QAAQQ,KAAK,wBAAyBZ,EAAQG,MAC9CD,EAAa,CAAEW,MAAO,yB,CAEhC,MAAOA,GACLT,QAAQS,MAAM,0BAA2BA,GACzCX,EAAa,CAAEW,MAAO,kB,CAE1B,OAAO,CAAI,IAsBf,MAAaH,EACT,WAAAI,GACIC,KAAKC,YACT,CAEQ,UAAAA,GACJ,IACI,MAAMC,EAAOF,KAAKG,sBAClBtB,OAAOC,QAAQsB,YAAY,CAAEhB,KAAM,iBAAkBc,SAAQG,OAAMC,IAC/DjB,QAAQS,MAAM,iCAAkCQ,EAAI,G,CAE1D,MAAOA,GACLjB,QAAQS,MAAM,mCAAoCQ,GAClDzB,OAAOC,QAAQsB,YAAY,CACvBhB,KAAM,QACNU,MAAO,oCACRO,MAAMhB,QAAQS,M,CAEzB,CAEO,mBAAAK,GACH,IACI,MAAMI,EAAiC,GA2BvC,OAxBuBd,SAASe,iBAAiB,mBAElCC,SAAQC,IACnB,MAAMC,EAAaD,EAAQhB,cAAc,UAAUkB,aAAaC,QAAU,iBACpEC,EAA4C,GAG1BJ,EAAQF,iBAAiB,WACjCC,SAAQM,IACpB,MAAMC,EAAOD,EAAKrB,cAAc,cAAckB,aAAaC,QAAU,GAC/DzB,EAAO2B,EAAKrB,cAAc,eAAeuB,aAAa,UAAY,GAClEC,EAAUH,EAAKrB,cAAc,sBAAsBkB,aAAaC,QAAU,GAE5EG,GACAF,EAAYK,KAAK,CAAEH,OAAM5B,OAAM8B,W,IAInCJ,EAAYM,OAAS,GACrBb,EAAcY,KAAK,CAAER,aAAYG,e,IAIzCzB,QAAQC,IAAI,4BAA6BiB,GAClCA,C,CACT,MAAOD,GAEL,MADAjB,QAAQS,MAAM,gCAAiCQ,GACzCA,C,CAEd,EAGJ,MAAaV,EACT,WAAAG,GACIC,KAAKC,YACT,CAEQ,UAAAA,GACJ,GAAID,KAAKqB,eACL,IACI,MAAMnB,EAAOF,KAAKsB,kBAClBzC,OAAOC,QAAQsB,YAAY,CAAEhB,KAAM,aAAcc,SAAQG,OAAMC,IAC3DjB,QAAQS,MAAM,6BAA8BQ,EAAI,G,CAEtD,MAAOA,GACLjB,QAAQS,MAAM,+BAAgCQ,GAC9CzB,OAAOC,QAAQsB,YAAY,CACvBhB,KAAM,QACNU,MAAO,gCACRO,MAAMhB,QAAQS,M,CAG7B,CAEQ,YAAAuB,GACJ,MAAME,EAAY9B,SAASC,cAAc,iCAAiCkB,YACpEY,EAAiBC,OAAOC,SAASC,SAASC,SAAS,WACnDC,EAA+D,OAA9CpC,SAASqC,eAAe,kBACzCC,EAAgE,OAA9CtC,SAASC,cAAc,mBAE/C,SAAU6B,GAAWK,SAAS,UAAYJ,GAAkBK,GAAkBE,EAClF,CAEO,eAAAT,GACH,IACI,MAAMU,EAAuB,CACzB,gBACA,kBACA,eACA,eACA,iBACA,gCAGJ,IAAIrB,EAAa,GACjB,IAAK,MAAMsB,KAAYD,EAAsB,CACzC,MAAME,EAAUzC,SAASC,cAAcuC,GACvC,GAAIC,GAAStB,aAAaC,OAAQ,CAC9BF,EAAauB,EAAQtB,YAAYC,OACjC,K,EAIR,IAAKF,EAAY,CACb,MAAMwB,EAAa1C,SAASC,cAAc,yBAEtCiB,EADAwB,GAAYvB,YACCuB,EAAWvB,YAAYC,OAEvBpB,SAAS2C,MAAMC,MAAM,KAAK,GAAGxB,M,CAIlD,MAAMC,EAAwC,GA2B9C,OA1BuBrB,SAASe,iBAAiB,2CAElCC,SAAQ6B,IACnB,MAAMC,EAAgB,CAAC,WAAY,SAAU,oBAC7C,IAAIvB,EAAO,GACX,IAAK,MAAMiB,KAAYM,EAAe,CAClC,MAAML,EAAUI,EAAI5C,cAAcuC,GAClC,GAAIC,GAAStB,aAAaC,OAAQ,CAC9BG,EAAOkB,EAAQtB,YAAYC,OAC3B,K,EAIR,MAAM2B,EAAYF,EAAI5C,cAAc,mBAAmBkB,YACjD6B,EAAeH,EAAI5C,cAAc,oCAAoCkB,YACrE8B,EAAaJ,EAAI5C,cAAc,6CAA6CkB,YAE5E+B,EAAuB,MAAdH,GAAmC,iBAAdA,EAA+B,EAAIxC,KAAK4C,YAAYJ,GAClFK,EAAkC,sBAAjBJ,EAAuC,EAAIzC,KAAK4C,YAAYH,GAC7EK,EAASJ,EAAa1C,KAAK4C,YAAYF,EAAWK,QAAQ,IAAK,UAAOC,EAExEhC,GACAF,EAAYK,KAAK,CAAEH,OAAM2B,SAAQE,iBAAgBC,U,IAIlD,CAAEnC,aAAYG,c,CACvB,MAAOR,GAEL,MADAjB,QAAQS,MAAM,4BAA6BQ,GACrCA,C,CAEd,CAEQ,WAAAsC,CAAYK,GAChB,IAAKA,GAAmB,MAAVA,GAA2B,iBAAVA,GAAsC,sBAAVA,EAA+B,OAAO,EACjG,MAAMC,EAAMC,WAAWF,EAAMF,QAAQ,WAAY,KACjD,OAAOK,MAAMF,GAAO,EAAIA,CAC5B,EAIJ,MA8BMG,EAAqB,KAElB5D,SAASC,cAAc,aAKxBD,SAASC,cAAc,0CACvB,IAAIC,EAER,IAAIC,EAAkB,EAIpBK,EAAa,KA3CfpB,OAAOC,QAAQC,UAAUC,aAAY,CAACC,EAASC,EAAQC,KACnD,IAGI,OAFAE,QAAQC,IAAI,mCAAoCL,GAExCA,EAAQG,MACZ,IAAK,mBACDC,QAAQC,IAAI,oBAAqBL,EAAQM,UACzCJ,EAAa,CAAEK,SAAS,IACxB,MAEJ,IAAK,sBACDH,QAAQC,IAAI,0BACZ+D,IACAlE,EAAa,CAAEK,SAAS,IACxB,MAEJ,QACIH,QAAQQ,KAAK,wBAAyBZ,EAAQG,MAC9CD,EAAa,CAAEW,MAAO,yB,CAEhC,MAAOA,GACLT,QAAQS,MAAM,0BAA2BA,GACzCX,EAAa,CAAEW,MAAO,kB,CAE1B,OAAO,CAAI,IAuBa,YAAxBL,SAAS6D,WACT7D,SAAS8D,iBAAiB,oBAAoB,KAC1CF,IAEAxE,OAAOC,QAAQsB,YAAY,CAAEhB,KAAM,yBAC9BiB,OAAMP,GAAST,QAAQS,MAAM,gCAAiCA,IAAO,KAG9EuD,IAEAxE,OAAOC,QAAQsB,YAAY,CAAEhB,KAAM,yBAC9BiB,OAAMP,GAAST,QAAQS,MAAM,gCAAiCA,K,EAK/C,YAAxBL,SAAS6D,WACT7D,SAAS8D,iBAAiB,mBAAoBtD,GAE9CA,G","sources":["webpack://canvaspal/./src/contentScript/index.ts"],"sourcesContent":["import { Assignment } from '../types/models';\n\n// Listen for messages from the background script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    try {\n        switch (message.type) {\n            case 'SETTINGS_UPDATED':\n                // Handle settings update\n                console.log('Settings updated:', message.settings);\n                sendResponse({ success: true });\n                break;\ncase 'REFRESH_ASSIGNMENTS':\n    // Re-run scrapers\n    if (document.querySelector('.ic-Dashboard-header, .context_module')) {\n        new DashboardScraper();\n    }\n    new GradeDataScraper();\n    sendResponse({ success: true });\n    break;\n                break;\n\n            default:\n                console.warn('Unknown message type:', message.type);\n                sendResponse({ error: 'Unknown message type' });\n        }\n    } catch (error) {\n        console.error('Error handling message:', error);\n        sendResponse({ error: 'Internal error' });\n    }\n    return true; // Keep the message channel open for async response\n});\n\nexport interface GradeData {\n    courseName: string;\n    assignments: {\n        name: string;\n        points: number;\n        pointsPossible: number;\n        weight?: number;\n    }[];\n}\n\nexport interface DashboardData {\n    courseName: string;\n    assignments: {\n        name: string;\n        dueDate: string;\n        type: string;\n    }[];\n}\n\nexport class DashboardScraper {\n    constructor() {\n        this.initialize();\n    }\n\n    private initialize() {\n        try {\n            const data = this.scrapeDashboardData();\n            chrome.runtime.sendMessage({ type: 'DASHBOARD_DATA', data }).catch(err => {\n                console.error('Failed to send dashboard data:', err);\n            });\n        } catch (err) {\n            console.error('Failed to scrape dashboard data:', err);\n            chrome.runtime.sendMessage({\n                type: 'ERROR',\n                error: 'Failed to scrape dashboard data'\n            }).catch(console.error);\n        }\n    }\n\n    public scrapeDashboardData(): DashboardData[] {\n        try {\n            const dashboardData: DashboardData[] = [];\n            \n            // Find all course sections\n            const courseSections = document.querySelectorAll('.context_module');\n            \n            courseSections.forEach(section => {\n                const courseName = section.querySelector('.name')?.textContent?.trim() || 'Unknown Course';\n                const assignments: DashboardData['assignments'] = [];\n\n                // Find all assignment items in this section\n                const assignmentItems = section.querySelectorAll('.ig-row');\n                assignmentItems.forEach(item => {\n                    const name = item.querySelector('.ig-title')?.textContent?.trim() || '';\n                    const type = item.querySelector('.type_icon')?.getAttribute('title') || '';\n                    const dueDate = item.querySelector('.due_date_display')?.textContent?.trim() || '';\n\n                    if (name) {\n                        assignments.push({ name, type, dueDate });\n                    }\n                });\n\n                if (assignments.length > 0) {\n                    dashboardData.push({ courseName, assignments });\n                }\n            });\n\n            console.log('Extracted dashboard data:', dashboardData);\n            return dashboardData;\n        } catch (err) {\n            console.error('Error in scrapeDashboardData:', err);\n            throw err;\n        }\n    }\n}\n\nexport class GradeDataScraper {\n    constructor() {\n        this.initialize();\n    }\n\n    private initialize() {\n        if (this.isGradesPage()) {\n            try {\n                const data = this.scrapeGradeData();\n                chrome.runtime.sendMessage({ type: 'GRADE_DATA', data }).catch(err => {\n                    console.error('Failed to send grade data:', err);\n                });\n            } catch (err) {\n                console.error('Failed to scrape grade data:', err);\n                chrome.runtime.sendMessage({ \n                    type: 'ERROR', \n                    error: 'Failed to scrape grade data' \n                }).catch(console.error);\n            }\n        }\n    }\n\n    private isGradesPage(): boolean {\n        const pageTitle = document.querySelector('h1.ic-Action-header__Heading')?.textContent;\n        const hasGradesInUrl = window.location.pathname.includes('/grades');\n        const hasGradesTable = document.getElementById('grades_summary') !== null;\n        const hasGradesHeader = document.querySelector('.student_grades') !== null;\n\n        return !!(pageTitle?.includes('Grade') || hasGradesInUrl || hasGradesTable || hasGradesHeader);\n    }\n\n    public scrapeGradeData(): GradeData {\n        try {\n            const courseTitleSelectors = [\n                '.course-title',\n                'h2.course-title',\n                '.course_name',\n                '#course_name',\n                '.context_title',\n                'h1.ic-Action-header__Heading'\n            ];\n\n            let courseName = '';\n            for (const selector of courseTitleSelectors) {\n                const element = document.querySelector(selector);\n                if (element?.textContent?.trim()) {\n                    courseName = element.textContent.trim();\n                    break;\n                }\n            }\n\n            if (!courseName) {\n                const breadcrumb = document.querySelector('.ic-app-crumbs__title');\n                if (breadcrumb?.textContent) {\n                    courseName = breadcrumb.textContent.trim();\n                } else {\n                    courseName = document.title.split(':')[0].trim();\n                }\n            }\n\n            const assignments: GradeData['assignments'] = [];\n            const assignmentRows = document.querySelectorAll('.student_assignment, .assignment_graded');\n\n            assignmentRows.forEach(row => {\n                const nameSelectors = ['.title a', '.title', '.assignment_name'];\n                let name = '';\n                for (const selector of nameSelectors) {\n                    const element = row.querySelector(selector);\n                    if (element?.textContent?.trim()) {\n                        name = element.textContent.trim();\n                        break;\n                    }\n                }\n\n                const gradeText = row.querySelector('.grade, .score')?.textContent;\n                const possibleText = row.querySelector('.points_possible, .total-points')?.textContent;\n                const weightText = row.querySelector('.assignment_group .group_weight, .weight')?.textContent;\n            \n                const points = gradeText === '-' || gradeText === 'not a number' ? 0 : this.parseNumber(gradeText);\n                const pointsPossible = possibleText === 'also not a number' ? 0 : this.parseNumber(possibleText);\n                const weight = weightText ? this.parseNumber(weightText.replace('%', '')) : undefined;\n            \n                if (name) {\n                    assignments.push({ name, points, pointsPossible, weight });\n                }\n            });\n            \n            return { courseName, assignments };\n        } catch (err) {\n            console.error('Error in scrapeGradeData:', err);\n            throw err;\n        }\n    }\n\n    private parseNumber(value: string | null | undefined): number {\n        if (!value || value === '-' || value === 'not a number' || value === 'also not a number') return 0;\n        const num = parseFloat(value.replace(/[^\\d.-]/g, ''));\n        return isNaN(num) ? 0 : num;\n    }\n}\n\n// Initialize message handling\nconst setupMessageHandling = () => {\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        try {\n            console.log('Content script received message:', message);\n            \n            switch (message.type) {\n                case 'SETTINGS_UPDATED':\n                    console.log('Settings updated:', message.settings);\n                    sendResponse({ success: true });\n                    break;\n\n                case 'REFRESH_ASSIGNMENTS':\n                    console.log('Refreshing assignments');\n                    initializeScrapers();\n                    sendResponse({ success: true });\n                    break;\n\n                default:\n                    console.warn('Unknown message type:', message.type);\n                    sendResponse({ error: 'Unknown message type' });\n            }\n        } catch (error) {\n            console.error('Error handling message:', error);\n            sendResponse({ error: 'Internal error' });\n        }\n        return true; // Keep the message channel open for async response\n    });\n};\n\n// Initialize scrapers\nconst initializeScrapers = () => {\n    // Check if we're on a Canvas page\n    if (!document.querySelector('.ic-app')) {\n        return;\n    }\n\n    // Initialize scrapers based on page type\n    if (document.querySelector('.ic-Dashboard-header, .context_module')) {\n        new DashboardScraper();\n    }\n    new GradeDataScraper();\n};\n\n// Main initialization\nconst initialize = () => {\n    setupMessageHandling();\n    \n    // Wait for DOM to be ready before initializing scrapers\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => {\n            initializeScrapers();\n            // Notify background script after initialization\n            chrome.runtime.sendMessage({ type: 'CONTENT_SCRIPT_READY' })\n                .catch(error => console.error('Failed to send ready message:', error));\n        });\n    } else {\n        initializeScrapers();\n        // Notify background script after initialization\n        chrome.runtime.sendMessage({ type: 'CONTENT_SCRIPT_READY' })\n            .catch(error => console.error('Failed to send ready message:', error));\n    }\n};\n\n// Run initialization when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n} else {\n    initialize();\n}\n"],"names":["chrome","runtime","onMessage","addListener","message","sender","sendResponse","type","console","log","settings","success","document","querySelector","DashboardScraper","GradeDataScraper","warn","error","constructor","this","initialize","data","scrapeDashboardData","sendMessage","catch","err","dashboardData","querySelectorAll","forEach","section","courseName","textContent","trim","assignments","item","name","getAttribute","dueDate","push","length","isGradesPage","scrapeGradeData","pageTitle","hasGradesInUrl","window","location","pathname","includes","hasGradesTable","getElementById","hasGradesHeader","courseTitleSelectors","selector","element","breadcrumb","title","split","row","nameSelectors","gradeText","possibleText","weightText","points","parseNumber","pointsPossible","weight","replace","undefined","value","num","parseFloat","isNaN","initializeScrapers","readyState","addEventListener"],"sourceRoot":""}