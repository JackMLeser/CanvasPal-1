{"version":3,"file":"contentScript/index.js","mappings":"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","sources":["webpack://canvaspal/./src/contentScript/canvasButton.ts","webpack://canvaspal/./src/contentScript/scrapers.ts","webpack://canvaspal/./src/contentScript/index.ts"],"sourcesContent":["// Create and inject the button and popup HTML\nconst createElements = async () => {\n    try {\n        console.log('Creating CanvasPal elements');\n        \n        // Ensure we have access to chrome APIs\n        if (!chrome?.runtime) {\n            throw new Error('Chrome APIs not available');\n        }\n\n        // Get icon URL\n        const iconUrl = chrome.runtime.getURL('icons/icon128.png');\n        console.log('Icon URL:', iconUrl);\n\n        // Create and inject styles\n        const styleSheet = document.createElement('style');\n        styleSheet.textContent = `\n            .canvas-pal-button {\n                position: fixed;\n                right: 20px;\n                top: 20px;\n                width: 44px;\n                height: 44px;\n                border-radius: 50%;\n                background: #0066CC;\n                color: white;\n                border: none;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                z-index: 2147483647;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                backdrop-filter: blur(8px);\n            }\n\n            .canvas-pal-button:hover {\n                transform: translateY(-2px);\n                background: #0056b3;\n                box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);\n            }\n\n            .canvas-pal-button.has-assignments {\n                animation: canvas-pal-pulse 2s infinite;\n            }\n\n            @keyframes canvas-pal-pulse {\n                0% { transform: scale(1); }\n                50% { transform: scale(1.05); }\n                100% { transform: scale(1); }\n            }\n\n            .canvas-pal-toggle {\n                position: fixed;\n                top: 20px;\n                right: 70px;\n                z-index: 2147483647;\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                background: rgba(255, 255, 255, 0.9);\n                padding: 6px 12px;\n                border-radius: 20px;\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n                font-family: 'Lato', sans-serif;\n                font-size: 12px;\n            }\n\n            .canvas-pal-toggle input {\n                margin: 0;\n                cursor: pointer;\n            }\n\n            .popup-container {\n                position: fixed;\n                right: 20px;\n                top: 75px;\n                width: 350px;\n                min-height: 400px;\n                background: #f9f9f9;\n                border: 2px solid #000;\n                z-index: 2147483646;\n                display: none;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .popup-container.show {\n                display: block;\n            }\n\n            .popup-header {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                background-color: #0066CC;\n                color: white;\n                padding: 12px;\n                position: relative;\n                border-bottom: 1px solid #666;\n                margin-bottom: 16px;\n            }\n\n            .popup-title {\n                flex-grow: 1;\n                text-align: center;\n                margin: 0;\n                font-size: 2.3em;\n                color: #FFFFFF;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .task-count {\n                position: absolute;\n                bottom: 8px;\n                left: 9px;\n                font-size: .7em;\n                color: #FFFFFF;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .logo {\n                margin-left: 16px;\n                display: flex;\n                align-items: center;\n            }\n\n            .logo img {\n                width: 50px;\n                height: 50px;\n                border-radius: 20%;\n                border: 3px solid #FFFFFF;\n                padding: 0;\n                background: white;\n                object-fit: contain;\n            }\n\n            .assignments-list {\n                max-height: 300px;\n                overflow-y: auto;\n                padding: 16px;\n            }\n\n            .assignment-item {\n                padding: 12px;\n                border: 1px solid #eee;\n                margin-bottom: 8px;\n                border-radius: 4px;\n                background: white;\n            }\n\n            .assignment-item.high-priority {\n                border-left: 4px solid #d92b2b;\n            }\n\n            .assignment-item.medium-priority {\n                border-left: 4px solid #f0ad4e;\n            }\n\n            .assignment-item.low-priority {\n                border-left: 4px solid #5cb85c;\n            }\n\n            .settings-button {\n                bottom: 16px;\n                right: 16px;\n                position: absolute;\n                text-align: center;\n            }\n\n            .settings-button button {\n                background-color: #0066CC;\n                color: white;\n                padding: 10px 20px;\n                border-radius: 8px;\n                border: none;\n                transition: background-color 0.3s, transform 0.3s;\n                font-family: 'Lato', sans-serif;\n                cursor: pointer;\n                font-size: 14px;\n                font-weight: 500;\n            }\n\n            .settings-button button:hover {\n                background-color: #0056b3;\n                transform: scale(1.08);\n            }\n\n            @media (prefers-color-scheme: dark) {\n                .popup-container {\n                    background: #1c1c1e;\n                    border-color: #666;\n                }\n\n                .assignment-item {\n                    background: #2c2c2e;\n                    border-color: #666;\n                    color: white;\n                }\n\n                .logo img {\n                    background: transparent;\n                }\n\n                .canvas-pal-toggle {\n                    background: rgba(45, 59, 69, 0.9);\n                    color: white;\n                }\n            }\n        `;\n        document.head.appendChild(styleSheet);\n\n        // Create button\n        const button = document.createElement('button');\n        button.className = 'canvas-pal-button';\n        button.textContent = '0';\n        document.body.appendChild(button);\n\n        // Create toggle for non-Canvas pages\n        const toggleContainer = document.createElement('div');\n        toggleContainer.className = 'canvas-pal-toggle';\n        toggleContainer.innerHTML = `\n            <label>\n                <input type=\"checkbox\" id=\"canvas-pal-visibility\" checked>\n                <span>Follow Outside Canvas</span>\n            </label>\n        `;\n        document.body.appendChild(toggleContainer);\n\n        // Create popup container\n        const popup = document.createElement('div');\n        popup.className = 'popup-container';\n        popup.innerHTML = `\n            <div class=\"popup-header\">\n                <div class=\"popup-title\">CanvasPAL</div>\n                <div class=\"task-count\" id=\"taskCount\">0 Tasks</div>\n                <div class=\"logo\">\n                    <img src=\"${iconUrl}\" alt=\"CanvasPAL Logo\" />\n                </div>\n            </div>\n            <div class=\"assignments-list\" id=\"assignmentList\">\n                <!-- Assignments will be populated here -->\n            </div>\n            <div class=\"settings-button\">\n                <button id=\"settings-button\">Settings</button>\n            </div>\n        `;\n        document.body.appendChild(popup);\n\n        // Add settings button click handler\n        const settingsButton = popup.querySelector('#settings-button');\n        if (settingsButton) {\n            settingsButton.addEventListener('click', () => {\n                console.log('Settings button clicked');\n                try {\n                    const settingsUrl = chrome.runtime.getURL('settings/settings.html');\n                    console.log('Opening settings at:', settingsUrl);\n                    window.open(settingsUrl, '_blank');\n                } catch (error) {\n                    console.error('Error opening settings:', error);\n                }\n            });\n        }\n\n        return { button, toggleContainer, popup };\n    } catch (error) {\n        console.error('Error creating elements:', error);\n        return null;\n    }\n};\n\n// Helper function to determine priority class\nfunction getPriorityClass(score: number): string {\n    if (score >= 0.7) return 'high-priority';\n    if (score >= 0.4) return 'medium-priority';\n    return 'low-priority';\n}\n\n// Helper function to safely update assignments list\nfunction updateAssignmentsList(assignments: any[], assignmentList: HTMLElement, taskCount: HTMLElement) {\n    try {\n        console.log('Updating assignments list:', assignments);\n        taskCount.textContent = `${assignments.length} Tasks`;\n        assignmentList.innerHTML = assignments.map(assignment => `\n            <div class=\"assignment-item ${getPriorityClass(assignment.priorityScore)}\">\n                <div style=\"font-weight: bold;\">${assignment.title}</div>\n                <div>Due: ${assignment.dueDate}</div>\n                <div>Course: ${assignment.courseName}</div>\n                <div>Points: ${assignment.points}</div>\n            </div>\n        `).join('');\n    } catch (error) {\n        console.error('Error updating assignments list:', error);\n    }\n}\n\n// Initialize button and popup functionality\nexport const initializeButton = async () => {\n    try {\n        console.log('Initializing CanvasPal button');\n        const isCanvasPage = window.location.href.includes('.instructure.com');\n        const elements = await createElements();\n        \n        if (!elements) {\n            console.error('Failed to create elements');\n            return;\n        }\n\n        const { button, toggleContainer, popup } = elements;\n\n        // Show/hide toggle based on page type\n        toggleContainer.style.display = isCanvasPage ? 'flex' : 'none';\n\n        // Initialize visibility from settings\n        if (chrome?.storage?.local) {\n            chrome.storage.local.get('settings', (data) => {\n                try {\n                    const settings = data.settings || { displayOptions: { showOutsideCanvas: true } };\n                    const showOutsideCanvas = settings.displayOptions?.showOutsideCanvas ?? true;\n                    \n                    // Update checkbox state\n                    const checkbox = document.getElementById('canvas-pal-visibility') as HTMLInputElement;\n                    if (checkbox) {\n                        checkbox.checked = showOutsideCanvas;\n                    }\n\n                    // Update button visibility\n                    if (!isCanvasPage) {\n                        button.style.display = showOutsideCanvas ? 'flex' : 'none';\n                    }\n                } catch (error) {\n                    console.error('Error handling settings:', error);\n                }\n            });\n        }\n\n        // Handle button click\n        button.addEventListener('click', () => {\n            popup.classList.toggle('show');\n        });\n\n        // Handle toggle change\n        const checkbox = document.getElementById('canvas-pal-visibility');\n        checkbox?.addEventListener('change', (e) => {\n            const target = e.target as HTMLInputElement;\n            if (chrome?.storage?.local) {\n                chrome.storage.local.get('settings', (data) => {\n                    try {\n                        const settings = data.settings || { displayOptions: {} };\n                        if (!settings.displayOptions) settings.displayOptions = {};\n                        settings.displayOptions.showOutsideCanvas = target.checked;\n                        chrome.storage.local.set({ settings });\n                        \n                        // Update button visibility\n                        if (!isCanvasPage) {\n                            button.style.display = target.checked ? 'flex' : 'none';\n                        }\n                    } catch (error) {\n                        console.error('Error updating settings:', error);\n                    }\n                });\n            }\n        });\n\n        // Close popup when clicking outside\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            if (!popup.contains(target) && !button.contains(target)) {\n                popup.classList.remove('show');\n            }\n        });\n\n        // Handle assignment updates\n        if (chrome?.runtime) {\n            chrome.runtime.onMessage.addListener((message) => {\n                try {\n                    console.log('Received message:', message);\n                    if (message.type === 'ASSIGNMENTS_UPDATE') {\n                        button.textContent = message.data.length.toString();\n                        button.classList.toggle('has-assignments', message.data.length > 0);\n\n                        const assignmentList = document.getElementById('assignmentList');\n                        const taskCount = document.getElementById('taskCount');\n                        \n                        if (assignmentList && taskCount) {\n                            updateAssignmentsList(message.data, assignmentList, taskCount);\n                        }\n                    } else if (message.type === 'REFRESH_ASSIGNMENTS') {\n                        // Request fresh assignments from the background script\n                        chrome.runtime.sendMessage({ type: 'GET_ASSIGNMENTS' });\n                    }\n                } catch (error) {\n                    console.error('Error handling message:', error);\n                }\n            });\n\n            // Get initial assignments\n            console.log('Requesting initial assignments');\n            chrome.runtime.sendMessage({ type: 'GET_ASSIGNMENTS' }, (response) => {\n                try {\n                    console.log('Received initial assignments:', response);\n                    if (response?.assignments) {\n                        button.textContent = response.assignments.length.toString();\n                        button.classList.toggle('has-assignments', response.assignments.length > 0);\n\n                        const assignmentList = document.getElementById('assignmentList');\n                        const taskCount = document.getElementById('taskCount');\n                        \n                        if (assignmentList && taskCount) {\n                            updateAssignmentsList(response.assignments, assignmentList, taskCount);\n                        }\n                    }\n                } catch (error) {\n                    console.error('Error getting initial assignments:', error);\n                }\n            });\n        }\n    } catch (error) {\n        console.error('Error initializing button:', error);\n    }\n};\n","export interface GradeData {\n    courseName: string;\n    assignments: {\n        name: string;\n        points: number;\n        pointsPossible: number;\n        weight?: number;\n    }[];\n}\n\nexport interface DashboardData {\n    courseName: string;\n    assignments: {\n        name: string;\n        dueDate: string;\n        type: string;\n    }[];\n}\n\nexport class DashboardScraper {\n    constructor() {\n        this.initialize();\n    }\n\n    private initialize() {\n        try {\n            console.log('Initializing DashboardScraper');\n            const data = this.scrapeDashboardData();\n            console.log('Scraped dashboard data:', data);\n            chrome.runtime.sendMessage({ type: 'DASHBOARD_DATA', data }).catch(err => {\n                console.error('Failed to send dashboard data:', err);\n            });\n        } catch (err) {\n            console.error('Failed to scrape dashboard data:', err);\n        }\n    }\n\n    public scrapeDashboardData(): DashboardData[] {\n        try {\n            console.log('Starting dashboard data scraping');\n            const dashboardData: DashboardData[] = [];\n            const courseAssignments: { [courseName: string]: DashboardData['assignments'] } = {};\n            \n            // Find all planner items\n            const plannerItems = document.querySelectorAll('.PlannerItem, .planner-item');\n            console.log('Found planner items:', plannerItems.length);\n\n            plannerItems.forEach(item => {\n                // Get course name\n                const courseElement = item.querySelector('.course-title, .planner-course-title, [data-testid=\"course-name\"]');\n                const courseName = courseElement?.textContent?.trim() || 'Unknown Course';\n                \n                // Get assignment details\n                const assignmentElement = item.querySelector('.PlannerItem-details, .planner-item-details');\n                if (assignmentElement) {\n                    const nameElement = item.querySelector('.PlannerItem-title, .planner-item-title, [data-testid=\"assignment-title\"]');\n                    const name = nameElement?.textContent?.trim() || '';\n                    \n                    const typeElement = item.querySelector('.PlannerItem-type, .planner-item-type, [data-testid=\"assignment-type\"]');\n                    const type = typeElement?.textContent?.trim() || 'assignment';\n                    \n                    // Get due date\n                    const dueDateElement = item.querySelector('.PlannerItem-time, .planner-item-time, [data-testid=\"due-date\"]');\n                    let dueDate = '';\n                    \n                    // Parse the due date\n                    if (item.querySelector('.PlannerItem-time-all-day, .planner-item-time-all-day')) {\n                        dueDate = 'All Day';\n                    } else {\n                        const dueDateText = dueDateElement?.textContent?.trim() || '';\n                        if (dueDateText) {\n                            dueDate = dueDateText;\n                        } else {\n                            dueDate = 'No due date';\n                        }\n                    }\n\n                    console.log('Found assignment:', { courseName, name, type, dueDate });\n\n                    if (name) {\n                        if (!courseAssignments[courseName]) {\n                            courseAssignments[courseName] = [];\n                        }\n                        courseAssignments[courseName].push({\n                            name,\n                            type,\n                            dueDate: dueDate\n                        });\n                    }\n                }\n            });\n\n            // Convert to DashboardData array\n            Object.entries(courseAssignments).forEach(([courseName, assignments]) => {\n                if (assignments.length > 0) {\n                    dashboardData.push({ courseName, assignments });\n                }\n            });\n\n            console.log('Final dashboard data:', dashboardData);\n            return dashboardData;\n        } catch (err) {\n            console.error('Error in scrapeDashboardData:', err);\n            throw err;\n        }\n    }\n}\n\nexport class GradeDataScraper {\n    constructor() {\n        this.initialize();\n    }\n\n    private initialize() {\n        if (this.isGradesPage()) {\n            try {\n                console.log('Initializing GradeDataScraper');\n                const data = this.scrapeGradeData();\n                console.log('Scraped grade data:', data);\n                chrome.runtime.sendMessage({ type: 'GRADE_DATA', data }).catch(err => {\n                    console.error('Failed to send grade data:', err);\n                });\n            } catch (err) {\n                console.error('Failed to scrape grade data:', err);\n            }\n        }\n    }\n\n    private isGradesPage(): boolean {\n        const pageTitle = document.querySelector('h1.ic-Action-header__Heading')?.textContent;\n        const hasGradesInUrl = window.location.pathname.includes('/grades');\n        const hasGradesTable = document.getElementById('grades_summary') !== null;\n        const hasGradesHeader = document.querySelector('.student_grades') !== null;\n\n        const isGrades = !!(pageTitle?.includes('Grade') || hasGradesInUrl || hasGradesTable || hasGradesHeader);\n        console.log('Is grades page:', isGrades);\n        return isGrades;\n    }\n\n    public scrapeGradeData(): GradeData {\n        try {\n            console.log('Starting grade data scraping');\n            const courseTitleSelectors = [\n                '.course-title',\n                'h2.course-title',\n                '.course_name',\n                '#course_name',\n                '.context_title',\n                'h1.ic-Action-header__Heading'\n            ];\n\n            let courseName = '';\n            for (const selector of courseTitleSelectors) {\n                const element = document.querySelector(selector);\n                if (element?.textContent?.trim()) {\n                    courseName = element.textContent.trim();\n                    break;\n                }\n            }\n\n            if (!courseName) {\n                const breadcrumb = document.querySelector('.ic-app-crumbs__title');\n                if (breadcrumb?.textContent) {\n                    courseName = breadcrumb.textContent.trim();\n                } else {\n                    courseName = document.title.split(':')[0].trim();\n                }\n            }\n\n            console.log('Found course name:', courseName);\n\n            const assignments: GradeData['assignments'] = [];\n            const assignmentRows = document.querySelectorAll('.student_assignment, .assignment_graded, [data-testid=\"assignment-row\"]');\n            console.log('Found assignment rows:', assignmentRows.length);\n\n            assignmentRows.forEach(row => {\n                const nameSelectors = ['.title a', '.title', '.assignment_name', '[data-testid=\"assignment-name\"]'];\n                let name = '';\n                for (const selector of nameSelectors) {\n                    const element = row.querySelector(selector);\n                    if (element?.textContent?.trim()) {\n                        name = element.textContent.trim();\n                        break;\n                    }\n                }\n\n                const gradeText = row.querySelector('.grade, .score, [data-testid=\"grade-display\"]')?.textContent;\n                const possibleText = row.querySelector('.points_possible, .total-points, [data-testid=\"points-possible\"]')?.textContent;\n                const weightText = row.querySelector('.assignment_group .group_weight, .weight, [data-testid=\"group-weight\"]')?.textContent;\n            \n                const points = gradeText === '-' || gradeText === 'not a number' ? 0 : this.parseNumber(gradeText);\n                const pointsPossible = possibleText === 'also not a number' ? 0 : this.parseNumber(possibleText);\n                const weight = weightText ? this.parseNumber(weightText.replace('%', '')) : undefined;\n            \n                if (name) {\n                    console.log('Found assignment:', { name, points, pointsPossible, weight });\n                    assignments.push({ name, points, pointsPossible, weight });\n                }\n            });\n            \n            const result = { courseName, assignments };\n            console.log('Final grade data:', result);\n            return result;\n        } catch (err) {\n            console.error('Error in scrapeGradeData:', err);\n            throw err;\n        }\n    }\n\n    private parseNumber(value: string | null | undefined): number {\n        if (!value || value === '-' || value === 'not a number' || value === 'also not a number') return 0;\n        const num = parseFloat(value.replace(/[^\\d.-]/g, ''));\n        return isNaN(num) ? 0 : num;\n    }\n}\n\n// Initialize scrapers\nexport const initializeScrapers = () => {\n    console.log('Initializing scrapers');\n    // Check if we're on a Canvas page\n    if (!document.querySelector('.ic-app')) {\n        console.log('Not on a Canvas page');\n        return;\n    }\n\n    // Initialize scrapers based on page type\n    const isDashboard = document.querySelector('.dashboard-planner, .planner-container, .PlannerApp');\n    const isGradesPage = document.querySelector('.student_grades, .gradebook-content, #grades_summary');\n\n    console.log('Page type:', { isDashboard, isGradesPage });\n\n    if (isDashboard) {\n        console.log('Initializing dashboard scraper');\n        new DashboardScraper();\n    }\n    if (isGradesPage) {\n        console.log('Initializing grades scraper');\n        new GradeDataScraper();\n    }\n};","console.log('CanvasPal content script loaded');\n\nimport { initializeButton } from './canvasButton';\nimport { initializeScrapers, DashboardScraper, GradeDataScraper, DashboardData, GradeData } from './scrapers';\n\ninterface Assignment {\n    title: string;\n    dueDate: string;\n    courseName: string;\n    type: string;\n    points: number;\n    maxPoints?: number;\n    weight?: number;\n    priorityScore: number;\n}\n\n// Wait for both head and body to be available\nconst waitForElements = () => {\n    return new Promise<void>((resolve) => {\n        const checkElements = () => {\n            if (document.head && document.body) {\n                resolve();\n            } else {\n                requestAnimationFrame(checkElements);\n            }\n        };\n        checkElements();\n    });\n};\n\n// Process scraped data and send to background\nconst processScrapedData = (dashboardData: DashboardData[] | null, gradeData: GradeData | null) => {\n    console.log('Processing scraped data:', { dashboardData, gradeData });\n    \n    const assignments: Assignment[] = [];\n\n    // Process dashboard assignments\n    if (dashboardData) {\n        for (const course of dashboardData) {\n            for (const assignment of course.assignments) {\n                assignments.push({\n                    title: assignment.name,\n                    dueDate: assignment.dueDate,\n                    courseName: course.courseName,\n                    type: assignment.type,\n                    points: 0, // Will be updated with grade data\n                    priorityScore: 0.5 // Default score\n                });\n            }\n        }\n    }\n\n    // Update assignments with grade data\n    if (gradeData) {\n        const gradeMap = new Map<string, {\n            points: number;\n            pointsPossible: number;\n            weight?: number;\n        }>();\n\n        gradeData.assignments.forEach(assignment => {\n            gradeMap.set(assignment.name, {\n                points: assignment.points,\n                pointsPossible: assignment.pointsPossible,\n                weight: assignment.weight\n            });\n        });\n\n        assignments.forEach(assignment => {\n            const gradeInfo = gradeMap.get(assignment.title);\n            if (gradeInfo) {\n                assignment.points = gradeInfo.points;\n                assignment.maxPoints = gradeInfo.pointsPossible;\n                assignment.weight = gradeInfo.weight;\n            }\n        });\n    }\n\n    console.log('Processed assignments:', assignments);\n\n    // Send assignments to background script\n    if (assignments.length > 0) {\n        console.log('Sending assignments to background script');\n        chrome.runtime.sendMessage({\n            type: 'ASSIGNMENTS_UPDATE',\n            data: assignments\n        }, (response) => {\n            console.log('Background script response:', response);\n        });\n    } else {\n        console.log('No assignments to send');\n    }\n};\n\n// Initialize the extension\nconst initialize = async () => {\n    try {\n        console.log('Initializing CanvasPal extension');\n        await waitForElements();\n\n        // Initialize button and popup\n        initializeButton();\n\n        // Initialize scrapers\n        console.log('Initializing scrapers');\n        initializeScrapers();\n\n        // Listen for scraped data\n        chrome.runtime.onMessage.addListener((message: { type: string; data: any }, sender, sendResponse) => {\n            console.log('Received message:', message);\n            try {\n                if (message.type === 'DASHBOARD_DATA' || message.type === 'GRADE_DATA') {\n                    const dashboardData = message.type === 'DASHBOARD_DATA' ? message.data as DashboardData[] : null;\n                    const gradeData = message.type === 'GRADE_DATA' ? message.data as GradeData : null;\n                    processScrapedData(dashboardData, gradeData);\n                }\n            } catch (error) {\n                console.error('Error processing scraped data:', error);\n            }\n        });\n\n        // Set up periodic refresh\n        setInterval(() => {\n            console.log('Running periodic refresh');\n            if (document.querySelector('.ic-app')) {\n                const isDashboard = document.querySelector('.dashboard-planner, .planner-container');\n                const isGradesPage = document.querySelector('.student_grades, .gradebook-content');\n\n                if (isDashboard) {\n                    console.log('Refreshing dashboard data');\n                    new DashboardScraper();\n                }\n                if (isGradesPage) {\n                    console.log('Refreshing grades data');\n                    new GradeDataScraper();\n                }\n            }\n        }, 60000); // Refresh every minute\n\n        // Initial scrape\n        if (document.querySelector('.ic-app')) {\n            console.log('Running initial scrape');\n            const isDashboard = document.querySelector('.dashboard-planner, .planner-container');\n            const isGradesPage = document.querySelector('.student_grades, .gradebook-content');\n\n            if (isDashboard) {\n                console.log('Initial dashboard scrape');\n                new DashboardScraper();\n            }\n            if (isGradesPage) {\n                console.log('Initial grades scrape');\n                new GradeDataScraper();\n            }\n        }\n\n    } catch (error) {\n        console.error('Error initializing CanvasPal:', error);\n    }\n};\n\n// Start initialization when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n} else {\n    initialize();\n}\n"],"names":["updateAssignmentsList","assignments","assignmentList","taskCount","console","log","textContent","length","innerHTML","map","assignment","score","priorityScore","title","dueDate","courseName","points","join","error","DashboardScraper","constructor","this","initialize","data","scrapeDashboardData","chrome","runtime","sendMessage","type","catch","err","dashboardData","courseAssignments","plannerItems","document","querySelectorAll","forEach","item","courseElement","querySelector","trim","nameElement","name","typeElement","dueDateElement","push","Object","entries","GradeDataScraper","isGradesPage","scrapeGradeData","pageTitle","hasGradesInUrl","window","location","pathname","includes","hasGradesTable","getElementById","hasGradesHeader","isGrades","courseTitleSelectors","selector","element","breadcrumb","split","assignmentRows","row","nameSelectors","gradeText","possibleText","weightText","parseNumber","pointsPossible","weight","replace","undefined","result","value","num","parseFloat","isNaN","async","Promise","resolve","checkElements","head","body","requestAnimationFrame","isCanvasPage","href","elements","Error","iconUrl","getURL","styleSheet","createElement","appendChild","button","className","toggleContainer","popup","settingsButton","addEventListener","settingsUrl","open","createElements","style","display","storage","local","get","settings","displayOptions","showOutsideCanvas","checkbox","checked","classList","toggle","e","target","set","contains","remove","onMessage","addListener","message","toString","response","initializeButton","isDashboard","initializeScrapers","sender","sendResponse","gradeData","course","gradeMap","Map","gradeInfo","maxPoints","processScrapedData","setInterval","readyState"],"sourceRoot":""}