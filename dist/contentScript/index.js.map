{"version":3,"file":"contentScript/index.js","mappings":"mBAqBO,MAAMA,EACT,WAAAC,GACIC,KAAKC,YACT,CAEQ,UAAAA,GACJ,IACI,MAAMC,EAAOF,KAAKG,sBAClBC,OAAOC,QAAQC,YAAY,CAAEC,KAAM,iBAAkBL,SAAQM,OAAMC,IAC/DC,QAAQC,MAAM,iCAAkCF,EAAI,G,CAE1D,MAAOA,GACLC,QAAQC,MAAM,mCAAoCF,GAClDL,OAAOC,QAAQC,YAAY,CACvBC,KAAM,QACNI,MAAO,oCACRH,MAAME,QAAQC,M,CAEzB,CAEO,mBAAAR,GACH,IACI,MAAMS,EAAiC,GA2BvC,OAxBuBC,SAASC,iBAAiB,mBAElCC,SAAQC,IACnB,MAAMC,EAAaD,EAAQE,cAAc,UAAUC,aAAaC,QAAU,iBACpEC,EAA4C,GAG1BL,EAAQF,iBAAiB,WACjCC,SAAQO,IACpB,MAAMC,EAAOD,EAAKJ,cAAc,cAAcC,aAAaC,QAAU,GAC/Db,EAAOe,EAAKJ,cAAc,eAAeM,aAAa,UAAY,GAClEC,EAAUH,EAAKJ,cAAc,sBAAsBC,aAAaC,QAAU,GAE5EG,GACAF,EAAYK,KAAK,CAAEH,OAAMhB,OAAMkB,W,IAInCJ,EAAYM,OAAS,GACrBf,EAAcc,KAAK,CAAET,aAAYI,e,IAIzCX,QAAQkB,IAAI,4BAA6BhB,GAClCA,C,CACT,MAAOH,GAEL,MADAC,QAAQC,MAAM,gCAAiCF,GACzCA,C,CAEd,EAGG,MAAMoB,EACT,WAAA9B,GACIC,KAAKC,YACT,CAEQ,UAAAA,GACJ,GAAID,KAAK8B,eACL,IACI,MAAM5B,EAAOF,KAAK+B,kBAClB3B,OAAOC,QAAQC,YAAY,CAAEC,KAAM,aAAcL,SAAQM,OAAMC,IAC3DC,QAAQC,MAAM,6BAA8BF,EAAI,G,CAEtD,MAAOA,GACLC,QAAQC,MAAM,+BAAgCF,GAC9CL,OAAOC,QAAQC,YAAY,CACvBC,KAAM,QACNI,MAAO,gCACRH,MAAME,QAAQC,M,CAG7B,CAEQ,YAAAmB,GACJ,MAAME,EAAYnB,SAASK,cAAc,iCAAiCC,YACpEc,EAAiBC,OAAOC,SAASC,SAASC,SAAS,WACnDC,EAA+D,OAA9CzB,SAAS0B,eAAe,kBACzCC,EAAgE,OAA9C3B,SAASK,cAAc,mBAE/C,SAAUc,GAAWK,SAAS,UAAYJ,GAAkBK,GAAkBE,EAClF,CAEO,eAAAT,GACH,IACI,MAAMU,EAAuB,CACzB,gBACA,kBACA,eACA,eACA,iBACA,gCAGJ,IAAIxB,EAAa,GACjB,IAAK,MAAMyB,KAAYD,EAAsB,CACzC,MAAME,EAAU9B,SAASK,cAAcwB,GACvC,GAAIC,GAASxB,aAAaC,OAAQ,CAC9BH,EAAa0B,EAAQxB,YAAYC,OACjC,K,EAIR,IAAKH,EAAY,CACb,MAAM2B,EAAa/B,SAASK,cAAc,yBAEtCD,EADA2B,GAAYzB,YACCyB,EAAWzB,YAAYC,OAEvBP,SAASgC,MAAMC,MAAM,KAAK,GAAG1B,M,CAIlD,MAAMC,EAAwC,GA2B9C,OA1BuBR,SAASC,iBAAiB,2CAElCC,SAAQgC,IACnB,MAAMC,EAAgB,CAAC,WAAY,SAAU,oBAC7C,IAAIzB,EAAO,GACX,IAAK,MAAMmB,KAAYM,EAAe,CAClC,MAAML,EAAUI,EAAI7B,cAAcwB,GAClC,GAAIC,GAASxB,aAAaC,OAAQ,CAC9BG,EAAOoB,EAAQxB,YAAYC,OAC3B,K,EAIR,MAAM6B,EAAYF,EAAI7B,cAAc,mBAAmBC,YACjD+B,EAAeH,EAAI7B,cAAc,oCAAoCC,YACrEgC,EAAaJ,EAAI7B,cAAc,6CAA6CC,YAE5EiC,EAAuB,MAAdH,GAAmC,iBAAdA,EAA+B,EAAIjD,KAAKqD,YAAYJ,GAClFK,EAAkC,sBAAjBJ,EAAuC,EAAIlD,KAAKqD,YAAYH,GAC7EK,EAASJ,EAAanD,KAAKqD,YAAYF,EAAWK,QAAQ,IAAK,UAAOC,EAExElC,GACAF,EAAYK,KAAK,CAAEH,OAAM6B,SAAQE,iBAAgBC,U,IAIlD,CAAEtC,aAAYI,c,CACvB,MAAOZ,GAEL,MADAC,QAAQC,MAAM,4BAA6BF,GACrCA,C,CAEd,CAEQ,WAAA4C,CAAYK,GAChB,IAAKA,GAAmB,MAAVA,GAA2B,iBAAVA,GAAsC,sBAAVA,EAA+B,OAAO,EACjG,MAAMC,EAAMC,WAAWF,EAAMF,QAAQ,WAAY,KACjD,OAAOK,MAAMF,GAAO,EAAIA,CAC5B,EAIJ,MAAMG,EAAqB,KAElBjD,SAASK,cAAc,aAKxBL,SAASK,cAAc,0CACvB,IAAIpB,EAER,IAAI+B,EAAkB,EAI1BzB,OAAOC,QAAQ0D,UAAUC,aAAY,CAACC,EAASC,EAAQC,KACnD,IAGI,OAFAzD,QAAQkB,IAAI,mCAAoCqC,GAExCA,EAAQ1D,MACZ,IAAK,mBAcD,OAbAG,QAAQkB,IAAI,oBAAqBqC,EAAQG,UAEzChE,OAAOiE,QAAQC,MAAMC,IAAI,CAAEH,SAAUH,EAAQG,WACxCI,MAAK,KACF9D,QAAQkB,IAAI,mCAEZkC,IACAK,EAAa,CAAEM,SAAS,GAAO,IAElCjE,OAAMG,IACHD,QAAQC,MAAM,2BAA4BA,GAC1CwD,EAAa,CAAEM,SAAS,EAAO9D,MAAOA,EAAMsD,SAAU,KAEvD,EAEX,IAAK,sBACDvD,QAAQkB,IAAI,0BACZkC,IACAK,EAAa,CAAEM,SAAS,IACxB,MAEJ,IAAK,gBAcD,OAZAC,MAAMT,EAAQU,IAAKV,EAAQW,SACtBJ,MAAKK,MAAMC,IACR,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAM,uBAAuBF,EAASG,UAEpD,MAAM/E,QAAa4E,EAASI,OAC5Bf,EAAa,CAAEM,SAAS,EAAMvE,QAAO,IAExCM,OAAMG,IACHD,QAAQC,MAAM,eAAgBA,GAC9BwD,EAAa,CAAEM,SAAS,EAAO9D,MAAOA,EAAMsD,SAAU,KAEvD,EAEX,IAAK,sBACDvD,QAAQkB,IAAI,uBAAwBqC,EAAQ5C,aAE5C8C,EAAa,CAAEM,SAAS,IACxB,MAEJ,QACI/D,QAAQyE,KAAK,wBAAyBlB,EAAQ1D,MAC9C4D,EAAa,CAAExD,MAAO,yB,CAEhC,MAAOA,GACLD,QAAQC,MAAM,0BAA2BA,GACzCwD,EAAa,CAAExD,MAAO,kB,CAE1B,OAAO,CAAI,IAkDfyE,YA9CmBP,UACf,MAAMQ,EAAyBR,MAAOS,EAAU,EAAGC,EAAa,KAC5D,IAII,aAFMnF,OAAOC,QAAQC,YAAY,CAAEC,KAAM,SACzCG,QAAQkB,IAAI,+BACL,C,CACT,MAAOjB,GACL,OAAI2E,EAAUC,GACV7E,QAAQkB,IAAI,6CAA6C0D,EAAU,YAC7D,IAAIE,SAAQC,GAAWL,WAAWK,EAAS,OAC1CJ,EAAuBC,EAAU,EAAGC,KAE/C7E,QAAQC,MAAM,kDACP,E,GAIf,IAGI,UADgC0E,IAE5B,MAAM,IAAIL,MAAM,yCAId5E,OAAOC,QAAQC,YAAY,CAAEC,KAAM,yBACzCG,QAAQkB,IAAI,qCAGZ,MAAM8D,EAAe,KACjB5B,IACApD,QAAQkB,IAAI,uBAAuB,EAGX,YAAxBf,SAAS8E,WACT9E,SAAS+E,iBAAiB,mBAAoBF,GAE9CA,G,CAEN,MAAO/E,GACLD,QAAQC,MAAM,uCAAwCA,E,IAKvC,I","sources":["webpack://canvaspal/./src/contentScript/index.ts"],"sourcesContent":["import { Assignment } from '../types/models';\n\nexport interface GradeData {\n    courseName: string;\n    assignments: {\n        name: string;\n        points: number;\n        pointsPossible: number;\n        weight?: number;\n    }[];\n}\n\nexport interface DashboardData {\n    courseName: string;\n    assignments: {\n        name: string;\n        dueDate: string;\n        type: string;\n    }[];\n}\n\nexport class DashboardScraper {\n    constructor() {\n        this.initialize();\n    }\n\n    private initialize() {\n        try {\n            const data = this.scrapeDashboardData();\n            chrome.runtime.sendMessage({ type: 'DASHBOARD_DATA', data }).catch(err => {\n                console.error('Failed to send dashboard data:', err);\n            });\n        } catch (err) {\n            console.error('Failed to scrape dashboard data:', err);\n            chrome.runtime.sendMessage({\n                type: 'ERROR',\n                error: 'Failed to scrape dashboard data'\n            }).catch(console.error);\n        }\n    }\n\n    public scrapeDashboardData(): DashboardData[] {\n        try {\n            const dashboardData: DashboardData[] = [];\n            \n            // Find all course sections\n            const courseSections = document.querySelectorAll('.context_module');\n            \n            courseSections.forEach(section => {\n                const courseName = section.querySelector('.name')?.textContent?.trim() || 'Unknown Course';\n                const assignments: DashboardData['assignments'] = [];\n\n                // Find all assignment items in this section\n                const assignmentItems = section.querySelectorAll('.ig-row');\n                assignmentItems.forEach(item => {\n                    const name = item.querySelector('.ig-title')?.textContent?.trim() || '';\n                    const type = item.querySelector('.type_icon')?.getAttribute('title') || '';\n                    const dueDate = item.querySelector('.due_date_display')?.textContent?.trim() || '';\n\n                    if (name) {\n                        assignments.push({ name, type, dueDate });\n                    }\n                });\n\n                if (assignments.length > 0) {\n                    dashboardData.push({ courseName, assignments });\n                }\n            });\n\n            console.log('Extracted dashboard data:', dashboardData);\n            return dashboardData;\n        } catch (err) {\n            console.error('Error in scrapeDashboardData:', err);\n            throw err;\n        }\n    }\n}\n\nexport class GradeDataScraper {\n    constructor() {\n        this.initialize();\n    }\n\n    private initialize() {\n        if (this.isGradesPage()) {\n            try {\n                const data = this.scrapeGradeData();\n                chrome.runtime.sendMessage({ type: 'GRADE_DATA', data }).catch(err => {\n                    console.error('Failed to send grade data:', err);\n                });\n            } catch (err) {\n                console.error('Failed to scrape grade data:', err);\n                chrome.runtime.sendMessage({ \n                    type: 'ERROR', \n                    error: 'Failed to scrape grade data' \n                }).catch(console.error);\n            }\n        }\n    }\n\n    private isGradesPage(): boolean {\n        const pageTitle = document.querySelector('h1.ic-Action-header__Heading')?.textContent;\n        const hasGradesInUrl = window.location.pathname.includes('/grades');\n        const hasGradesTable = document.getElementById('grades_summary') !== null;\n        const hasGradesHeader = document.querySelector('.student_grades') !== null;\n\n        return !!(pageTitle?.includes('Grade') || hasGradesInUrl || hasGradesTable || hasGradesHeader);\n    }\n\n    public scrapeGradeData(): GradeData {\n        try {\n            const courseTitleSelectors = [\n                '.course-title',\n                'h2.course-title',\n                '.course_name',\n                '#course_name',\n                '.context_title',\n                'h1.ic-Action-header__Heading'\n            ];\n\n            let courseName = '';\n            for (const selector of courseTitleSelectors) {\n                const element = document.querySelector(selector);\n                if (element?.textContent?.trim()) {\n                    courseName = element.textContent.trim();\n                    break;\n                }\n            }\n\n            if (!courseName) {\n                const breadcrumb = document.querySelector('.ic-app-crumbs__title');\n                if (breadcrumb?.textContent) {\n                    courseName = breadcrumb.textContent.trim();\n                } else {\n                    courseName = document.title.split(':')[0].trim();\n                }\n            }\n\n            const assignments: GradeData['assignments'] = [];\n            const assignmentRows = document.querySelectorAll('.student_assignment, .assignment_graded');\n\n            assignmentRows.forEach(row => {\n                const nameSelectors = ['.title a', '.title', '.assignment_name'];\n                let name = '';\n                for (const selector of nameSelectors) {\n                    const element = row.querySelector(selector);\n                    if (element?.textContent?.trim()) {\n                        name = element.textContent.trim();\n                        break;\n                    }\n                }\n\n                const gradeText = row.querySelector('.grade, .score')?.textContent;\n                const possibleText = row.querySelector('.points_possible, .total-points')?.textContent;\n                const weightText = row.querySelector('.assignment_group .group_weight, .weight')?.textContent;\n            \n                const points = gradeText === '-' || gradeText === 'not a number' ? 0 : this.parseNumber(gradeText);\n                const pointsPossible = possibleText === 'also not a number' ? 0 : this.parseNumber(possibleText);\n                const weight = weightText ? this.parseNumber(weightText.replace('%', '')) : undefined;\n            \n                if (name) {\n                    assignments.push({ name, points, pointsPossible, weight });\n                }\n            });\n            \n            return { courseName, assignments };\n        } catch (err) {\n            console.error('Error in scrapeGradeData:', err);\n            throw err;\n        }\n    }\n\n    private parseNumber(value: string | null | undefined): number {\n        if (!value || value === '-' || value === 'not a number' || value === 'also not a number') return 0;\n        const num = parseFloat(value.replace(/[^\\d.-]/g, ''));\n        return isNaN(num) ? 0 : num;\n    }\n}\n\n// Initialize scrapers\nconst initializeScrapers = () => {\n    // Check if we're on a Canvas page\n    if (!document.querySelector('.ic-app')) {\n        return;\n    }\n\n    // Initialize scrapers based on page type\n    if (document.querySelector('.ic-Dashboard-header, .context_module')) {\n        new DashboardScraper();\n    }\n    new GradeDataScraper();\n};\n\n// Message handling\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    try {\n        console.log('Content script received message:', message);\n        \n        switch (message.type) {\n            case 'SETTINGS_UPDATED':\n                console.log('Settings updated:', message.settings);\n                // Store settings in local storage for quick access\n                chrome.storage.local.set({ settings: message.settings })\n                    .then(() => {\n                        console.log('Settings saved to local storage');\n                        // Re-initialize scrapers with new settings\n                        initializeScrapers();\n                        sendResponse({ success: true });\n                    })\n                    .catch(error => {\n                        console.error('Failed to save settings:', error);\n                        sendResponse({ success: false, error: error.message });\n                    });\n                return true; // Keep channel open for async response\n\n            case 'REFRESH_ASSIGNMENTS':\n                console.log('Refreshing assignments');\n                initializeScrapers();\n                sendResponse({ success: true });\n                break;\n\n            case 'FETCH_REQUEST':\n                // Handle fetch requests from background script\n                fetch(message.url, message.options)\n                    .then(async response => {\n                        if (!response.ok) {\n                            throw new Error(`HTTP error! status: ${response.status}`);\n                        }\n                        const data = await response.json();\n                        sendResponse({ success: true, data });\n                    })\n                    .catch(error => {\n                        console.error('Fetch error:', error);\n                        sendResponse({ success: false, error: error.message });\n                    });\n                return true; // Keep channel open for async response\n\n            case 'ASSIGNMENTS_UPDATED':\n                console.log('Assignments updated:', message.assignments);\n                // Handle updated assignments if needed\n                sendResponse({ success: true });\n                break;\n\n            default:\n                console.warn('Unknown message type:', message.type);\n                sendResponse({ error: 'Unknown message type' });\n        }\n    } catch (error) {\n        console.error('Error handling message:', error);\n        sendResponse({ error: 'Internal error' });\n    }\n    return true; // Keep the message channel open for async response\n});\n\n// Initialize on load\nconst initialize = async () => {\n    const waitForBackgroundReady = async (retries = 0, maxRetries = 3): Promise<boolean> => {\n        try {\n            // Try to ping the background script\n            await chrome.runtime.sendMessage({ type: 'PING' });\n            console.log('Background script is ready');\n            return true;\n        } catch (error) {\n            if (retries < maxRetries) {\n                console.log(`Waiting for background script... (attempt ${retries + 1})`);\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                return waitForBackgroundReady(retries + 1, maxRetries);\n            }\n            console.error('Background script not available after retries');\n            return false;\n        }\n    };\n\n    try {\n        // Wait for background script to be ready\n        const isBackgroundReady = await waitForBackgroundReady();\n        if (!isBackgroundReady) {\n            throw new Error('Background script not available');\n        }\n\n        // Now notify background script that content script is ready\n        await chrome.runtime.sendMessage({ type: 'CONTENT_SCRIPT_READY' });\n        console.log('Content script ready message sent');\n\n        // Initialize scrapers based on DOM state\n        const initScrapers = () => {\n            initializeScrapers();\n            console.log('Scrapers initialized');\n        };\n\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', initScrapers);\n        } else {\n            initScrapers();\n        }\n    } catch (error) {\n        console.error('Failed to initialize content script:', error);\n    }\n};\n\n// Wait for a moment before initializing to ensure extension is ready\nsetTimeout(initialize, 500);\n"],"names":["DashboardScraper","constructor","this","initialize","data","scrapeDashboardData","chrome","runtime","sendMessage","type","catch","err","console","error","dashboardData","document","querySelectorAll","forEach","section","courseName","querySelector","textContent","trim","assignments","item","name","getAttribute","dueDate","push","length","log","GradeDataScraper","isGradesPage","scrapeGradeData","pageTitle","hasGradesInUrl","window","location","pathname","includes","hasGradesTable","getElementById","hasGradesHeader","courseTitleSelectors","selector","element","breadcrumb","title","split","row","nameSelectors","gradeText","possibleText","weightText","points","parseNumber","pointsPossible","weight","replace","undefined","value","num","parseFloat","isNaN","initializeScrapers","onMessage","addListener","message","sender","sendResponse","settings","storage","local","set","then","success","fetch","url","options","async","response","ok","Error","status","json","warn","setTimeout","waitForBackgroundReady","retries","maxRetries","Promise","resolve","initScrapers","readyState","addEventListener"],"sourceRoot":""}