{"version":3,"file":"contentScript/index.js","mappings":"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","sources":["webpack://canvaspal/./src/contentScript/index.ts"],"sourcesContent":["export interface GradeData {\n    courseName: string;\n    assignments: {\n        name: string;\n        points: number;\n        pointsPossible: number;\n        weight?: number;\n    }[];\n}\n\nexport interface DashboardData {\n    courseName: string;\n    assignments: {\n        name: string;\n        dueDate: string;\n        type: string;\n    }[];\n}\n\nexport class DashboardScraper {\n    constructor() {\n        // Check if we're on a Canvas page\n        if (document.querySelector('.ic-app')) {\n            try {\n                const data = this.scrapeDashboardData();\n                if (typeof chrome !== 'undefined' && chrome.runtime) {\n                    chrome.runtime.sendMessage({ type: 'dashboardData', data }).catch(err => {\n                        console.error('Failed to send dashboard data:', err);\n                    });\n                }\n            } catch (err) {\n                console.error('Failed to scrape dashboard data:', err);\n                if (typeof chrome !== 'undefined' && chrome.runtime) {\n                    chrome.runtime.sendMessage({\n                        type: 'error',\n                        error: 'Failed to scrape dashboard data'\n                    });\n                }\n            }\n        }\n    }\n\n    public scrapeDashboardData(): DashboardData[] {\n        try {\n            const dashboardData: DashboardData[] = [];\n            \n            // Find all course sections\n            const courseSections = document.querySelectorAll('.context_module');\n            \n            courseSections.forEach(section => {\n                const courseName = section.querySelector('.name')?.textContent?.trim() || 'Unknown Course';\n                const assignments: DashboardData['assignments'] = [];\n\n                // Find all assignment items in this section\n                const assignmentItems = section.querySelectorAll('.ig-row');\n                assignmentItems.forEach(item => {\n                    const name = item.querySelector('.ig-title')?.textContent?.trim() || '';\n                    const type = item.querySelector('.type_icon')?.getAttribute('title') || '';\n                    const dueDate = item.querySelector('.due_date_display')?.textContent?.trim() || '';\n\n                    if (name) {\n                        assignments.push({ name, type, dueDate });\n                    }\n                });\n\n                if (assignments.length > 0) {\n                    dashboardData.push({ courseName, assignments });\n                }\n            });\n\n            console.log('Extracted dashboard data:', dashboardData);\n            return dashboardData;\n        } catch (err) {\n            console.error('Error in scrapeDashboardData:', err);\n            throw err;\n        }\n    }\n}\n\nexport class GradeDataScraper {\n    constructor() {\n        // Check if we're on a grades page using multiple indicators\n        const isGradesPage = this.isGradesPage();\n        if (isGradesPage) {\n            try {\n                const data = this.scrapeGradeData();\n                if (typeof chrome !== 'undefined' && chrome.runtime) {\n                    chrome.runtime.sendMessage({ type: 'gradeData', data }).catch(err => {\n                        console.error('Failed to send grade data:', err);\n                    });\n                }\n            } catch (err) {\n                console.error('Failed to scrape grade data:', err);\n                if (typeof chrome !== 'undefined' && chrome.runtime) {\n                    chrome.runtime.sendMessage({ \n                        type: 'error', \n                        error: 'Failed to scrape grade data' \n                    });\n                }\n            }\n        }\n    }\n\n    private isGradesPage(): boolean {\n        // Multiple ways to detect if we're on a grades page\n        const pageTitle = document.querySelector('h1.ic-Action-header__Heading')?.textContent;\n        const hasGradesInUrl = window.location.pathname.includes('/grades');\n        const hasGradesTable = document.getElementById('grades_summary') !== null;\n        const hasGradesHeader = document.querySelector('.student_grades') !== null;\n\n        return !!(pageTitle?.includes('Grade') || hasGradesInUrl || hasGradesTable || hasGradesHeader);\n    }\n\n    public scrapeGradeData(): GradeData {\n        try {\n            // Try multiple selectors for course title\n            const courseTitleSelectors = [\n                '.course-title',\n                'h2.course-title',\n                '.course_name',\n                '#course_name',\n                '.context_title',\n                'h1.ic-Action-header__Heading'\n            ];\n\n            let courseName = '';\n            for (const selector of courseTitleSelectors) {\n                const element = document.querySelector(selector);\n                if (element?.textContent?.trim()) {\n                    courseName = element.textContent.trim();\n                    break;\n                }\n            }\n\n            if (!courseName) {\n                // Try getting from breadcrumb or page title\n                const breadcrumb = document.querySelector('.ic-app-crumbs__title');\n                if (breadcrumb?.textContent) {\n                    courseName = breadcrumb.textContent.trim();\n                } else {\n                    courseName = document.title.split(':')[0].trim();\n                }\n            }\n\n            const assignments: GradeData['assignments'] = [];\n            const assignmentRows = document.querySelectorAll('.student_assignment, .assignment_graded');\n\n            if (assignmentRows.length === 0) {\n                console.warn('No assignment rows found');\n            }\n\n            console.log('Found', assignmentRows.length, 'assignment rows');\n        \n            // Process each assignment row\n            assignmentRows.forEach(row => {\n                // Try multiple selectors for assignment name\n                const nameSelectors = ['.title a', '.title', '.assignment_name'];\n                let name = '';\n                for (const selector of nameSelectors) {\n                    const element = row.querySelector(selector);\n                    if (element?.textContent?.trim()) {\n                        name = element.textContent.trim();\n                        break;\n                    }\n                }\n\n                const gradeText = row.querySelector('.grade, .score')?.textContent;\n                const possibleText = row.querySelector('.points_possible, .total-points')?.textContent;\n                const weightText = row.querySelector('.assignment_group .group_weight, .weight')?.textContent;\n            \n                // Handle special cases\n                const points = gradeText === '-' || gradeText === 'not a number' ? 0 : this.parseNumber(gradeText);\n                const pointsPossible = possibleText === 'also not a number' ? 0 : this.parseNumber(possibleText);\n                const weight = weightText ? this.parseNumber(weightText.replace('%', '')) : undefined;\n            \n                if (name) {\n                    assignments.push({ name, points, pointsPossible, weight });\n                }\n            });\n            \n            console.log('Extracted assignments:', assignments);\n            \n            return { courseName, assignments };\n        } catch (err) {\n            console.error('Error in scrapeGradeData:', err);\n            throw err;\n        }\n    }\n\n    private parseNumber(value: string | null | undefined): number {\n        if (!value || value === '-' || value === 'not a number' || value === 'also not a number') return 0;\n        const num = parseFloat(value.replace(/[^\\d.-]/g, ''));\n        return isNaN(num) ? 0 : num;\n    }\n}\n\n// Initialize scrapers based on page content rather than just URL\nconst initializeScrapers = () => {\n    // Check if we're on a Canvas page\n    if (!document.querySelector('.ic-app')) {\n        return;\n    }\n\n    // Initialize grade scraper if we detect grade elements\n    const gradeScraperInstance = new GradeDataScraper();\n\n    // Initialize dashboard scraper if we detect dashboard elements\n    if (document.querySelector('.ic-Dashboard-header, .context_module')) {\n        new DashboardScraper();\n    }\n};\n\n// Run initialization when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializeScrapers);\n} else {\n    initializeScrapers();\n}\n"],"names":["DashboardScraper","constructor","document","querySelector","data","this","scrapeDashboardData","chrome","runtime","sendMessage","type","catch","err","console","error","dashboardData","querySelectorAll","forEach","section","courseName","textContent","trim","assignments","item","name","getAttribute","dueDate","push","length","log","GradeDataScraper","isGradesPage","scrapeGradeData","pageTitle","hasGradesInUrl","window","location","pathname","includes","hasGradesTable","getElementById","hasGradesHeader","courseTitleSelectors","selector","element","breadcrumb","title","split","assignmentRows","warn","row","nameSelectors","gradeText","possibleText","weightText","points","parseNumber","pointsPossible","weight","replace","undefined","value","num","parseFloat","isNaN","initializeScrapers","readyState","addEventListener"],"sourceRoot":""}