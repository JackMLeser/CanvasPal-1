(()=>{"use strict";function n(n,e,t){try{console.log("Updating assignments list:",n),t.textContent=`${n.length} Tasks`,e.innerHTML=n.map((n=>{return`\n            <div class="assignment-item ${e=n.priorityScore,e>=.7?"high-priority":e>=.4?"medium-priority":"low-priority"}">\n                <div style="font-weight: bold;">${n.title}</div>\n                <div>Due: ${n.dueDate}</div>\n                <div>Course: ${n.courseName}</div>\n                <div>Points: ${n.points}</div>\n            </div>\n        `;var e})).join("")}catch(n){console.error("Error updating assignments list:",n)}}class e{constructor(){this.initialize()}initialize(){try{console.log("Initializing DashboardScraper");const n=this.scrapeDashboardData();console.log("Scraped dashboard data:",n),chrome.runtime.sendMessage({type:"DASHBOARD_DATA",data:n}).catch((n=>{console.error("Failed to send dashboard data:",n)}))}catch(n){console.error("Failed to scrape dashboard data:",n)}}scrapeDashboardData(){try{console.log("Starting dashboard data scraping");const n=[],e={},t=document.querySelectorAll(".PlannerItem, .planner-item");return console.log("Found planner items:",t.length),t.forEach((n=>{const t=n.querySelector('.course-title, .planner-course-title, [data-testid="course-name"]'),o=t?.textContent?.trim()||"Unknown Course";if(n.querySelector(".PlannerItem-details, .planner-item-details")){const t=n.querySelector('.PlannerItem-title, .planner-item-title, [data-testid="assignment-title"]'),s=t?.textContent?.trim()||"",a=n.querySelector('.PlannerItem-type, .planner-item-type, [data-testid="assignment-type"]'),r=a?.textContent?.trim()||"assignment",i=n.querySelector('.PlannerItem-time, .planner-item-time, [data-testid="due-date"]');let l="";if(n.querySelector(".PlannerItem-time-all-day, .planner-item-time-all-day"))l="All Day";else{l=i?.textContent?.trim()||""||"No due date"}console.log("Found assignment:",{courseName:o,name:s,type:r,dueDate:l}),s&&(e[o]||(e[o]=[]),e[o].push({name:s,type:r,dueDate:l}))}})),Object.entries(e).forEach((([e,t])=>{t.length>0&&n.push({courseName:e,assignments:t})})),console.log("Final dashboard data:",n),n}catch(n){throw console.error("Error in scrapeDashboardData:",n),n}}}class t{constructor(){this.initialize()}initialize(){if(this.isGradesPage())try{console.log("Initializing GradeDataScraper");const n=this.scrapeGradeData();console.log("Scraped grade data:",n),chrome.runtime.sendMessage({type:"GRADE_DATA",data:n}).catch((n=>{console.error("Failed to send grade data:",n)}))}catch(n){console.error("Failed to scrape grade data:",n)}}isGradesPage(){const n=document.querySelector("h1.ic-Action-header__Heading")?.textContent,e=window.location.pathname.includes("/grades"),t=null!==document.getElementById("grades_summary"),o=null!==document.querySelector(".student_grades"),s=!!(n?.includes("Grade")||e||t||o);return console.log("Is grades page:",s),s}scrapeGradeData(){try{console.log("Starting grade data scraping");const n=[".course-title","h2.course-title",".course_name","#course_name",".context_title","h1.ic-Action-header__Heading"];let e="";for(const t of n){const n=document.querySelector(t);if(n?.textContent?.trim()){e=n.textContent.trim();break}}if(!e){const n=document.querySelector(".ic-app-crumbs__title");e=n?.textContent?n.textContent.trim():document.title.split(":")[0].trim()}console.log("Found course name:",e);const t=[],o=document.querySelectorAll('.student_assignment, .assignment_graded, [data-testid="assignment-row"]');console.log("Found assignment rows:",o.length),o.forEach((n=>{const e=[".title a",".title",".assignment_name",'[data-testid="assignment-name"]'];let o="";for(const t of e){const e=n.querySelector(t);if(e?.textContent?.trim()){o=e.textContent.trim();break}}const s=n.querySelector('.grade, .score, [data-testid="grade-display"]')?.textContent,a=n.querySelector('.points_possible, .total-points, [data-testid="points-possible"]')?.textContent,r=n.querySelector('.assignment_group .group_weight, .weight, [data-testid="group-weight"]')?.textContent,i="-"===s||"not a number"===s?0:this.parseNumber(s),l="also not a number"===a?0:this.parseNumber(a),c=r?this.parseNumber(r.replace("%","")):void 0;o&&(console.log("Found assignment:",{name:o,points:i,pointsPossible:l,weight:c}),t.push({name:o,points:i,pointsPossible:l,weight:c}))}));const s={courseName:e,assignments:t};return console.log("Final grade data:",s),s}catch(n){throw console.error("Error in scrapeGradeData:",n),n}}parseNumber(n){if(!n||"-"===n||"not a number"===n||"also not a number"===n)return 0;const e=parseFloat(n.replace(/[^\d.-]/g,""));return isNaN(e)?0:e}}console.log("CanvasPal content script loaded");const o=async()=>{try{if(console.log("Initializing CanvasPal extension"),await new Promise((n=>{const e=()=>{document.head&&document.body?n():requestAnimationFrame(e)};e()})),(async()=>{try{console.log("Initializing CanvasPal button");const e=window.location.href.includes(".instructure.com"),t=await(async()=>{try{if(console.log("Creating CanvasPal elements"),!chrome?.runtime)throw new Error("Chrome APIs not available");const n=chrome.runtime.getURL("icons/icon128.png");console.log("Icon URL:",n);const e=document.createElement("style");e.textContent="\n            .canvas-pal-button {\n                position: fixed;\n                right: 20px;\n                top: 20px;\n                width: 44px;\n                height: 44px;\n                border-radius: 50%;\n                background: #0066CC;\n                color: white;\n                border: none;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                z-index: 2147483647;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                backdrop-filter: blur(8px);\n            }\n\n            .canvas-pal-button:hover {\n                transform: translateY(-2px);\n                background: #0056b3;\n                box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);\n            }\n\n            .canvas-pal-button.has-assignments {\n                animation: canvas-pal-pulse 2s infinite;\n            }\n\n            @keyframes canvas-pal-pulse {\n                0% { transform: scale(1); }\n                50% { transform: scale(1.05); }\n                100% { transform: scale(1); }\n            }\n\n            .canvas-pal-toggle {\n                position: fixed;\n                top: 20px;\n                right: 70px;\n                z-index: 2147483647;\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                background: rgba(255, 255, 255, 0.9);\n                padding: 6px 12px;\n                border-radius: 20px;\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n                font-family: 'Lato', sans-serif;\n                font-size: 12px;\n            }\n\n            .canvas-pal-toggle input {\n                margin: 0;\n                cursor: pointer;\n            }\n\n            .popup-container {\n                position: fixed;\n                right: 20px;\n                top: 75px;\n                width: 350px;\n                min-height: 400px;\n                background: #f9f9f9;\n                border: 2px solid #000;\n                z-index: 2147483646;\n                display: none;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .popup-container.show {\n                display: block;\n            }\n\n            .popup-header {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                background-color: #0066CC;\n                color: white;\n                padding: 12px;\n                position: relative;\n                border-bottom: 1px solid #666;\n                margin-bottom: 16px;\n            }\n\n            .popup-title {\n                flex-grow: 1;\n                text-align: center;\n                margin: 0;\n                font-size: 2.3em;\n                color: #FFFFFF;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .task-count {\n                position: absolute;\n                bottom: 8px;\n                left: 9px;\n                font-size: .7em;\n                color: #FFFFFF;\n                font-family: 'Lato', sans-serif;\n            }\n\n            .logo {\n                margin-left: 16px;\n                display: flex;\n                align-items: center;\n            }\n\n            .logo img {\n                width: 50px;\n                height: 50px;\n                border-radius: 20%;\n                border: 3px solid #FFFFFF;\n                padding: 0;\n                background: white;\n                object-fit: contain;\n            }\n\n            .assignments-list {\n                max-height: 300px;\n                overflow-y: auto;\n                padding: 16px;\n            }\n\n            .assignment-item {\n                padding: 12px;\n                border: 1px solid #eee;\n                margin-bottom: 8px;\n                border-radius: 4px;\n                background: white;\n            }\n\n            .assignment-item.high-priority {\n                border-left: 4px solid #d92b2b;\n            }\n\n            .assignment-item.medium-priority {\n                border-left: 4px solid #f0ad4e;\n            }\n\n            .assignment-item.low-priority {\n                border-left: 4px solid #5cb85c;\n            }\n\n            .settings-button {\n                bottom: 16px;\n                right: 16px;\n                position: absolute;\n                text-align: center;\n            }\n\n            .settings-button button {\n                background-color: #0066CC;\n                color: white;\n                padding: 10px 20px;\n                border-radius: 8px;\n                border: none;\n                transition: background-color 0.3s, transform 0.3s;\n                font-family: 'Lato', sans-serif;\n                cursor: pointer;\n                font-size: 14px;\n                font-weight: 500;\n            }\n\n            .settings-button button:hover {\n                background-color: #0056b3;\n                transform: scale(1.08);\n            }\n\n            @media (prefers-color-scheme: dark) {\n                .popup-container {\n                    background: #1c1c1e;\n                    border-color: #666;\n                }\n\n                .assignment-item {\n                    background: #2c2c2e;\n                    border-color: #666;\n                    color: white;\n                }\n\n                .logo img {\n                    background: transparent;\n                }\n\n                .canvas-pal-toggle {\n                    background: rgba(45, 59, 69, 0.9);\n                    color: white;\n                }\n            }\n        ",document.head.appendChild(e);const t=document.createElement("button");t.className="canvas-pal-button",t.textContent="0",document.body.appendChild(t);const o=document.createElement("div");o.className="canvas-pal-toggle",o.innerHTML='\n            <label>\n                <input type="checkbox" id="canvas-pal-visibility" checked>\n                <span>Follow Outside Canvas</span>\n            </label>\n        ',document.body.appendChild(o);const s=document.createElement("div");s.className="popup-container",s.innerHTML=`\n            <div class="popup-header">\n                <div class="popup-title">CanvasPAL</div>\n                <div class="task-count" id="taskCount">0 Tasks</div>\n                <div class="logo">\n                    <img src="${n}" alt="CanvasPAL Logo" />\n                </div>\n            </div>\n            <div class="assignments-list" id="assignmentList">\n                \x3c!-- Assignments will be populated here --\x3e\n            </div>\n            <div class="settings-button">\n                <button id="settings-button">Settings</button>\n            </div>\n        `,document.body.appendChild(s);const a=s.querySelector("#settings-button");return a&&a.addEventListener("click",(()=>{console.log("Settings button clicked");try{const n=chrome.runtime.getURL("settings/settings.html");console.log("Opening settings at:",n),window.open(n,"_blank")}catch(n){console.error("Error opening settings:",n)}})),{button:t,toggleContainer:o,popup:s}}catch(n){return console.error("Error creating elements:",n),null}})();if(!t)return void console.error("Failed to create elements");const{button:o,toggleContainer:s,popup:a}=t;s.style.display=e?"flex":"none",chrome?.storage?.local&&chrome.storage.local.get("settings",(n=>{try{const t=n.settings||{displayOptions:{showOutsideCanvas:!0}},s=t.displayOptions?.showOutsideCanvas??!0,a=document.getElementById("canvas-pal-visibility");a&&(a.checked=s),e||(o.style.display=s?"flex":"none")}catch(n){console.error("Error handling settings:",n)}})),o.addEventListener("click",(()=>{a.classList.toggle("show")}));const r=document.getElementById("canvas-pal-visibility");r?.addEventListener("change",(n=>{const t=n.target;chrome?.storage?.local&&chrome.storage.local.get("settings",(n=>{try{const s=n.settings||{displayOptions:{}};s.displayOptions||(s.displayOptions={}),s.displayOptions.showOutsideCanvas=t.checked,chrome.storage.local.set({settings:s}),e||(o.style.display=t.checked?"flex":"none")}catch(n){console.error("Error updating settings:",n)}}))})),document.addEventListener("click",(n=>{const e=n.target;a.contains(e)||o.contains(e)||a.classList.remove("show")})),chrome?.runtime&&(chrome.runtime.onMessage.addListener((e=>{try{if(console.log("Received message:",e),"ASSIGNMENTS_UPDATE"===e.type){o.textContent=e.data.length.toString(),o.classList.toggle("has-assignments",e.data.length>0);const t=document.getElementById("assignmentList"),s=document.getElementById("taskCount");t&&s&&n(e.data,t,s)}else"REFRESH_ASSIGNMENTS"===e.type&&chrome.runtime.sendMessage({type:"GET_ASSIGNMENTS"})}catch(n){console.error("Error handling message:",n)}})),console.log("Requesting initial assignments"),chrome.runtime.sendMessage({type:"GET_ASSIGNMENTS"},(e=>{try{if(console.log("Received initial assignments:",e),e?.assignments){o.textContent=e.assignments.length.toString(),o.classList.toggle("has-assignments",e.assignments.length>0);const t=document.getElementById("assignmentList"),s=document.getElementById("taskCount");t&&s&&n(e.assignments,t,s)}}catch(n){console.error("Error getting initial assignments:",n)}})))}catch(n){console.error("Error initializing button:",n)}})(),console.log("Initializing scrapers"),(()=>{if(console.log("Initializing scrapers"),!document.querySelector(".ic-app"))return void console.log("Not on a Canvas page");const n=document.querySelector(".dashboard-planner, .planner-container, .PlannerApp"),o=document.querySelector(".student_grades, .gradebook-content, #grades_summary");console.log("Page type:",{isDashboard:n,isGradesPage:o}),n&&(console.log("Initializing dashboard scraper"),new e),o&&(console.log("Initializing grades scraper"),new t)})(),chrome.runtime.onMessage.addListener(((n,e,t)=>{console.log("Received message:",n);try{if("DASHBOARD_DATA"===n.type||"GRADE_DATA"===n.type){((n,e)=>{console.log("Processing scraped data:",{dashboardData:n,gradeData:e});const t=[];if(n)for(const e of n)for(const n of e.assignments)t.push({title:n.name,dueDate:n.dueDate,courseName:e.courseName,type:n.type,points:0,priorityScore:.5});if(e){const n=new Map;e.assignments.forEach((e=>{n.set(e.name,{points:e.points,pointsPossible:e.pointsPossible,weight:e.weight})})),t.forEach((e=>{const t=n.get(e.title);t&&(e.points=t.points,e.maxPoints=t.pointsPossible,e.weight=t.weight)}))}console.log("Processed assignments:",t),t.length>0?(console.log("Sending assignments to background script"),chrome.runtime.sendMessage({type:"ASSIGNMENTS_UPDATE",data:t},(n=>{console.log("Background script response:",n)}))):console.log("No assignments to send")})("DASHBOARD_DATA"===n.type?n.data:null,"GRADE_DATA"===n.type?n.data:null)}}catch(n){console.error("Error processing scraped data:",n)}})),setInterval((()=>{if(console.log("Running periodic refresh"),document.querySelector(".ic-app")){const n=document.querySelector(".dashboard-planner, .planner-container"),o=document.querySelector(".student_grades, .gradebook-content");n&&(console.log("Refreshing dashboard data"),new e),o&&(console.log("Refreshing grades data"),new t)}}),6e4),document.querySelector(".ic-app")){console.log("Running initial scrape");const n=document.querySelector(".dashboard-planner, .planner-container"),o=document.querySelector(".student_grades, .gradebook-content");n&&(console.log("Initial dashboard scrape"),new e),o&&(console.log("Initial grades scrape"),new t)}}catch(n){console.error("Error initializing CanvasPal:",n)}};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",o):o()})();
//# sourceMappingURL=index.js.map