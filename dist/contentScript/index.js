(()=>{"use strict";var e;!function(e){e[e.DEBUG=0]="DEBUG",e[e.INFO=1]="INFO",e[e.WARN=2]="WARN",e[e.ERROR=3]="ERROR"}(e||(e={}));class t{constructor(t,n=e.INFO){this.context=t,this.currentLevel=n,this.cleanOldLogs()}static getInstance(n,r=e.INFO){const a=`${n}-${r}`;return this.instances.has(a)||this.instances.set(a,new t(n,r)),this.instances.get(a)}setLevel(e){this.currentLevel=e}debug(t,n){this.log(e.DEBUG,t,n)}info(t,n){this.log(e.INFO,t,n)}warn(t,n){this.log(e.WARN,t,n)}error(t,n){this.log(e.ERROR,t,n)}async log(t,n,...r){if(t>=this.currentLevel){const a=(new Date).toISOString(),o=`[${a}] ${this.getLogPrefix(t)} [${this.context}] ${n}`;if(r.length){const e=this.formatLogData(r);console.log(o,e)}else console.log(o);const i={timestamp:a,level:t,message:n,data:r,stack:Error().stack};this.saveLogs(i),t===e.ERROR&&this.notifyError(i)}}getLogPrefix(t){switch(t){case e.DEBUG:return"üîç DEBUG:";case e.INFO:return"üì¢ INFO:";case e.WARN:return"‚ö†Ô∏è WARN:";case e.ERROR:return"‚ùå ERROR:";default:return"üì¢"}}formatLogData(e){try{if(Array.isArray(e))return e.map((e=>this.formatLogData(e)));if(e&&"object"==typeof e){if(e instanceof Error)return{name:e.name,message:e.message,stack:e.stack};const t={};for(const[n,r]of Object.entries(e))t[n]=this.formatLogData(r);return t}return e}catch(e){return"[Error formatting log data]"}}async saveLogs(e){const{logs:n=[]}=await chrome.storage.local.get("logs");n.push(e),n.length>t.MAX_LOGS&&n.splice(0,n.length-t.MAX_LOGS),await chrome.storage.local.set({logs:n})}async cleanOldLogs(){const{logs:e=[]}=await chrome.storage.local.get("logs"),t=new Date;t.setDate(t.getDate()-30);const n=e.filter((e=>new Date(e.timestamp)>t));await chrome.storage.local.set({logs:n})}notifyError(e){chrome.notifications.create({type:"basic",iconUrl:"/dist/icons/icon128.png",title:"CanvasPal Error",message:e.message,priority:2})}async getLogs(e){const{logs:t=[]}=await chrome.storage.local.get("logs");return e?t.filter((t=>t.level===e)):t}}t.MAX_LOGS=1e3,t.instances=new Map,t.getInstance("default");class n{constructor(){this.metrics=[],this.logger=new t("PerformanceMonitor")}static getInstance(){return n.instance||(n.instance=new n),n.instance}startMetric(e,t){const n=`${e}_${Date.now()}`;return this.metrics.push({name:e,startTime:performance.now(),metadata:t}),n}endMetric(e){const t=this.metrics.find((t=>t.name===e&&!t.endTime));t&&(t.endTime=performance.now(),t.duration=t.endTime-t.startTime,this.logger.debug(`Performance metric - ${e}:`,{duration:`${t.duration.toFixed(2)}ms`,metadata:t.metadata}))}getReport(){const e=this.metrics.filter((e=>void 0!==e.duration));if(0===e.length)return{metrics:[],summary:{totalDuration:0,averageDuration:0,slowestOperation:{name:"none",duration:0},fastestOperation:{name:"none",duration:0}}};const t=e.reduce(((e,t)=>e+(t.duration||0)),0),n=t/e.length,r=[...e].sort(((e,t)=>(t.duration||0)-(e.duration||0)));return{metrics:e,summary:{totalDuration:t,averageDuration:n,slowestOperation:{name:r[0].name,duration:r[0].duration||0},fastestOperation:{name:r[r.length-1].name,duration:r[r.length-1].duration||0}}}}clear(){this.metrics=[]}monitorAsync(e,t,n){return this.startMetric(e,n),t().finally((()=>this.endMetric(e)))}monitor(e,t,n){this.startMetric(e,n);const r=t();return this.endMetric(e),r}}class r{constructor(){this.panel=null,this.isVisible=!1,this.logger=new t("DebugPanel"),this.performanceMonitor=n.getInstance(),this.createPanel(),this.initializeKeyboardShortcut()}createPanel(){const e=()=>{if(!document.body)return void requestAnimationFrame(e);this.panel=document.createElement("div"),this.panel.id="canvaspal-debug-panel",this.panel.innerHTML='\n                <div class="debug-panel-header">\n                    <span>üîç CanvasPal Debug</span>\n                    <div class="debug-panel-controls">\n                        <button id="clear-metrics" title="Clear Performance Metrics">üóëÔ∏è</button>\n                        <button id="canvaspal-debug-close">‚úï</button>\n                    </div>\n                </div>\n                <div class="debug-panel-content">\n                    <div id="performance-metrics"></div>\n                    <div id="assignment-info"></div>\n                </div>\n            ',this.panel.style.cssText="\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                width: 350px;\n                max-height: 500px;\n                background: rgba(0, 0, 0, 0.9);\n                color: white;\n                padding: 15px;\n                border-radius: 8px;\n                font-family: monospace;\n                font-size: 12px;\n                z-index: 9999;\n                overflow-y: auto;\n                box-shadow: 0 0 10px rgba(0,0,0,0.5);\n                display: none;\n            ";const t=document.createElement("style");t.textContent="\n                .debug-panel-header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: 10px;\n                    padding-bottom: 10px;\n                    border-bottom: 1px solid rgba(255,255,255,0.1);\n                }\n\n                .debug-panel-controls {\n                    display: flex;\n                    gap: 8px;\n                }\n\n                .debug-panel-controls button {\n                    background: none;\n                    border: none;\n                    color: white;\n                    cursor: pointer;\n                    padding: 4px;\n                    border-radius: 4px;\n                    transition: background 0.2s;\n                }\n\n                .debug-panel-controls button:hover {\n                    background: rgba(255,255,255,0.1);\n                }\n\n                .performance-section {\n                    margin: 10px 0;\n                    padding: 8px;\n                    background: rgba(255,255,255,0.05);\n                    border-radius: 4px;\n                }\n\n                .metric-item {\n                    margin: 4px 0;\n                    display: flex;\n                    justify-content: space-between;\n                }\n\n                .metric-value {\n                    color: #90EE90;\n                }\n\n                .slow-metric {\n                    color: #ff6b6b;\n                }\n\n                .normal-metric {\n                    color: #ffd700;\n                }\n\n                .fast-metric {\n                    color: #90EE90;\n                }\n            ",document.head?document.head.appendChild(t):document.addEventListener("DOMContentLoaded",(()=>{document.head.appendChild(t)})),document.body.appendChild(this.panel),document.getElementById("canvaspal-debug-close")?.addEventListener("click",(()=>{this.toggleVisibility()})),document.getElementById("clear-metrics")?.addEventListener("click",(()=>{this.performanceMonitor.clear(),this.updatePerformanceMetrics()}))};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",e):e()}initializeKeyboardShortcut(){document.addEventListener("keydown",(e=>{(e.ctrlKey||e.metaKey)&&e.shiftKey&&"D"===e.key&&(e.preventDefault(),this.toggleVisibility())}))}toggleVisibility(){this.panel&&(this.isVisible=!this.isVisible,this.panel.style.display=this.isVisible?"block":"none",this.logger.debug("Debug panel "+(this.isVisible?"shown":"hidden")))}updatePerformanceMetrics(){const e=document.getElementById("performance-metrics");if(!e)return;const t=this.performanceMonitor.getReport();e.innerHTML=`\n            <div class="performance-section">\n                <h3>Performance Summary</h3>\n                <div class="metric-item">\n                    <span>Total Duration:</span>\n                    <span class="metric-value">${t.summary.totalDuration.toFixed(2)}ms</span>\n                </div>\n                <div class="metric-item">\n                    <span>Average Duration:</span>\n                    <span class="metric-value">${t.summary.averageDuration.toFixed(2)}ms</span>\n                </div>\n                <div class="metric-item">\n                    <span>Slowest Operation:</span>\n                    <span class="slow-metric">${t.summary.slowestOperation.name} (${t.summary.slowestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n                <div class="metric-item">\n                    <span>Fastest Operation:</span>\n                    <span class="fast-metric">${t.summary.fastestOperation.name} (${t.summary.fastestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n            </div>\n            <div class="performance-section">\n                <h3>Recent Operations</h3>\n                ${t.metrics.slice(-5).map((e=>`\n                    <div class="metric-item">\n                        <span>${e.name}</span>\n                        <span class="${this.getMetricSpeedClass(e.duration||0)}">${e.duration?.toFixed(2)}ms</span>\n                    </div>\n                `)).join("")}\n            </div>\n        `}getMetricSpeedClass(e){return e>100?"slow-metric":e>50?"normal-metric":"fast-metric"}updateAssignmentInfo(e){const t=document.getElementById("assignment-info");if(!t)return;const n=this.getAssignmentTypeCounts(e),r=this.getPriorityRanges(e);t.innerHTML=`\n            <div style="margin-bottom: 15px;">\n                <div style="color: #0066cc; margin-bottom: 8px;">\n                    Found ${e.length} assignments\n                </div>\n                ${this.renderTypeCounts(n)}\n                ${this.renderPriorityDistribution(r)}\n            </div>\n            ${this.renderAssignmentList(e)}\n        `,this.updatePerformanceMetrics()}getAssignmentTypeCounts(e){return e.reduce(((e,t)=>(e[t.type]=(e[t.type]||0)+1,e)),{})}getPriorityRanges(e){return e.reduce(((e,t)=>(t.priorityScore>=.7?e.high=(e.high||0)+1:t.priorityScore>=.4?e.medium=(e.medium||0)+1:e.low=(e.low||0)+1,e)),{})}renderTypeCounts(e){return`\n            <div style="margin-bottom: 10px;">\n                <div style="color: #ffd700; margin-bottom: 5px;">Assignment Types:</div>\n                ${Object.entries(e).map((([e,t])=>`\n                    <div style="margin-left: 10px; color: #90EE90;">\n                        ${e}: ${t}\n                    </div>\n                `)).join("")}\n            </div>\n        `}renderPriorityDistribution(e){const t={high:"#ff6b6b",medium:"#ffd700",low:"#90EE90"};return`\n            <div style="margin-bottom: 10px;">\n                <div style="color: #ffd700; margin-bottom: 5px;">Priority Distribution:</div>\n                ${Object.entries(e).map((([e,n])=>`\n                    <div style="margin-left: 10px; color: ${t[e]};">\n                        ${e}: ${n}\n                    </div>\n                `)).join("")}\n            </div>\n        `}renderAssignmentList(e){return`\n            <div style="margin-top: 15px;">\n                <div style="color: #ffd700; margin-bottom: 5px;">Detailed Assignments:</div>\n                ${e.map((e=>this.renderAssignmentDetail(e))).join("")}\n            </div>\n        `}renderAssignmentDetail(e){const t=e.priorityScore>=.7?"#ff6b6b":e.priorityScore>=.4?"#ffd700":"#90EE90";return`\n            <div style="margin: 8px 0; padding: 8px; border-left: 2px solid ${t}; background: rgba(255,255,255,0.1);">\n                <div style="margin-bottom: 4px;">üìö ${e.title}</div>\n                <div style="color: #90EE90; margin-bottom: 4px;">\n                    ${e.points?`üìù ${e.points}/${e.maxPoints} points`:"No points data"}\n                </div>\n                <div style="color: #ADD8E6; font-size: 11px;">\n                    ‚è∞ Due: ${e.dueDate.toLocaleDateString()}\n                </div>\n                <div style="color: #DDA0DD; font-size: 11px;">\n                    üìö Course: ${e.course}\n                </div>\n                <div style="color: ${t}; font-size: 11px; margin-top: 4px;">\n                    ‚ö° Priority: ${Math.round(100*e.priorityScore)}%\n                </div>\n            </div>\n        `}logDetectionEvent(e,t){this.logger.debug(e,t)}updatePerformanceAnalysis(e){}}class a{constructor(){this.panel=null,this.logger=new t("DateDebugPanel"),this.createPanel()}createPanel(){const e=()=>{if(!document.body)return void requestAnimationFrame(e);this.panel=document.createElement("div"),this.panel.id="date-debug-panel",this.panel.style.cssText="\n                position: fixed;\n                bottom: 20px;\n                left: 20px;\n                width: 300px;\n                max-height: 400px;\n                background: rgba(0, 0, 0, 0.9);\n                color: white;\n                padding: 15px;\n                border-radius: 8px;\n                font-family: monospace;\n                font-size: 12px;\n                z-index: 9999;\n                overflow-y: auto;\n                box-shadow: 0 0 10px rgba(0,0,0,0.5);\n                display: none;\n            ";const t=document.createElement("div");t.innerHTML='\n                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">\n                    <span style="color: #ffd700; font-weight: bold;">üìÖ Date Detection Debug</span>\n                    <button id="date-debug-close" style="background: none; border: none; color: white; cursor: pointer;">‚úï</button>\n                </div>\n            ',this.panel.appendChild(t);const n=document.createElement("div");n.id="date-debug-content",this.panel.appendChild(n),document.body.appendChild(this.panel),document.getElementById("date-debug-close")?.addEventListener("click",(()=>{this.toggleVisibility()}))};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>{e(),document.addEventListener("keydown",(e=>{(e.ctrlKey||e.metaKey)&&e.shiftKey&&"T"===e.key&&(e.preventDefault(),this.toggleVisibility())}))})):(e(),document.addEventListener("keydown",(e=>{(e.ctrlKey||e.metaKey)&&e.shiftKey&&"T"===e.key&&(e.preventDefault(),this.toggleVisibility())})))}toggleVisibility(){if(this.panel){const e="block"===this.panel.style.display;this.panel.style.display=e?"none":"block"}}updateDebugInfo(e){const t=document.getElementById("date-debug-content");t&&(t.innerHTML=`\n            <div class="date-stats" style="margin-bottom: 15px;">\n                <div style="color: #0066cc; margin-bottom: 8px;">\n                    Found ${e.totalDates} date${1!==e.totalDates?"s":""}\n                </div>\n                ${this.renderTypeDistribution(e.types)}\n            </div>\n            <div class="date-detections">\n                <div style="color: #ffd700; margin-bottom: 8px;">Detected Dates:</div>\n                ${this.renderDetections(e.detections)}\n            </div>\n        `)}renderTypeDistribution(e){const t={due:"#ff6b6b",availability:"#4CAF50",unlock:"#2196F3",unknown:"#9e9e9e"};return Object.entries(e).map((([e,n])=>`\n                <div style="margin-left: 10px; color: ${t[e]};">\n                    ${e.charAt(0).toUpperCase()+e.slice(1)}: ${n}\n                </div>\n            `)).join("")}renderDetections(e){return e.map((e=>`\n                <div style="margin: 8px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px;">\n                    <div style="margin-bottom: 4px; color: #90EE90;">\n                        ${e.text}\n                    </div>\n                    <div style="font-size: 11px; color: #ADD8E6;">\n                        Type: ${e.type}\n                    </div>\n                    <div style="font-size: 11px; color: #DDA0DD;">\n                        Parsed: ${e.date}\n                    </div>\n                    <div style="font-size: 11px; color: #FFB6C1;">\n                        Element: ${e.element}\n                    </div>\n                </div>\n            `)).join("")}logDateDetection(e,t){this.logger.debug(e,t)}}class o{constructor(){this.logger=new t("PerformanceLogger")}async logPerformance(e){try{const t=await this.getLogs(),n={timestamp:Date.now(),metrics:e,summary:this.calculateSummary(e)};for(t.unshift(n);t.length>o.MAX_LOGS;)t.pop();await chrome.storage.local.set({[o.STORAGE_KEY]:t}),this.logger.debug("Performance log saved:",n)}catch(e){this.logger.error("Error saving performance log:",e)}}calculateSummary(e){if(0===e.length)return{totalDuration:0,averageDuration:0,slowestOperation:"",fastestOperation:""};const t=e.reduce(((e,t)=>e+t.duration),0),n=[...e].sort(((e,t)=>t.duration-e.duration));return{totalDuration:t,averageDuration:t/e.length,slowestOperation:n[0].name,fastestOperation:n[n.length-1].name}}async getLogs(){try{return(await chrome.storage.local.get(o.STORAGE_KEY))[o.STORAGE_KEY]||[]}catch(e){return this.logger.error("Error retrieving performance logs:",e),[]}}async getPerformanceAnalysis(){const e=await this.getLogs();if(e.length<2)return{trends:[],hotspots:[],recommendations:["Not enough data for analysis"]};const t={};e.forEach((e=>{e.metrics.forEach((e=>{t[e.name]||(t[e.name]=[]),t[e.name].push(e.duration)}))}));const n=Object.entries(t).map((([e,t])=>{const n=t.slice(0,Math.floor(t.length/2)),r=t.slice(Math.floor(t.length/2)),a=this.calculateAverage(n),o=this.calculateAverage(r),i=(a-o)/o*100;return{operation:e,averageDuration:a,trend:this.calculateTrend(i),percentageChange:i}})),r=Object.entries(t).map((([e,t])=>({operation:e,frequency:t.length,averageDuration:this.calculateAverage(t)}))).filter((t=>t.averageDuration>100||t.frequency>.5*e.length)).sort(((e,t)=>t.averageDuration*t.frequency-e.averageDuration*e.frequency));return{trends:n,hotspots:r,recommendations:this.generateRecommendations(n,r)}}calculateAverage(e){return e.reduce(((e,t)=>e+t),0)/e.length}calculateTrend(e){return e<-5?"improving":e>5?"degrading":"stable"}generateRecommendations(e,t){const n=[],r=e.filter((e=>"degrading"===e.trend));return r.length>0&&n.push(`Performance degradation detected in: ${r.map((e=>`${e.operation} (${e.percentageChange.toFixed(1)}% slower)`)).join(", ")}`),t.forEach((e=>{e.averageDuration>200&&n.push(`Consider optimizing ${e.operation} (avg: ${e.averageDuration.toFixed(1)}ms, called ${e.frequency} times)`)})),t.length>3&&n.push("Consider reducing the number of expensive operations running in parallel"),0===n.length&&n.push("Performance is within acceptable ranges"),n}async clearLogs(){try{await chrome.storage.local.remove(o.STORAGE_KEY),this.logger.info("Performance logs cleared")}catch(e){this.logger.error("Error clearing performance logs:",e)}}}o.MAX_LOGS=100,o.STORAGE_KEY="performanceLogs";const i=new class{constructor(){this.config={enabled:!1,logLevel:"info",showDateDebug:!1,showAssignmentDebug:!1,showPriorityDebug:!1,showPerformanceMetrics:!1},this.logger=new t("DebugManager"),this.mainPanel=new r,this.datePanel=new a,this.performanceMonitor=n.getInstance(),this.performanceLogger=new o,this.initializeKeyboardShortcuts(),this.initializePerformanceLogging(),this.loadDebugConfig()}initializePerformanceLogging(){setInterval((async()=>{if(this.config.enabled&&this.config.showPerformanceMetrics){const e=this.performanceMonitor.getReport().metrics.filter((e=>void 0!==e.duration)).map((e=>({name:e.name,duration:e.duration,metadata:e.metadata})));await this.performanceLogger.logPerformance(e),this.config.showPerformanceMetrics&&await this.updatePerformanceAnalysis()}}),3e5)}async updatePerformanceAnalysis(){const e=await this.performanceLogger.getPerformanceAnalysis();this.mainPanel.updatePerformanceAnalysis(e)}initializeKeyboardShortcuts(){document.addEventListener("keydown",(e=>{if((e.ctrlKey||e.metaKey)&&e.shiftKey)switch(e.key){case"`":e.preventDefault(),this.toggleDebugMode();break;case"D":e.preventDefault(),this.mainPanel.toggleVisibility();break;case"T":e.preventDefault(),this.datePanel.toggleVisibility();break;case"P":e.preventDefault(),this.togglePerformanceMetrics()}}))}async togglePerformanceMetrics(){this.config.showPerformanceMetrics=!this.config.showPerformanceMetrics,this.config.showPerformanceMetrics&&await this.updatePerformanceAnalysis(),this.saveDebugConfig()}async loadDebugConfig(){try{const e=await chrome.storage.sync.get("debugConfig");e.debugConfig&&(this.config={...this.config,...e.debugConfig},this.applyConfig())}catch(e){this.logger.error("Error loading debug config:",e)}}async saveDebugConfig(){try{await chrome.storage.sync.set({debugConfig:this.config})}catch(e){this.logger.error("Error saving debug config:",e)}}applyConfig(){this.config.enabled?(this.logger.setLevel(this.getLogLevel()),this.config.showDateDebug&&this.datePanel.toggleVisibility(),(this.config.showAssignmentDebug||this.config.showPriorityDebug)&&this.mainPanel.toggleVisibility()):this.disableAllPanels()}disableAllPanels(){document.querySelectorAll('[id$="-debug-panel"]').forEach((e=>{e.style.display="none"}))}toggleDebugMode(){this.config.enabled=!this.config.enabled,this.applyConfig(),this.saveDebugConfig(),this.logger.info("Debug mode "+(this.config.enabled?"enabled":"disabled"))}updateDebugConfig(e){this.config={...this.config,...e},this.applyConfig(),this.saveDebugConfig()}getLogLevel(){switch(this.config.logLevel){case"debug":return 0;case"info":default:return 1;case"warn":return 2;case"error":return 3}}getMainPanel(){return this.mainPanel}getDatePanel(){return this.datePanel}isDebugEnabled(){return this.config.enabled}getConfig(){return{...this.config}}async clearPerformanceLogs(){await this.performanceLogger.clearLogs(),this.config.showPerformanceMetrics&&await this.updatePerformanceAnalysis()}async getPerformanceAnalysis(){return this.performanceLogger.getPerformanceAnalysis()}};class s{constructor(){this.initialize()}initialize(){try{const e=this.scrapeDashboardData();chrome.runtime.sendMessage({type:"DASHBOARD_DATA",data:e}).catch((e=>{console.error("Failed to send dashboard data:",e)}))}catch(e){console.error("Failed to scrape dashboard data:",e),chrome.runtime.sendMessage({type:"ERROR",error:"Failed to scrape dashboard data"}).catch(console.error)}}scrapeDashboardData(){try{const e=[],t={};return document.querySelectorAll(".planner-item").forEach((e=>{const n=e.querySelector(".course-title, .planner-course-title"),r=n?.textContent?.trim()||"Unknown Course";if(e.querySelector(".planner-item-details")){const n=e.querySelector(".planner-item-title")?.textContent?.trim()||"",a=e.querySelector(".planner-item-type"),o=a?.textContent?.trim()||a?.getAttribute("title")?.trim()||e.querySelector(".planner-item-type-icon")?.getAttribute("title")?.trim()||"",i=e.querySelector(".planner-item-due-date, .planner-item-time");let s=i?.textContent?.trim()||"";e.querySelector(".planner-item-time-all-day")&&(s="All Day"),n&&(t[r]||(t[r]=[]),t[r].push({name:n,type:o,dueDate:s}))}})),Object.entries(t).forEach((([t,n])=>{n.length>0&&e.push({courseName:t,assignments:n})})),console.log("Extracted dashboard data:",e),e}catch(e){throw console.error("Error in scrapeDashboardData:",e),e}}}class c{constructor(){this.initialize()}initialize(){if(this.isGradesPage())try{const e=this.scrapeGradeData();chrome.runtime.sendMessage({type:"GRADE_DATA",data:e}).catch((e=>{console.error("Failed to send grade data:",e)}))}catch(e){console.error("Failed to scrape grade data:",e),chrome.runtime.sendMessage({type:"ERROR",error:"Failed to scrape grade data"}).catch(console.error)}}isGradesPage(){const e=document.querySelector("h1.ic-Action-header__Heading")?.textContent,t=window.location.pathname.includes("/grades"),n=null!==document.getElementById("grades_summary"),r=null!==document.querySelector(".student_grades");return!!(e?.includes("Grade")||t||n||r)}scrapeGradeData(){try{const e=[".course-title","h2.course-title",".course_name","#course_name",".context_title","h1.ic-Action-header__Heading"];let t="";for(const n of e){const e=document.querySelector(n);if(e?.textContent?.trim()){t=e.textContent.trim();break}}if(!t){const e=document.querySelector(".ic-app-crumbs__title");t=e?.textContent?e.textContent.trim():document.title.split(":")[0].trim()}const n=[];return document.querySelectorAll(".student_assignment, .assignment_graded").forEach((e=>{const t=[".title a",".title",".assignment_name"];let r="";for(const n of t){const t=e.querySelector(n);if(t?.textContent?.trim()){r=t.textContent.trim();break}}const a=e.querySelector(".grade, .score")?.textContent,o=e.querySelector(".points_possible, .total-points")?.textContent,i=e.querySelector(".assignment_group .group_weight, .weight")?.textContent,s="-"===a||"not a number"===a?0:this.parseNumber(a),c="also not a number"===o?0:this.parseNumber(o),l=i?this.parseNumber(i.replace("%","")):void 0;r&&n.push({name:r,points:s,pointsPossible:c,weight:l})})),{courseName:t,assignments:n}}catch(e){throw console.error("Error in scrapeGradeData:",e),e}}parseNumber(e){if(!e||"-"===e||"not a number"===e||"also not a number"===e)return 0;const t=parseFloat(e.replace(/[^\d.-]/g,""));return isNaN(t)?0:t}}const l=()=>{if(!document.querySelector(".ic-app"))return;const e=document.querySelector(".dashboard-planner, .planner-container"),t=document.querySelector(".student_grades, .gradebook-content");e&&(console.log("Initializing dashboard scraper"),new s),t&&(console.log("Initializing grades scraper"),new c)};chrome.runtime.onMessage.addListener(((e,t,n)=>{try{switch(console.log("Content script received message:",e),e.type){case"SETTINGS_UPDATED":return console.log("Settings updated:",e.settings),chrome.storage.local.set({settings:e.settings}).then((()=>{console.log("Settings saved to local storage"),l(),n({success:!0})})).catch((e=>{console.error("Failed to save settings:",e),n({success:!1,error:e.message})})),!0;case"REFRESH_ASSIGNMENTS":console.log("Refreshing assignments"),l(),n({success:!0});break;case"FETCH_REQUEST":return fetch(e.url,e.options).then((async e=>{if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();n({success:!0,data:t})})).catch((e=>{console.error("Fetch error:",e),n({success:!1,error:e.message})})),!0;case"ASSIGNMENTS_UPDATED":console.log("Assignments updated:",e.assignments),i.getMainPanel().updateAssignmentInfo(e.assignments),n({success:!0});break;case"DEBUG_DATE_UPDATE":i.getDatePanel().updateDebugInfo(e.data),n({success:!0});break;case"DEBUG_TOGGLE":"date"===e.panel?i.getDatePanel().toggleVisibility():"main"===e.panel&&i.getMainPanel().toggleVisibility(),n({success:!0});break;default:console.warn("Unknown message type:",e.type),n({error:"Unknown message type"})}}catch(e){console.error("Error handling message:",e),n({error:"Internal error"})}return!0})),setTimeout((async()=>{const e=async(t=0,n=3)=>{try{return await chrome.runtime.sendMessage({type:"PING"}),console.log("Background script is ready"),!0}catch(r){return t<n?(console.log(`Waiting for background script... (attempt ${t+1})`),await new Promise((e=>setTimeout(e,1e3))),e(t+1,n)):(console.error("Background script not available after retries"),!1)}};try{if(!await e())throw new Error("Background script not available");await chrome.runtime.sendMessage({type:"CONTENT_SCRIPT_READY"}),console.log("Content script ready message sent");const t=()=>{l(),(()=>{i.isDebugEnabled()||i.toggleDebugMode(),i.updateDebugConfig({enabled:!0,showDateDebug:!0,showAssignmentDebug:!0,showPriorityDebug:!0,showPerformanceMetrics:!0,logLevel:"debug"});const e=i.getMainPanel(),t=i.getDatePanel();document.getElementById("canvaspal-debug-panel")||e.toggleVisibility(),document.getElementById("date-debug-panel")||t.toggleVisibility(),console.log("Debug panels initialized and displayed")})(),console.log("Initialization complete")};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",t):t()}catch(e){console.error("Failed to initialize content script:",e)}}),500)})();
//# sourceMappingURL=index.js.map