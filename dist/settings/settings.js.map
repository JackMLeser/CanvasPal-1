{"version":3,"file":"settings/settings.js","mappings":"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","sources":["webpack://canvaspal/./src/utils/logger.ts","webpack://canvaspal/./src/utils/debugManager.ts","webpack://canvaspal/./src/utils/dateDebugPanel.ts","webpack://canvaspal/./src/utils/debugPanel.ts","webpack://canvaspal/./src/utils/performanceLogger.ts","webpack://canvaspal/./src/utils/performanceMonitor.ts","webpack://canvaspal/webpack/bootstrap","webpack://canvaspal/./src/settings/settings.ts"],"sourcesContent":["export enum LogLevel {\n    DEBUG = 0,\n    INFO = 1,\n    WARN = 2,\n    ERROR = 3\n}\n\ninterface LogEntry {\n    timestamp: string;\n    level: LogLevel;\n    message: string;\n    data?: any;\n    stack?: string;\n}\n\nexport class Logger {\n    private static readonly MAX_LOGS = 1000;\n    private static instances: Map<string, Logger> = new Map();\n    private context: string;\n    private currentLevel: LogLevel;\n\n    public constructor(context: string, level: LogLevel = LogLevel.INFO) {\n        this.context = context;\n        this.currentLevel = level;\n        this.cleanOldLogs();\n    }\n\n    public static getInstance(context: string, level: LogLevel = LogLevel.INFO): Logger {\n        const key = `${context}-${level}`;\n        if (!this.instances.has(key)) {\n            this.instances.set(key, new Logger(context, level));\n        }\n        return this.instances.get(key)!;\n    }\n\n    setLevel(level: LogLevel): void {\n        this.currentLevel = level;\n    }\n\n    debug(message: string, data?: any): void {\n        this.log(LogLevel.DEBUG, message, data);\n    }\n\n    info(message: string, data?: any): void {\n        this.log(LogLevel.INFO, message, data);\n    }\n\n    warn(message: string, data?: any): void {\n        this.log(LogLevel.WARN, message, data);\n    }\n\n    error(message: string, data?: any): void {\n        this.log(LogLevel.ERROR, message, data);\n    }\n\n    public async log(level: LogLevel, message: string, ...args: any[]): Promise<void> {\n        if (level >= this.currentLevel) {\n            const timestamp = new Date().toISOString();\n            const prefix = this.getLogPrefix(level);\n            const formattedMessage = `[${timestamp}] ${prefix} [${this.context}] ${message}`;\n\n            if (args.length) {\n                const formattedData = this.formatLogData(args);\n                console.log(formattedMessage, formattedData);\n            } else {\n                console.log(formattedMessage);\n            }\n\n            const entry: LogEntry = {\n                timestamp,\n                level,\n                message,\n                data: args,\n                stack: Error().stack\n            };\n\n            this.saveLogs(entry);\n\n            if (level === LogLevel.ERROR) {\n                this.notifyError(entry);\n            }\n        }\n    }\n\n    private getLogPrefix(level: LogLevel): string {\n        switch (level) {\n            case LogLevel.DEBUG:\n                return '🔍 DEBUG:';\n            case LogLevel.INFO:\n                return '📢 INFO:';\n            case LogLevel.WARN:\n                return '⚠️ WARN:';\n            case LogLevel.ERROR:\n                return '❌ ERROR:';\n            default:\n                return '📢';\n        }\n    }\n\n    private formatLogData(data: any): any {\n        try {\n            if (Array.isArray(data)) {\n                return data.map(item => this.formatLogData(item));\n            }\n\n            if (data && typeof data === 'object') {\n                // Check if it's an Error object\n                if (data instanceof Error) {\n                    return {\n                        name: data.name,\n                        message: data.message,\n                        stack: data.stack\n                    };\n                }\n\n                // Handle regular objects\n                const formatted: Record<string, any> = {};\n                for (const [key, value] of Object.entries(data)) {\n                    formatted[key] = this.formatLogData(value);\n                }\n                return formatted;\n            }\n\n            return data;\n        } catch (error) {\n            return '[Error formatting log data]';\n        }\n    }\n\n    private async saveLogs(entry: LogEntry): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        logs.push(entry);\n\n        if (logs.length > Logger.MAX_LOGS) {\n            logs.splice(0, logs.length - Logger.MAX_LOGS);\n        }\n\n        await chrome.storage.local.set({ logs });\n    }\n\n    private async cleanOldLogs(): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n        const filteredLogs = logs.filter((log: LogEntry) => \n            new Date(log.timestamp) > thirtyDaysAgo\n        );\n\n        await chrome.storage.local.set({ logs: filteredLogs });\n    }\n\n    private notifyError(entry: LogEntry): void {\n        chrome.notifications.create({\n            type: 'basic',\n            iconUrl: '/dist/icons/icon128.png',\n            title: 'CanvasPal Error',\n            message: entry.message,\n            priority: 2\n        });\n    }\n\n    async getLogs(level?: LogLevel): Promise<LogEntry[]> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        return level ? logs.filter((log: LogEntry) => log.level === level) : logs;\n    }\n}\n\nexport const logger = Logger.getInstance('default');\n","import { Logger } from './logger';\nimport { DebugPanel } from './debugPanel';\nimport { DateDebugPanel } from './dateDebugPanel';\nimport { PerformanceMonitor } from './performanceMonitor';\nimport { PerformanceLogger } from './performanceLogger';\n\ninterface DebugConfig {\n    enabled: boolean;\n    logLevel: 'debug' | 'info' | 'warn' | 'error';\n    showDateDebug: boolean;\n    showAssignmentDebug: boolean;\n    showPriorityDebug: boolean;\n    showPerformanceMetrics: boolean;\n}\n\nexport class DebugManager {\n    private logger: Logger;\n    private mainPanel: DebugPanel;\n    private datePanel: DateDebugPanel;\n    private performanceMonitor: PerformanceMonitor;\n    private performanceLogger: PerformanceLogger;\n    private config: DebugConfig = {\n        enabled: false,\n        logLevel: 'info',\n        showDateDebug: false,\n        showAssignmentDebug: false,\n        showPriorityDebug: false,\n        showPerformanceMetrics: false\n    };\n\n    constructor() {\n        this.logger = new Logger('DebugManager');\n        this.mainPanel = new DebugPanel();\n        this.datePanel = new DateDebugPanel();\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.performanceLogger = new PerformanceLogger();\n        this.initializeKeyboardShortcuts();\n        this.initializePerformanceLogging();\n        this.loadDebugConfig();\n    }\n\n    private initializePerformanceLogging(): void {\n        // Log performance metrics every 5 minutes if debug mode is enabled\n        setInterval(async () => {\n            if (this.config.enabled && this.config.showPerformanceMetrics) {\n                const report = this.performanceMonitor.getReport();\n                // Filter out metrics with undefined duration and ensure proper type\n                const validMetrics = report.metrics.filter(m => m.duration !== undefined).map(m => ({\n                    name: m.name,\n                    duration: m.duration as number,\n                    metadata: m.metadata\n                }));\n                \n                await this.performanceLogger.logPerformance(validMetrics);\n                \n                if (this.config.showPerformanceMetrics) {\n                    await this.updatePerformanceAnalysis();\n                }\n            }\n        }, 5 * 60 * 1000);\n    }\n\n    private async updatePerformanceAnalysis(): Promise<void> {\n        const analysis = await this.performanceLogger.getPerformanceAnalysis();\n        this.mainPanel.updatePerformanceAnalysis(analysis);\n    }\n\n    private initializeKeyboardShortcuts(): void {\n        document.addEventListener('keydown', (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey) {\n                switch (e.key) {\n                    case '`': // Toggle all debug features\n                        e.preventDefault();\n                        this.toggleDebugMode();\n                        break;\n                    case 'D': // Main debug panel\n                        e.preventDefault();\n                        this.mainPanel.toggleVisibility();\n                        break;\n                    case 'T': // Date debug panel\n                        e.preventDefault();\n                        this.datePanel.toggleVisibility();\n                        break;\n                    case 'P': // Performance metrics\n                        e.preventDefault();\n                        this.togglePerformanceMetrics();\n                        break;\n                }\n            }\n        });\n    }\n\n    private async togglePerformanceMetrics(): Promise<void> {\n        this.config.showPerformanceMetrics = !this.config.showPerformanceMetrics;\n        if (this.config.showPerformanceMetrics) {\n            await this.updatePerformanceAnalysis();\n        }\n        this.saveDebugConfig();\n    }\n\n    private async loadDebugConfig(): Promise<void> {\n        try {\n            const result = await chrome.storage.sync.get('debugConfig');\n            if (result.debugConfig) {\n                this.config = { ...this.config, ...result.debugConfig };\n                this.applyConfig();\n            }\n        } catch (error) {\n            this.logger.error('Error loading debug config:', error);\n        }\n    }\n\n    private async saveDebugConfig(): Promise<void> {\n        try {\n            await chrome.storage.sync.set({ debugConfig: this.config });\n        } catch (error) {\n            this.logger.error('Error saving debug config:', error);\n        }\n    }\n\n    private applyConfig(): void {\n        if (!this.config.enabled) {\n            this.disableAllPanels();\n            return;\n        }\n\n        this.logger.setLevel(this.getLogLevel());\n        \n        if (this.config.showDateDebug) {\n            this.datePanel.toggleVisibility();\n        }\n        \n        if (this.config.showAssignmentDebug || this.config.showPriorityDebug) {\n            this.mainPanel.toggleVisibility();\n        }\n    }\n\n    private disableAllPanels(): void {\n        const panels = document.querySelectorAll('[id$=\"-debug-panel\"]');\n        panels.forEach(panel => {\n            (panel as HTMLElement).style.display = 'none';\n        });\n    }\n\n    public toggleDebugMode(): void {\n        this.config.enabled = !this.config.enabled;\n        this.applyConfig();\n        this.saveDebugConfig();\n\n        this.logger.info(`Debug mode ${this.config.enabled ? 'enabled' : 'disabled'}`);\n    }\n\n    public updateDebugConfig(newConfig: Partial<DebugConfig>): void {\n        this.config = { ...this.config, ...newConfig };\n        this.applyConfig();\n        this.saveDebugConfig();\n    }\n\n    private getLogLevel(): number {\n        switch (this.config.logLevel) {\n            case 'debug': return 0;\n            case 'info': return 1;\n            case 'warn': return 2;\n            case 'error': return 3;\n            default: return 1;\n        }\n    }\n\n    public getMainPanel(): DebugPanel {\n        return this.mainPanel;\n    }\n\n    public getDatePanel(): DateDebugPanel {\n        return this.datePanel;\n    }\n\n    public isDebugEnabled(): boolean {\n        return this.config.enabled;\n    }\n\n    public getConfig(): DebugConfig {\n        return { ...this.config };\n    }\n\n    public async clearPerformanceLogs(): Promise<void> {\n        await this.performanceLogger.clearLogs();\n        if (this.config.showPerformanceMetrics) {\n            await this.updatePerformanceAnalysis();\n        }\n    }\n\n    public async getPerformanceAnalysis() {\n        return this.performanceLogger.getPerformanceAnalysis();\n    }\n}","import { Logger } from './logger';\n\ninterface DateDebugInfo {\n    totalDates: number;\n    types: {\n        due: number;\n        availability: number;\n        unlock: number;\n        unknown: number;\n    };\n    detections: {\n        element: string;\n        text: string;\n        type: string;\n        date: string;\n    }[];\n}\n\nexport class DateDebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n\n    constructor() {\n        this.logger = new Logger('DateDebugPanel');\n        this.createPanel();\n    }\n\n    private createPanel(): void {\n        this.panel = document.createElement('div');\n        this.panel.id = 'date-debug-panel';\n        this.panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            left: 20px;\n            width: 300px;\n            max-height: 400px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 9999;\n            overflow-y: auto;\n            box-shadow: 0 0 10px rgba(0,0,0,0.5);\n            display: none;\n        `;\n\n        const header = document.createElement('div');\n        header.innerHTML = `\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;\">\n                <span style=\"color: #ffd700; font-weight: bold;\">📅 Date Detection Debug</span>\n                <button id=\"date-debug-close\" style=\"background: none; border: none; color: white; cursor: pointer;\">✕</button>\n            </div>\n        `;\n        this.panel.appendChild(header);\n\n        const content = document.createElement('div');\n        content.id = 'date-debug-content';\n        this.panel.appendChild(content);\n\n        document.body.appendChild(this.panel);\n\n        document.getElementById('date-debug-close')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n\n        // Add keyboard shortcut (Ctrl/Cmd + Shift + T)\n        document.addEventListener('keydown', (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            const isVisible = this.panel.style.display === 'block';\n            this.panel.style.display = isVisible ? 'none' : 'block';\n        }\n    }\n\n    public updateDebugInfo(info: DateDebugInfo): void {\n        const content = document.getElementById('date-debug-content');\n        if (!content) return;\n\n        content.innerHTML = `\n            <div class=\"date-stats\" style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${info.totalDates} date${info.totalDates !== 1 ? 's' : ''}\n                </div>\n                ${this.renderTypeDistribution(info.types)}\n            </div>\n            <div class=\"date-detections\">\n                <div style=\"color: #ffd700; margin-bottom: 8px;\">Detected Dates:</div>\n                ${this.renderDetections(info.detections)}\n            </div>\n        `;\n    }\n\n    private renderTypeDistribution(types: DateDebugInfo['types']): string {\n        const colors = {\n            due: '#ff6b6b',\n            availability: '#4CAF50',\n            unlock: '#2196F3',\n            unknown: '#9e9e9e'\n        };\n\n        return Object.entries(types)\n            .map(([type, count]) => `\n                <div style=\"margin-left: 10px; color: ${colors[type as keyof typeof colors]};\">\n                    ${type.charAt(0).toUpperCase() + type.slice(1)}: ${count}\n                </div>\n            `).join('');\n    }\n\n    private renderDetections(detections: DateDebugInfo['detections']): string {\n        return detections\n            .map(detection => `\n                <div style=\"margin: 8px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px;\">\n                    <div style=\"margin-bottom: 4px; color: #90EE90;\">\n                        ${detection.text}\n                    </div>\n                    <div style=\"font-size: 11px; color: #ADD8E6;\">\n                        Type: ${detection.type}\n                    </div>\n                    <div style=\"font-size: 11px; color: #DDA0DD;\">\n                        Parsed: ${detection.date}\n                    </div>\n                    <div style=\"font-size: 11px; color: #FFB6C1;\">\n                        Element: ${detection.element}\n                    </div>\n                </div>\n            `).join('');\n    }\n\n    public logDateDetection(message: string, data?: any): void {\n        this.logger.debug(message, data);\n    }\n}","import { Assignment } from '../types/models';\nimport { Logger } from './logger';\nimport { PerformanceMonitor } from './performanceMonitor';\n\nexport class DebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n    private performanceMonitor: PerformanceMonitor;\n    private isVisible: boolean = false;\n\n    constructor() {\n        this.logger = new Logger('DebugPanel');\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.createPanel();\n        this.initializeKeyboardShortcut();\n    }\n\n    private createPanel(): void {\n        this.panel = document.createElement('div');\n        this.panel.id = 'canvaspal-debug-panel';\n        this.panel.innerHTML = `\n            <div class=\"debug-panel-header\">\n                <span>🔍 CanvasPal Debug</span>\n                <div class=\"debug-panel-controls\">\n                    <button id=\"clear-metrics\" title=\"Clear Performance Metrics\">🗑️</button>\n                    <button id=\"canvaspal-debug-close\">✕</button>\n                </div>\n            </div>\n            <div class=\"debug-panel-content\">\n                <div id=\"performance-metrics\"></div>\n                <div id=\"assignment-info\"></div>\n            </div>\n        `;\n\n        // Apply styles\n        this.panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            width: 350px;\n            max-height: 500px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 9999;\n            overflow-y: auto;\n            box-shadow: 0 0 10px rgba(0,0,0,0.5);\n            display: none;\n        `;\n\n        // Add button styles\n        const style = document.createElement('style');\n        style.textContent = `\n            .debug-panel-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 10px;\n                padding-bottom: 10px;\n                border-bottom: 1px solid rgba(255,255,255,0.1);\n            }\n\n            .debug-panel-controls {\n                display: flex;\n                gap: 8px;\n            }\n\n            .debug-panel-controls button {\n                background: none;\n                border: none;\n                color: white;\n                cursor: pointer;\n                padding: 4px;\n                border-radius: 4px;\n                transition: background 0.2s;\n            }\n\n            .debug-panel-controls button:hover {\n                background: rgba(255,255,255,0.1);\n            }\n\n            .performance-section {\n                margin: 10px 0;\n                padding: 8px;\n                background: rgba(255,255,255,0.05);\n                border-radius: 4px;\n            }\n\n            .metric-item {\n                margin: 4px 0;\n                display: flex;\n                justify-content: space-between;\n            }\n\n            .metric-value {\n                color: #90EE90;\n            }\n\n            .slow-metric {\n                color: #ff6b6b;\n            }\n\n            .normal-metric {\n                color: #ffd700;\n            }\n\n            .fast-metric {\n                color: #90EE90;\n            }\n        `;\n        document.head.appendChild(style);\n\n        document.body.appendChild(this.panel);\n\n        // Add event listeners\n        document.getElementById('canvaspal-debug-close')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n\n        document.getElementById('clear-metrics')?.addEventListener('click', () => {\n            this.performanceMonitor.clear();\n            this.updatePerformanceMetrics();\n        });\n    }\n\n    private initializeKeyboardShortcut(): void {\n        document.addEventListener('keydown', (e) => {\n            // Ctrl/Cmd + Shift + D to toggle debug panel\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'D') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            this.isVisible = !this.isVisible;\n            this.panel.style.display = this.isVisible ? 'block' : 'none';\n            this.logger.debug(`Debug panel ${this.isVisible ? 'shown' : 'hidden'}`);\n        }\n    }\n\n    private updatePerformanceMetrics(): void {\n        const metricsContainer = document.getElementById('performance-metrics');\n        if (!metricsContainer) return;\n\n        const report = this.performanceMonitor.getReport();\n        \n        metricsContainer.innerHTML = `\n            <div class=\"performance-section\">\n                <h3>Performance Summary</h3>\n                <div class=\"metric-item\">\n                    <span>Total Duration:</span>\n                    <span class=\"metric-value\">${report.summary.totalDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Average Duration:</span>\n                    <span class=\"metric-value\">${report.summary.averageDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Slowest Operation:</span>\n                    <span class=\"slow-metric\">${report.summary.slowestOperation.name} (${report.summary.slowestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Fastest Operation:</span>\n                    <span class=\"fast-metric\">${report.summary.fastestOperation.name} (${report.summary.fastestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n            </div>\n            <div class=\"performance-section\">\n                <h3>Recent Operations</h3>\n                ${report.metrics.slice(-5).map(metric => `\n                    <div class=\"metric-item\">\n                        <span>${metric.name}</span>\n                        <span class=\"${this.getMetricSpeedClass(metric.duration || 0)}\">${metric.duration?.toFixed(2)}ms</span>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private getMetricSpeedClass(duration: number): string {\n        if (duration > 100) return 'slow-metric';\n        if (duration > 50) return 'normal-metric';\n        return 'fast-metric';\n    }\n\n    public updateAssignmentInfo(assignments: Assignment[]): void {\n        const container = document.getElementById('assignment-info');\n        if (!container) return;\n\n        const typeCounts = this.getAssignmentTypeCounts(assignments);\n        const priorityRanges = this.getPriorityRanges(assignments);\n\n        container.innerHTML = `\n            <div style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${assignments.length} assignments\n                </div>\n                ${this.renderTypeCounts(typeCounts)}\n                ${this.renderPriorityDistribution(priorityRanges)}\n            </div>\n            ${this.renderAssignmentList(assignments)}\n        `;\n\n        // Update performance metrics\n        this.updatePerformanceMetrics();\n    }\n\n    private getAssignmentTypeCounts(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            acc[assignment.type] = (acc[assignment.type] || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private getPriorityRanges(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            if (assignment.priorityScore >= 0.7) acc.high = (acc.high || 0) + 1;\n            else if (assignment.priorityScore >= 0.4) acc.medium = (acc.medium || 0) + 1;\n            else acc.low = (acc.low || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private renderTypeCounts(counts: Record<string, number>): string {\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Assignment Types:</div>\n                ${Object.entries(counts).map(([type, count]) => `\n                    <div style=\"margin-left: 10px; color: #90EE90;\">\n                        ${type}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderPriorityDistribution(ranges: Record<string, number>): string {\n        const colors = {\n            high: '#ff6b6b',\n            medium: '#ffd700',\n            low: '#90EE90'\n        };\n\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Priority Distribution:</div>\n                ${Object.entries(ranges).map(([range, count]) => `\n                    <div style=\"margin-left: 10px; color: ${colors[range as keyof typeof colors]};\">\n                        ${range}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentList(assignments: Assignment[]): string {\n        return `\n            <div style=\"margin-top: 15px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Detailed Assignments:</div>\n                ${assignments.map(assignment => this.renderAssignmentDetail(assignment)).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentDetail(assignment: Assignment): string {\n        const priorityColor = assignment.priorityScore >= 0.7 ? '#ff6b6b' :\n                            assignment.priorityScore >= 0.4 ? '#ffd700' : '#90EE90';\n\n        return `\n            <div style=\"margin: 8px 0; padding: 8px; border-left: 2px solid ${priorityColor}; background: rgba(255,255,255,0.1);\">\n                <div style=\"margin-bottom: 4px;\">📚 ${assignment.title}</div>\n                <div style=\"color: #90EE90; margin-bottom: 4px;\">\n                    ${assignment.points ? `📝 ${assignment.points}/${assignment.maxPoints} points` : 'No points data'}\n                </div>\n                <div style=\"color: #ADD8E6; font-size: 11px;\">\n                    ⏰ Due: ${assignment.dueDate.toLocaleDateString()}\n                </div>\n                <div style=\"color: #DDA0DD; font-size: 11px;\">\n                    📚 Course: ${assignment.course}\n                </div>\n                <div style=\"color: ${priorityColor}; font-size: 11px; margin-top: 4px;\">\n                    ⚡ Priority: ${Math.round(assignment.priorityScore * 100)}%\n                </div>\n            </div>\n        `;\n    }\n\n    public logDetectionEvent(message: string, data?: any): void {\n        this.logger.debug(message, data);\n        // Could add visual indication of new events in the panel\n    }\n\n    public updatePerformanceAnalysis(analysis: any): void {\n        // Implementation\n    }\n}","import { Logger } from './logger';\n\ninterface PerformanceLog {\n    timestamp: number;\n    metrics: {\n        name: string;\n        duration: number;\n        metadata?: Record<string, any>;\n    }[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: string;\n        fastestOperation: string;\n    };\n}\n\ntype Trend = 'improving' | 'degrading' | 'stable';\n\ninterface PerformanceMetric {\n    name: string;\n    duration: number;\n    metadata?: Record<string, any>;\n    trend?: Trend;\n}\n\nexport class PerformanceLogger {\n    private logger: Logger;\n    private static readonly MAX_LOGS = 100;\n    private static readonly STORAGE_KEY = 'performanceLogs';\n\n    constructor() {\n        this.logger = new Logger('PerformanceLogger');\n    }\n\n    public async logPerformance(metrics: { name: string; duration: number; metadata?: Record<string, any> }[]): Promise<void> {\n        try {\n            const logs = await this.getLogs();\n            const log: PerformanceLog = {\n                timestamp: Date.now(),\n                metrics,\n                summary: this.calculateSummary(metrics)\n            };\n            \n            logs.unshift(log);\n            \n            // Keep only the most recent logs\n            while (logs.length > PerformanceLogger.MAX_LOGS) {\n                logs.pop();\n            }\n            await chrome.storage.local.set({ [PerformanceLogger.STORAGE_KEY]: logs });\n            this.logger.debug('Performance log saved:', log);\n        } catch (error) {\n            this.logger.error('Error saving performance log:', error);\n        }\n    }\n\n    private calculateSummary(metrics: { name: string; duration: number }[]): PerformanceLog['summary'] {\n        if (metrics.length === 0) {\n            return {\n                totalDuration: 0,\n                averageDuration: 0,\n                slowestOperation: '',\n                fastestOperation: ''\n            };\n        }\n\n        const totalDuration = metrics.reduce((sum, m) => sum + m.duration, 0);\n        const sortedMetrics = [...metrics].sort((a, b) => b.duration - a.duration);\n\n        return {\n            totalDuration,\n            averageDuration: totalDuration / metrics.length,\n            slowestOperation: sortedMetrics[0].name,\n            fastestOperation: sortedMetrics[sortedMetrics.length - 1].name\n        };\n    }\n\n    public async getLogs(): Promise<PerformanceLog[]> {\n        try {\n            const result = await chrome.storage.local.get(PerformanceLogger.STORAGE_KEY);\n            return result[PerformanceLogger.STORAGE_KEY] || [];\n        } catch (error) {\n            this.logger.error('Error retrieving performance logs:', error);\n            return [];\n        }\n    }\n\n    public async getPerformanceAnalysis(): Promise<{\n        trends: {\n            operation: string;\n            averageDuration: number;\n            trend: Trend;\n            percentageChange: number;\n        }[];\n        hotspots: {\n            operation: string;\n            frequency: number;\n            averageDuration: number;\n        }[];\n        recommendations: string[];\n    }> {\n        const logs = await this.getLogs();\n        if (logs.length < 2) {\n            return {\n                trends: [],\n                hotspots: [],\n                recommendations: ['Not enough data for analysis']\n            };\n        }\n\n        // Group metrics by operation name\n        const operationMetrics: Record<string, number[]> = {};\n        logs.forEach(log => {\n            log.metrics.forEach(metric => {\n                if (!operationMetrics[metric.name]) {\n                    operationMetrics[metric.name] = [];\n                }\n                operationMetrics[metric.name].push(metric.duration);\n            });\n        });\n\n        // Calculate trends\n        const trends = Object.entries(operationMetrics).map(([operation, durations]) => {\n            const recent = durations.slice(0, Math.floor(durations.length / 2));\n            const older = durations.slice(Math.floor(durations.length / 2));\n            \n            const recentAvg = this.calculateAverage(recent);\n            const olderAvg = this.calculateAverage(older);\n            const percentageChange = ((recentAvg - olderAvg) / olderAvg) * 100;\n\n            return {\n                operation,\n                averageDuration: recentAvg,\n                trend: this.calculateTrend(percentageChange),\n                percentageChange\n            };\n        });\n\n        // Identify hotspots\n        const hotspots = Object.entries(operationMetrics)\n            .map(([operation, durations]) => ({\n                operation,\n                frequency: durations.length,\n                averageDuration: this.calculateAverage(durations)\n            }))\n            .filter(h => h.averageDuration > 100 || h.frequency > logs.length * 0.5)\n            .sort((a, b) => b.averageDuration * b.frequency - a.averageDuration * a.frequency);\n\n        // Generate recommendations\n        const recommendations = this.generateRecommendations(trends, hotspots);\n\n        return { trends, hotspots, recommendations };\n    }\n\n    private calculateAverage(numbers: number[]): number {\n        return numbers.reduce((sum, n) => sum + n, 0) / numbers.length;\n    }\n\n    private calculateTrend(value: number): Trend {\n        if (value < -5) return 'improving';\n        if (value > 5) return 'degrading';\n        return 'stable';\n    }\n\n    private generateRecommendations(\n        trends: { operation: string; trend: string; percentageChange: number }[],\n        hotspots: { operation: string; frequency: number; averageDuration: number }[]\n    ): string[] {\n        const recommendations: string[] = [];\n\n        // Check for degrading performance\n        const degradingOps = trends.filter(t => t.trend === 'degrading');\n        if (degradingOps.length > 0) {\n            recommendations.push(\n                `Performance degradation detected in: ${degradingOps\n                    .map(op => `${op.operation} (${op.percentageChange.toFixed(1)}% slower)`)\n                    .join(', ')}`\n            );\n        }\n\n        // Check for frequent slow operations\n        hotspots.forEach(hotspot => {\n            if (hotspot.averageDuration > 200) {\n                recommendations.push(\n                    `Consider optimizing ${hotspot.operation} (avg: ${hotspot.averageDuration.toFixed(1)}ms, ` +\n                    `called ${hotspot.frequency} times)`\n                );\n            }\n        });\n\n        // Add general recommendations\n        if (hotspots.length > 3) {\n            recommendations.push('Consider reducing the number of expensive operations running in parallel');\n        }\n\n        if (recommendations.length === 0) {\n            recommendations.push('Performance is within acceptable ranges');\n        }\n\n        return recommendations;\n    }\n\n    public async clearLogs(): Promise<void> {\n        try {\n            await chrome.storage.local.remove(PerformanceLogger.STORAGE_KEY);\n            this.logger.info('Performance logs cleared');\n        } catch (error) {\n            this.logger.error('Error clearing performance logs:', error);\n        }\n    }\n}","import { Logger } from './logger';\n\ninterface PerformanceMetric {\n    name: string;\n    startTime: number;\n    endTime?: number;\n    duration?: number;\n    metadata?: Record<string, any>;\n}\n\ninterface PerformanceReport {\n    metrics: PerformanceMetric[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: {\n            name: string;\n            duration: number;\n        };\n        fastestOperation: {\n            name: string;\n            duration: number;\n        };\n    };\n}\n\nexport class PerformanceMonitor {\n    private metrics: PerformanceMetric[] = [];\n    private logger: Logger;\n    private static instance: PerformanceMonitor;\n\n    private constructor() {\n        this.logger = new Logger('PerformanceMonitor');\n    }\n\n    public static getInstance(): PerformanceMonitor {\n        if (!PerformanceMonitor.instance) {\n            PerformanceMonitor.instance = new PerformanceMonitor();\n        }\n        return PerformanceMonitor.instance;\n    }\n\n    public startMetric(name: string, metadata?: Record<string, any>): string {\n        const id = `${name}_${Date.now()}`;\n        this.metrics.push({\n            name,\n            startTime: performance.now(),\n            metadata\n        });\n        return id;\n    }\n\n    public endMetric(name: string): void {\n        const metric = this.metrics.find(m => m.name === name && !m.endTime);\n        if (metric) {\n            metric.endTime = performance.now();\n            metric.duration = metric.endTime - metric.startTime;\n            this.logger.debug(`Performance metric - ${name}:`, {\n                duration: `${metric.duration.toFixed(2)}ms`,\n                metadata: metric.metadata\n            });\n        }\n    }\n\n    public getReport(): PerformanceReport {\n        const completedMetrics = this.metrics.filter(m => m.duration !== undefined);\n        \n        if (completedMetrics.length === 0) {\n            return {\n                metrics: [],\n                summary: {\n                    totalDuration: 0,\n                    averageDuration: 0,\n                    slowestOperation: { name: 'none', duration: 0 },\n                    fastestOperation: { name: 'none', duration: 0 }\n                }\n            };\n        }\n\n        const totalDuration = completedMetrics.reduce((sum, m) => sum + (m.duration || 0), 0);\n        const averageDuration = totalDuration / completedMetrics.length;\n\n        const sorted = [...completedMetrics].sort((a, b) => \n            (b.duration || 0) - (a.duration || 0));\n\n        return {\n            metrics: completedMetrics,\n            summary: {\n                totalDuration,\n                averageDuration,\n                slowestOperation: {\n                    name: sorted[0].name,\n                    duration: sorted[0].duration || 0\n                },\n                fastestOperation: {\n                    name: sorted[sorted.length - 1].name,\n                    duration: sorted[sorted.length - 1].duration || 0\n                }\n            }\n        };\n    }\n\n    public clear(): void {\n        this.metrics = [];\n    }\n\n    public monitorAsync<T>(name: string, fn: () => Promise<T>, metadata?: Record<string, any>): Promise<T> {\n        this.startMetric(name, metadata);\n        return fn().finally(() => this.endMetric(name));\n    }\n\n    public monitor<T>(name: string, fn: () => T, metadata?: Record<string, any>): T {\n        this.startMetric(name, metadata);\n        const result = fn();\n        this.endMetric(name);\n        return result;\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Settings } from '../types/models';\nimport { Logger } from '../utils/logger';\nimport { DebugManager } from '../utils/debugManager';\n\nexport class SettingsManager {\n    private logger: Logger;\n    private debugManager: DebugManager;\n    private defaultSettings: Settings = {\n        priorityWeights: {\n            GRADE_IMPACT: 0.4,\n            COURSE_GRADE: 0.3,\n            DUE_DATE: 0.3\n        },\n        typeWeights: {\n            quiz: 1.2,\n            assignment: 1.0,\n            discussion: 0.8,\n            announcement: 0.5\n        },\n        displayOptions: {\n            showCourseNames: true,\n            showGradeImpact: true,\n            showPriorityScores: true,\n            highlightOverdue: true\n        },\n        refreshInterval: 30,\n        debugSettings: {\n            enabled: false,\n            logLevel: 'info',\n            showDateDebug: false,\n            showAssignmentDebug: false,\n            showPriorityDebug: false\n        },\n        icalUrl: ''\n    };\n\n    constructor() {\n        this.logger = new Logger('SettingsManager');\n        this.debugManager = new DebugManager();\n        this.initializeEventListeners();\n        this.loadSettings();\n    }\n\n    private initializeEventListeners(): void {\n        document.getElementById('saveSettings')?.addEventListener('click', () => this.saveSettings());\n        document.getElementById('resetSettings')?.addEventListener('click', () => this.resetSettings());\n\n        // Priority weight sliders\n        ['gradeImpact', 'courseGrade', 'dueDate'].forEach(id => {\n            const slider = document.getElementById(id) as HTMLInputElement;\n            const valueDisplay = document.getElementById(`${id}Value`);\n            \n            if (slider && valueDisplay) {\n                slider.addEventListener('input', () => {\n                    valueDisplay.textContent = `${slider.value}%`;\n                    this.validateWeights();\n                });\n            }\n        });\n\n        // Debug settings\n        document.getElementById('debugEnabled')?.addEventListener('change', (e) => {\n            const enabled = (e.target as HTMLInputElement).checked;\n            this.updateDebugSettings({ enabled });\n        });\n\n        document.getElementById('logLevel')?.addEventListener('change', (e) => {\n            const level = (e.target as HTMLSelectElement).value as Settings['debugSettings']['logLevel'];\n            this.updateDebugSettings({ logLevel: level });\n        });\n\n        ['showDateDebug', 'showAssignmentDebug', 'showPriorityDebug'].forEach(id => {\n            document.getElementById(id)?.addEventListener('change', (e) => {\n                const value = (e.target as HTMLInputElement).checked;\n                this.updateDebugSettings({ [id]: value });\n            });\n        });\n    }\n\n    private updateDebugSettings(settings: Partial<Settings['debugSettings']>): void {\n        this.debugManager.updateDebugConfig(settings);\n        this.saveSettings();\n    }\n\n    private async loadSettings(): Promise<void> {\n        try {\n            const result = await chrome.storage.sync.get('settings');\n            const settings: Settings = result.settings || this.defaultSettings;\n            this.applySettingsToForm(settings);\n        } catch (error) {\n            this.logger.error('Error loading settings:', error);\n            this.applySettingsToForm(this.defaultSettings);\n        }\n    }\n\n    private applySettingsToForm(settings: Settings): void {\n        // Priority weights\n        (document.getElementById('gradeImpact') as HTMLInputElement).value = \n            (settings.priorityWeights.GRADE_IMPACT * 100).toString();\n        (document.getElementById('courseGrade') as HTMLInputElement).value = \n            (settings.priorityWeights.COURSE_GRADE * 100).toString();\n        (document.getElementById('dueDate') as HTMLInputElement).value = \n            (settings.priorityWeights.DUE_DATE * 100).toString();\n\n        // Type weights\n        (document.getElementById('quizWeight') as HTMLInputElement).value = \n            settings.typeWeights.quiz.toString();\n        (document.getElementById('assignmentWeight') as HTMLInputElement).value = \n            settings.typeWeights.assignment.toString();\n        (document.getElementById('discussionWeight') as HTMLInputElement).value = \n            settings.typeWeights.discussion.toString();\n        (document.getElementById('announcementWeight') as HTMLInputElement).value = \n            settings.typeWeights.announcement.toString();\n\n        // Display options\n        (document.getElementById('showCourseNames') as HTMLInputElement).checked = \n            settings.displayOptions.showCourseNames;\n        (document.getElementById('showGradeImpact') as HTMLInputElement).checked = \n            settings.displayOptions.showGradeImpact;\n        (document.getElementById('showPriorityScores') as HTMLInputElement).checked = \n            settings.displayOptions.showPriorityScores;\n        (document.getElementById('highlightOverdue') as HTMLInputElement).checked = \n            settings.displayOptions.highlightOverdue;\n\n        // Refresh interval\n        (document.getElementById('refreshInterval') as HTMLInputElement).value = \n            settings.refreshInterval.toString();\n\n        // iCal URL\n        (document.getElementById('icalUrl') as HTMLInputElement).value = \n            settings.icalUrl;\n\n        // Apply debug settings\n        const debugSettings = settings.debugSettings;\n        (document.getElementById('debugEnabled') as HTMLInputElement).checked = \n            debugSettings.enabled;\n        (document.getElementById('logLevel') as HTMLSelectElement).value = \n            debugSettings.logLevel;\n        (document.getElementById('showDateDebug') as HTMLInputElement).checked = \n            debugSettings.showDateDebug;\n        (document.getElementById('showAssignmentDebug') as HTMLInputElement).checked = \n            debugSettings.showAssignmentDebug;\n        (document.getElementById('showPriorityDebug') as HTMLInputElement).checked = \n            debugSettings.showPriorityDebug;\n\n        // Update displays\n        this.updateWeightDisplays();\n        this.validateWeights();\n    }\n\n    private async saveSettings(): Promise<void> {\n        if (!this.validateWeights()) {\n            return;\n        }\n\n        try {\n            const settings: Settings = {\n                priorityWeights: {\n                    GRADE_IMPACT: parseInt((document.getElementById('gradeImpact') as HTMLInputElement).value) / 100,\n                    COURSE_GRADE: parseInt((document.getElementById('courseGrade') as HTMLInputElement).value) / 100,\n                    DUE_DATE: parseInt((document.getElementById('dueDate') as HTMLInputElement).value) / 100\n                },\n                typeWeights: {\n                    quiz: parseFloat((document.getElementById('quizWeight') as HTMLInputElement).value),\n                    assignment: parseFloat((document.getElementById('assignmentWeight') as HTMLInputElement).value),\n                    discussion: parseFloat((document.getElementById('discussionWeight') as HTMLInputElement).value),\n                    announcement: parseFloat((document.getElementById('announcementWeight') as HTMLInputElement).value)\n                },\n                displayOptions: {\n                    showCourseNames: (document.getElementById('showCourseNames') as HTMLInputElement).checked,\n                    showGradeImpact: (document.getElementById('showGradeImpact') as HTMLInputElement).checked,\n                    showPriorityScores: (document.getElementById('showPriorityScores') as HTMLInputElement).checked,\n                    highlightOverdue: (document.getElementById('highlightOverdue') as HTMLInputElement).checked\n                },\n                refreshInterval: parseInt((document.getElementById('refreshInterval') as HTMLInputElement).value),\n                debugSettings: {\n                    enabled: (document.getElementById('debugEnabled') as HTMLInputElement).checked,\n                    logLevel: (document.getElementById('logLevel') as HTMLSelectElement).value as Settings['debugSettings']['logLevel'],\n                    showDateDebug: (document.getElementById('showDateDebug') as HTMLInputElement).checked,\n                    showAssignmentDebug: (document.getElementById('showAssignmentDebug') as HTMLInputElement).checked,\n                    showPriorityDebug: (document.getElementById('showPriorityDebug') as HTMLInputElement).checked\n                },\n                icalUrl: (document.getElementById('icalUrl') as HTMLInputElement).value\n            };\n\n            await chrome.storage.sync.set({ settings });\n            await this.notifySettingsChanged(settings);\n            this.showSaveSuccess();\n        } catch (error) {\n            this.logger.error('Error saving settings:', error);\n            this.showSaveError();\n        }\n    }\n\n    private async resetSettings(): Promise<void> {\n        try {\n            await chrome.storage.sync.set({ settings: this.defaultSettings });\n            this.applySettingsToForm(this.defaultSettings);\n            await this.notifySettingsChanged(this.defaultSettings);\n            this.showSaveSuccess();\n        } catch (error) {\n            this.logger.error('Error resetting settings:', error);\n            this.showSaveError();\n        }\n    }\n\n    private validateWeights(): boolean {\n        const gradeImpact = parseInt((document.getElementById('gradeImpact') as HTMLInputElement).value);\n        const courseGrade = parseInt((document.getElementById('courseGrade') as HTMLInputElement).value);\n        const dueDate = parseInt((document.getElementById('dueDate') as HTMLInputElement).value);\n        const totalWeight = gradeImpact + courseGrade + dueDate;\n        \n        const validation = document.getElementById('weightValidation');\n        if (validation) {\n            if (totalWeight !== 100) {\n                validation.textContent = `Total weight must be 100% (currently ${totalWeight}%)`;\n                validation.className = 'weight-validation error';\n                return false;\n            } else {\n                validation.textContent = '✓ Weights are valid';\n                validation.className = 'weight-validation success';\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private updateWeightDisplays(): void {\n        ['gradeImpact', 'courseGrade', 'dueDate'].forEach(id => {\n            const value = (document.getElementById(id) as HTMLInputElement).value;\n            const display = document.getElementById(`${id}Value`);\n            if (display) {\n                display.textContent = `${value}%`;\n            }\n        });\n    }\n\n    private async notifySettingsChanged(settings: Settings): Promise<void> {\n        try {\n            // Notify background script\n            await chrome.runtime.sendMessage({\n                type: 'SETTINGS_UPDATED',\n                settings\n            });\n\n            // Notify all tabs\n            const tabs = await chrome.tabs.query({\n                url: \"*://*.instructure.com/*\"\n            });\n            \n            for (const tab of tabs) {\n                if (tab.id) {\n                    try {\n                        await chrome.tabs.sendMessage(tab.id, {\n                            type: 'SETTINGS_UPDATED',\n                            settings\n                        });\n                    } catch (e) {\n                        // Ignore errors for tabs that don't have our content script\n                        this.logger.debug(`Could not notify tab ${tab.id}: ${e}`);\n                    }\n                }\n            }\n\n            this.logger.info('Settings updated and propagated');\n        } catch (error) {\n            this.logger.error('Error notifying settings change:', error);\n            throw error; // Re-throw to handle in the save function\n        }\n    }\n\n    private showSaveSuccess(): void {\n        const saveBtn = document.getElementById('saveSettings');\n        if (saveBtn) {\n            const originalText = saveBtn.textContent;\n            saveBtn.textContent = '✓ Saved';\n            saveBtn.classList.add('success');\n            setTimeout(() => {\n                if (saveBtn) {\n                    saveBtn.textContent = originalText;\n                    saveBtn.classList.remove('success');\n                }\n            }, 2000);\n        }\n    }\n\n    private showSaveError(): void {\n        const saveBtn = document.getElementById('saveSettings');\n        if (saveBtn) {\n            const originalText = saveBtn.textContent;\n            saveBtn.textContent = '✗ Error';\n            saveBtn.classList.add('error');\n            setTimeout(() => {\n                if (saveBtn) {\n                    saveBtn.textContent = originalText;\n                    saveBtn.classList.remove('error');\n                }\n            }, 2000);\n        }\n    }\n}\n\n// Initialize settings manager\nwindow.addEventListener('DOMContentLoaded', () => {\n    new SettingsManager();\n});\n"],"names":["LogLevel","Logger","context","level","INFO","this","currentLevel","cleanOldLogs","getInstance","key","instances","has","set","get","setLevel","debug","message","data","log","DEBUG","info","warn","WARN","error","ERROR","args","timestamp","Date","toISOString","formattedMessage","getLogPrefix","length","formattedData","formatLogData","console","entry","stack","Error","saveLogs","notifyError","Array","isArray","map","item","name","formatted","value","Object","entries","logs","chrome","storage","local","push","MAX_LOGS","splice","thirtyDaysAgo","setDate","getDate","filteredLogs","filter","notifications","create","type","iconUrl","title","priority","getLogs","Map","logger","constructor","config","enabled","logLevel","showDateDebug","showAssignmentDebug","showPriorityDebug","showPerformanceMetrics","mainPanel","DebugPanel","datePanel","DateDebugPanel","performanceMonitor","PerformanceMonitor","performanceLogger","PerformanceLogger","initializeKeyboardShortcuts","initializePerformanceLogging","loadDebugConfig","setInterval","async","validMetrics","getReport","metrics","m","undefined","duration","metadata","logPerformance","updatePerformanceAnalysis","analysis","getPerformanceAnalysis","document","addEventListener","e","ctrlKey","metaKey","shiftKey","preventDefault","toggleDebugMode","toggleVisibility","togglePerformanceMetrics","saveDebugConfig","result","sync","debugConfig","applyConfig","getLogLevel","disableAllPanels","querySelectorAll","forEach","panel","style","display","updateDebugConfig","newConfig","getMainPanel","getDatePanel","isDebugEnabled","getConfig","clearPerformanceLogs","clearLogs","createPanel","createElement","id","cssText","header","innerHTML","appendChild","content","body","getElementById","isVisible","updateDebugInfo","totalDates","renderTypeDistribution","types","renderDetections","detections","colors","due","availability","unlock","unknown","count","charAt","toUpperCase","slice","join","detection","text","date","element","logDateDetection","initializeKeyboardShortcut","textContent","head","clear","updatePerformanceMetrics","metricsContainer","report","summary","totalDuration","toFixed","averageDuration","slowestOperation","fastestOperation","metric","getMetricSpeedClass","updateAssignmentInfo","assignments","container","typeCounts","getAssignmentTypeCounts","priorityRanges","getPriorityRanges","renderTypeCounts","renderPriorityDistribution","renderAssignmentList","reduce","acc","assignment","priorityScore","high","medium","low","counts","ranges","range","renderAssignmentDetail","priorityColor","points","maxPoints","dueDate","toLocaleDateString","course","Math","round","logDetectionEvent","now","calculateSummary","unshift","pop","STORAGE_KEY","sum","sortedMetrics","sort","a","b","trends","hotspots","recommendations","operationMetrics","operation","durations","recent","floor","older","recentAvg","calculateAverage","olderAvg","percentageChange","trend","calculateTrend","frequency","h","generateRecommendations","numbers","n","degradingOps","t","op","hotspot","remove","instance","startMetric","startTime","performance","endMetric","find","endTime","completedMetrics","sorted","monitorAsync","fn","finally","monitor","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","SettingsManager","defaultSettings","priorityWeights","GRADE_IMPACT","COURSE_GRADE","DUE_DATE","typeWeights","quiz","discussion","announcement","displayOptions","showCourseNames","showGradeImpact","showPriorityScores","highlightOverdue","refreshInterval","debugSettings","icalUrl","debugManager","DebugManager","initializeEventListeners","loadSettings","saveSettings","resetSettings","slider","valueDisplay","validateWeights","target","checked","updateDebugSettings","settings","applySettingsToForm","toString","updateWeightDisplays","parseInt","parseFloat","notifySettingsChanged","showSaveSuccess","showSaveError","totalWeight","validation","className","runtime","sendMessage","tabs","query","url","tab","saveBtn","originalText","classList","add","setTimeout","window"],"sourceRoot":""}