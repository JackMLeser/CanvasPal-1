{"version":3,"file":"settings/settings.js","mappings":"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","sources":["webpack://canvaspal/./src/utils/logger.ts","webpack://canvaspal/./src/utils/performanceMonitor.ts","webpack://canvaspal/./src/utils/debugPanel.ts","webpack://canvaspal/./src/utils/dateDebugPanel.ts","webpack://canvaspal/./src/utils/performanceLogger.ts","webpack://canvaspal/./src/utils/debugManager.ts","webpack://canvaspal/./src/settings/settings.ts"],"sourcesContent":["export enum LogLevel {\n    DEBUG = 0,\n    INFO = 1,\n    WARN = 2,\n    ERROR = 3\n}\n\ninterface LogEntry {\n    timestamp: string;\n    level: LogLevel;\n    message: string;\n    data?: any;\n    stack?: string;\n}\n\nexport class Logger {\n    private static readonly MAX_LOGS = 1000;\n    private static instances: Map<string, Logger> = new Map();\n    private context: string;\n    private currentLevel: LogLevel;\n\n    public constructor(context: string, level: LogLevel = LogLevel.INFO) {\n        this.context = context;\n        this.currentLevel = level;\n        this.cleanOldLogs();\n    }\n\n    public static getInstance(context: string, level: LogLevel = LogLevel.INFO): Logger {\n        const key = `${context}-${level}`;\n        if (!this.instances.has(key)) {\n            this.instances.set(key, new Logger(context, level));\n        }\n        return this.instances.get(key)!;\n    }\n\n    setLevel(level: LogLevel): void {\n        this.currentLevel = level;\n    }\n\n    debug(message: string, data?: any): void {\n        this.log(LogLevel.DEBUG, message, data);\n    }\n\n    info(message: string, data?: any): void {\n        this.log(LogLevel.INFO, message, data);\n    }\n\n    warn(message: string, data?: any): void {\n        this.log(LogLevel.WARN, message, data);\n    }\n\n    error(message: string, data?: any): void {\n        this.log(LogLevel.ERROR, message, data);\n    }\n\n    public async log(level: LogLevel, message: string, ...args: any[]): Promise<void> {\n        if (level >= this.currentLevel) {\n            const timestamp = new Date().toISOString();\n            const prefix = this.getLogPrefix(level);\n            const formattedMessage = `[${timestamp}] ${prefix} [${this.context}] ${message}`;\n\n            if (args.length) {\n                const formattedData = this.formatLogData(args);\n                console.log(formattedMessage, formattedData);\n            } else {\n                console.log(formattedMessage);\n            }\n\n            const entry: LogEntry = {\n                timestamp,\n                level,\n                message,\n                data: args,\n                stack: Error().stack\n            };\n\n            this.saveLogs(entry);\n\n            if (level === LogLevel.ERROR) {\n                this.notifyError(entry);\n            }\n        }\n    }\n\n    private getLogPrefix(level: LogLevel): string {\n        switch (level) {\n            case LogLevel.DEBUG:\n                return '🔍 DEBUG:';\n            case LogLevel.INFO:\n                return '📢 INFO:';\n            case LogLevel.WARN:\n                return '⚠️ WARN:';\n            case LogLevel.ERROR:\n                return '❌ ERROR:';\n            default:\n                return '📢';\n        }\n    }\n\n    private formatLogData(data: any): any {\n        try {\n            if (Array.isArray(data)) {\n                return data.map(item => this.formatLogData(item));\n            }\n\n            if (data && typeof data === 'object') {\n                // Check if it's an Error object\n                if (data instanceof Error) {\n                    return {\n                        name: data.name,\n                        message: data.message,\n                        stack: data.stack\n                    };\n                }\n\n                // Handle regular objects\n                const formatted: Record<string, any> = {};\n                for (const [key, value] of Object.entries(data)) {\n                    formatted[key] = this.formatLogData(value);\n                }\n                return formatted;\n            }\n\n            return data;\n        } catch (error) {\n            return '[Error formatting log data]';\n        }\n    }\n\n    private async saveLogs(entry: LogEntry): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        logs.push(entry);\n\n        if (logs.length > Logger.MAX_LOGS) {\n            logs.splice(0, logs.length - Logger.MAX_LOGS);\n        }\n\n        await chrome.storage.local.set({ logs });\n    }\n\n    private async cleanOldLogs(): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n        const filteredLogs = logs.filter((log: LogEntry) => \n            new Date(log.timestamp) > thirtyDaysAgo\n        );\n\n        await chrome.storage.local.set({ logs: filteredLogs });\n    }\n\n    private notifyError(entry: LogEntry): void {\n        chrome.notifications.create({\n            type: 'basic',\n            iconUrl: '/dist/icons/icon128.png',\n            title: 'CanvasPal Error',\n            message: entry.message,\n            priority: 2\n        });\n    }\n\n    async getLogs(level?: LogLevel): Promise<LogEntry[]> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        return level ? logs.filter((log: LogEntry) => log.level === level) : logs;\n    }\n}\n\nexport const logger = Logger.getInstance('default');\n","import { Logger } from './logger';\n\ninterface PerformanceMetric {\n    name: string;\n    startTime: number;\n    endTime?: number;\n    duration?: number;\n    metadata?: Record<string, any>;\n}\n\ninterface PerformanceReport {\n    metrics: PerformanceMetric[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: {\n            name: string;\n            duration: number;\n        };\n        fastestOperation: {\n            name: string;\n            duration: number;\n        };\n    };\n}\n\nexport class PerformanceMonitor {\n    private metrics: PerformanceMetric[] = [];\n    private logger: Logger;\n    private static instance: PerformanceMonitor;\n\n    private constructor() {\n        this.logger = new Logger('PerformanceMonitor');\n    }\n\n    public static getInstance(): PerformanceMonitor {\n        if (!PerformanceMonitor.instance) {\n            PerformanceMonitor.instance = new PerformanceMonitor();\n        }\n        return PerformanceMonitor.instance;\n    }\n\n    public startMetric(name: string, metadata?: Record<string, any>): string {\n        const id = `${name}_${Date.now()}`;\n        this.metrics.push({\n            name,\n            startTime: performance.now(),\n            metadata\n        });\n        return id;\n    }\n\n    public endMetric(name: string): void {\n        const metric = this.metrics.find(m => m.name === name && !m.endTime);\n        if (metric) {\n            metric.endTime = performance.now();\n            metric.duration = metric.endTime - metric.startTime;\n            this.logger.debug(`Performance metric - ${name}:`, {\n                duration: `${metric.duration.toFixed(2)}ms`,\n                metadata: metric.metadata\n            });\n        }\n    }\n\n    public getReport(): PerformanceReport {\n        const completedMetrics = this.metrics.filter(m => m.duration !== undefined);\n        \n        if (completedMetrics.length === 0) {\n            return {\n                metrics: [],\n                summary: {\n                    totalDuration: 0,\n                    averageDuration: 0,\n                    slowestOperation: { name: 'none', duration: 0 },\n                    fastestOperation: { name: 'none', duration: 0 }\n                }\n            };\n        }\n\n        const totalDuration = completedMetrics.reduce((sum, m) => sum + (m.duration || 0), 0);\n        const averageDuration = totalDuration / completedMetrics.length;\n\n        const sorted = [...completedMetrics].sort((a, b) => \n            (b.duration || 0) - (a.duration || 0));\n\n        return {\n            metrics: completedMetrics,\n            summary: {\n                totalDuration,\n                averageDuration,\n                slowestOperation: {\n                    name: sorted[0].name,\n                    duration: sorted[0].duration || 0\n                },\n                fastestOperation: {\n                    name: sorted[sorted.length - 1].name,\n                    duration: sorted[sorted.length - 1].duration || 0\n                }\n            }\n        };\n    }\n\n    public clear(): void {\n        this.metrics = [];\n    }\n\n    public monitorAsync<T>(name: string, fn: () => Promise<T>, metadata?: Record<string, any>): Promise<T> {\n        this.startMetric(name, metadata);\n        return fn().finally(() => this.endMetric(name));\n    }\n\n    public monitor<T>(name: string, fn: () => T, metadata?: Record<string, any>): T {\n        this.startMetric(name, metadata);\n        const result = fn();\n        this.endMetric(name);\n        return result;\n    }\n}","import { Assignment } from '../types/models';\nimport { Logger } from './logger';\nimport { PerformanceMonitor } from './performanceMonitor';\n\nexport class DebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n    private performanceMonitor: PerformanceMonitor;\n    private isVisible: boolean = false;\n\n    constructor() {\n        this.logger = new Logger('DebugPanel');\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.createPanel();\n        this.initializeKeyboardShortcut();\n    }\n\n    private createPanel(): void {\n        this.panel = document.createElement('div');\n        this.panel.id = 'canvaspal-debug-panel';\n        this.panel.innerHTML = `\n            <div class=\"debug-panel-header\">\n                <span>🔍 CanvasPal Debug</span>\n                <div class=\"debug-panel-controls\">\n                    <button id=\"clear-metrics\" title=\"Clear Performance Metrics\">🗑️</button>\n                    <button id=\"canvaspal-debug-close\">✕</button>\n                </div>\n            </div>\n            <div class=\"debug-panel-content\">\n                <div id=\"performance-metrics\"></div>\n                <div id=\"assignment-info\"></div>\n            </div>\n        `;\n\n        // Apply styles\n        this.panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            width: 350px;\n            max-height: 500px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 9999;\n            overflow-y: auto;\n            box-shadow: 0 0 10px rgba(0,0,0,0.5);\n            display: none;\n        `;\n\n        // Add button styles\n        const style = document.createElement('style');\n        style.textContent = `\n            .debug-panel-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 10px;\n                padding-bottom: 10px;\n                border-bottom: 1px solid rgba(255,255,255,0.1);\n            }\n\n            .debug-panel-controls {\n                display: flex;\n                gap: 8px;\n            }\n\n            .debug-panel-controls button {\n                background: none;\n                border: none;\n                color: white;\n                cursor: pointer;\n                padding: 4px;\n                border-radius: 4px;\n                transition: background 0.2s;\n            }\n\n            .debug-panel-controls button:hover {\n                background: rgba(255,255,255,0.1);\n            }\n\n            .performance-section {\n                margin: 10px 0;\n                padding: 8px;\n                background: rgba(255,255,255,0.05);\n                border-radius: 4px;\n            }\n\n            .metric-item {\n                margin: 4px 0;\n                display: flex;\n                justify-content: space-between;\n            }\n\n            .metric-value {\n                color: #90EE90;\n            }\n\n            .slow-metric {\n                color: #ff6b6b;\n            }\n\n            .normal-metric {\n                color: #ffd700;\n            }\n\n            .fast-metric {\n                color: #90EE90;\n            }\n        `;\n        document.head.appendChild(style);\n\n        document.body.appendChild(this.panel);\n\n        // Add event listeners\n        document.getElementById('canvaspal-debug-close')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n\n        document.getElementById('clear-metrics')?.addEventListener('click', () => {\n            this.performanceMonitor.clear();\n            this.updatePerformanceMetrics();\n        });\n    }\n\n    private initializeKeyboardShortcut(): void {\n        document.addEventListener('keydown', (e) => {\n            // Ctrl/Cmd + Shift + D to toggle debug panel\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'D') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            this.isVisible = !this.isVisible;\n            this.panel.style.display = this.isVisible ? 'block' : 'none';\n            this.logger.debug(`Debug panel ${this.isVisible ? 'shown' : 'hidden'}`);\n        }\n    }\n\n    private updatePerformanceMetrics(): void {\n        const metricsContainer = document.getElementById('performance-metrics');\n        if (!metricsContainer) return;\n\n        const report = this.performanceMonitor.getReport();\n        \n        metricsContainer.innerHTML = `\n            <div class=\"performance-section\">\n                <h3>Performance Summary</h3>\n                <div class=\"metric-item\">\n                    <span>Total Duration:</span>\n                    <span class=\"metric-value\">${report.summary.totalDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Average Duration:</span>\n                    <span class=\"metric-value\">${report.summary.averageDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Slowest Operation:</span>\n                    <span class=\"slow-metric\">${report.summary.slowestOperation.name} (${report.summary.slowestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Fastest Operation:</span>\n                    <span class=\"fast-metric\">${report.summary.fastestOperation.name} (${report.summary.fastestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n            </div>\n            <div class=\"performance-section\">\n                <h3>Recent Operations</h3>\n                ${report.metrics.slice(-5).map(metric => `\n                    <div class=\"metric-item\">\n                        <span>${metric.name}</span>\n                        <span class=\"${this.getMetricSpeedClass(metric.duration || 0)}\">${metric.duration?.toFixed(2)}ms</span>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private getMetricSpeedClass(duration: number): string {\n        if (duration > 100) return 'slow-metric';\n        if (duration > 50) return 'normal-metric';\n        return 'fast-metric';\n    }\n\n    public updateAssignmentInfo(assignments: Assignment[]): void {\n        const container = document.getElementById('assignment-info');\n        if (!container) return;\n\n        const typeCounts = this.getAssignmentTypeCounts(assignments);\n        const priorityRanges = this.getPriorityRanges(assignments);\n\n        container.innerHTML = `\n            <div style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${assignments.length} assignments\n                </div>\n                ${this.renderTypeCounts(typeCounts)}\n                ${this.renderPriorityDistribution(priorityRanges)}\n            </div>\n            ${this.renderAssignmentList(assignments)}\n        `;\n\n        // Update performance metrics\n        this.updatePerformanceMetrics();\n    }\n\n    private getAssignmentTypeCounts(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            acc[assignment.type] = (acc[assignment.type] || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private getPriorityRanges(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            if (assignment.priorityScore >= 0.7) acc.high = (acc.high || 0) + 1;\n            else if (assignment.priorityScore >= 0.4) acc.medium = (acc.medium || 0) + 1;\n            else acc.low = (acc.low || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private renderTypeCounts(counts: Record<string, number>): string {\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Assignment Types:</div>\n                ${Object.entries(counts).map(([type, count]) => `\n                    <div style=\"margin-left: 10px; color: #90EE90;\">\n                        ${type}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderPriorityDistribution(ranges: Record<string, number>): string {\n        const colors = {\n            high: '#ff6b6b',\n            medium: '#ffd700',\n            low: '#90EE90'\n        };\n\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Priority Distribution:</div>\n                ${Object.entries(ranges).map(([range, count]) => `\n                    <div style=\"margin-left: 10px; color: ${colors[range as keyof typeof colors]};\">\n                        ${range}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentList(assignments: Assignment[]): string {\n        return `\n            <div style=\"margin-top: 15px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Detailed Assignments:</div>\n                ${assignments.map(assignment => this.renderAssignmentDetail(assignment)).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentDetail(assignment: Assignment): string {\n        const priorityColor = assignment.priorityScore >= 0.7 ? '#ff6b6b' :\n                            assignment.priorityScore >= 0.4 ? '#ffd700' : '#90EE90';\n\n        return `\n            <div style=\"margin: 8px 0; padding: 8px; border-left: 2px solid ${priorityColor}; background: rgba(255,255,255,0.1);\">\n                <div style=\"margin-bottom: 4px;\">📚 ${assignment.title}</div>\n                <div style=\"color: #90EE90; margin-bottom: 4px;\">\n                    ${assignment.points ? `📝 ${assignment.points}/${assignment.maxPoints} points` : 'No points data'}\n                </div>\n                <div style=\"color: #ADD8E6; font-size: 11px;\">\n                    ⏰ Due: ${assignment.dueDate.toLocaleDateString()}\n                </div>\n                <div style=\"color: #DDA0DD; font-size: 11px;\">\n                    📚 Course: ${assignment.course}\n                </div>\n                <div style=\"color: ${priorityColor}; font-size: 11px; margin-top: 4px;\">\n                    ⚡ Priority: ${Math.round(assignment.priorityScore * 100)}%\n                </div>\n            </div>\n        `;\n    }\n\n    public logDetectionEvent(message: string, data?: any): void {\n        this.logger.debug(message, data);\n        // Could add visual indication of new events in the panel\n    }\n\n    public updatePerformanceAnalysis(analysis: any): void {\n        // Implementation\n    }\n}","import { Logger } from './logger';\n\ninterface DateDebugInfo {\n    totalDates: number;\n    types: {\n        due: number;\n        availability: number;\n        unlock: number;\n        unknown: number;\n    };\n    detections: {\n        element: string;\n        text: string;\n        type: string;\n        date: string;\n    }[];\n}\n\nexport class DateDebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n\n    constructor() {\n        this.logger = new Logger('DateDebugPanel');\n        this.createPanel();\n    }\n\n    private createPanel(): void {\n        this.panel = document.createElement('div');\n        this.panel.id = 'date-debug-panel';\n        this.panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            left: 20px;\n            width: 300px;\n            max-height: 400px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 9999;\n            overflow-y: auto;\n            box-shadow: 0 0 10px rgba(0,0,0,0.5);\n            display: none;\n        `;\n\n        const header = document.createElement('div');\n        header.innerHTML = `\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;\">\n                <span style=\"color: #ffd700; font-weight: bold;\">📅 Date Detection Debug</span>\n                <button id=\"date-debug-close\" style=\"background: none; border: none; color: white; cursor: pointer;\">✕</button>\n            </div>\n        `;\n        this.panel.appendChild(header);\n\n        const content = document.createElement('div');\n        content.id = 'date-debug-content';\n        this.panel.appendChild(content);\n\n        document.body.appendChild(this.panel);\n\n        document.getElementById('date-debug-close')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n\n        // Add keyboard shortcut (Ctrl/Cmd + Shift + T)\n        document.addEventListener('keydown', (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            const isVisible = this.panel.style.display === 'block';\n            this.panel.style.display = isVisible ? 'none' : 'block';\n        }\n    }\n\n    public updateDebugInfo(info: DateDebugInfo): void {\n        const content = document.getElementById('date-debug-content');\n        if (!content) return;\n\n        content.innerHTML = `\n            <div class=\"date-stats\" style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${info.totalDates} date${info.totalDates !== 1 ? 's' : ''}\n                </div>\n                ${this.renderTypeDistribution(info.types)}\n            </div>\n            <div class=\"date-detections\">\n                <div style=\"color: #ffd700; margin-bottom: 8px;\">Detected Dates:</div>\n                ${this.renderDetections(info.detections)}\n            </div>\n        `;\n    }\n\n    private renderTypeDistribution(types: DateDebugInfo['types']): string {\n        const colors = {\n            due: '#ff6b6b',\n            availability: '#4CAF50',\n            unlock: '#2196F3',\n            unknown: '#9e9e9e'\n        };\n\n        return Object.entries(types)\n            .map(([type, count]) => `\n                <div style=\"margin-left: 10px; color: ${colors[type as keyof typeof colors]};\">\n                    ${type.charAt(0).toUpperCase() + type.slice(1)}: ${count}\n                </div>\n            `).join('');\n    }\n\n    private renderDetections(detections: DateDebugInfo['detections']): string {\n        return detections\n            .map(detection => `\n                <div style=\"margin: 8px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px;\">\n                    <div style=\"margin-bottom: 4px; color: #90EE90;\">\n                        ${detection.text}\n                    </div>\n                    <div style=\"font-size: 11px; color: #ADD8E6;\">\n                        Type: ${detection.type}\n                    </div>\n                    <div style=\"font-size: 11px; color: #DDA0DD;\">\n                        Parsed: ${detection.date}\n                    </div>\n                    <div style=\"font-size: 11px; color: #FFB6C1;\">\n                        Element: ${detection.element}\n                    </div>\n                </div>\n            `).join('');\n    }\n\n    public logDateDetection(message: string, data?: any): void {\n        this.logger.debug(message, data);\n    }\n}","import { Logger } from './logger';\n\ninterface PerformanceLog {\n    timestamp: number;\n    metrics: {\n        name: string;\n        duration: number;\n        metadata?: Record<string, any>;\n    }[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: string;\n        fastestOperation: string;\n    };\n}\n\ntype Trend = 'improving' | 'degrading' | 'stable';\n\ninterface PerformanceMetric {\n    name: string;\n    duration: number;\n    metadata?: Record<string, any>;\n    trend?: Trend;\n}\n\nexport class PerformanceLogger {\n    private logger: Logger;\n    private static readonly MAX_LOGS = 100;\n    private static readonly STORAGE_KEY = 'performanceLogs';\n\n    constructor() {\n        this.logger = new Logger('PerformanceLogger');\n    }\n\n    public async logPerformance(metrics: { name: string; duration: number; metadata?: Record<string, any> }[]): Promise<void> {\n        try {\n            const logs = await this.getLogs();\n            const log: PerformanceLog = {\n                timestamp: Date.now(),\n                metrics,\n                summary: this.calculateSummary(metrics)\n            };\n            \n            logs.unshift(log);\n            \n            // Keep only the most recent logs\n            while (logs.length > PerformanceLogger.MAX_LOGS) {\n                logs.pop();\n            }\n            await chrome.storage.local.set({ [PerformanceLogger.STORAGE_KEY]: logs });\n            this.logger.debug('Performance log saved:', log);\n        } catch (error) {\n            this.logger.error('Error saving performance log:', error);\n        }\n    }\n\n    private calculateSummary(metrics: { name: string; duration: number }[]): PerformanceLog['summary'] {\n        if (metrics.length === 0) {\n            return {\n                totalDuration: 0,\n                averageDuration: 0,\n                slowestOperation: '',\n                fastestOperation: ''\n            };\n        }\n\n        const totalDuration = metrics.reduce((sum, m) => sum + m.duration, 0);\n        const sortedMetrics = [...metrics].sort((a, b) => b.duration - a.duration);\n\n        return {\n            totalDuration,\n            averageDuration: totalDuration / metrics.length,\n            slowestOperation: sortedMetrics[0].name,\n            fastestOperation: sortedMetrics[sortedMetrics.length - 1].name\n        };\n    }\n\n    public async getLogs(): Promise<PerformanceLog[]> {\n        try {\n            const result = await chrome.storage.local.get(PerformanceLogger.STORAGE_KEY);\n            return result[PerformanceLogger.STORAGE_KEY] || [];\n        } catch (error) {\n            this.logger.error('Error retrieving performance logs:', error);\n            return [];\n        }\n    }\n\n    public async getPerformanceAnalysis(): Promise<{\n        trends: {\n            operation: string;\n            averageDuration: number;\n            trend: Trend;\n            percentageChange: number;\n        }[];\n        hotspots: {\n            operation: string;\n            frequency: number;\n            averageDuration: number;\n        }[];\n        recommendations: string[];\n    }> {\n        const logs = await this.getLogs();\n        if (logs.length < 2) {\n            return {\n                trends: [],\n                hotspots: [],\n                recommendations: ['Not enough data for analysis']\n            };\n        }\n\n        // Group metrics by operation name\n        const operationMetrics: Record<string, number[]> = {};\n        logs.forEach(log => {\n            log.metrics.forEach(metric => {\n                if (!operationMetrics[metric.name]) {\n                    operationMetrics[metric.name] = [];\n                }\n                operationMetrics[metric.name].push(metric.duration);\n            });\n        });\n\n        // Calculate trends\n        const trends = Object.entries(operationMetrics).map(([operation, durations]) => {\n            const recent = durations.slice(0, Math.floor(durations.length / 2));\n            const older = durations.slice(Math.floor(durations.length / 2));\n            \n            const recentAvg = this.calculateAverage(recent);\n            const olderAvg = this.calculateAverage(older);\n            const percentageChange = ((recentAvg - olderAvg) / olderAvg) * 100;\n\n            return {\n                operation,\n                averageDuration: recentAvg,\n                trend: this.calculateTrend(percentageChange),\n                percentageChange\n            };\n        });\n\n        // Identify hotspots\n        const hotspots = Object.entries(operationMetrics)\n            .map(([operation, durations]) => ({\n                operation,\n                frequency: durations.length,\n                averageDuration: this.calculateAverage(durations)\n            }))\n            .filter(h => h.averageDuration > 100 || h.frequency > logs.length * 0.5)\n            .sort((a, b) => b.averageDuration * b.frequency - a.averageDuration * a.frequency);\n\n        // Generate recommendations\n        const recommendations = this.generateRecommendations(trends, hotspots);\n\n        return { trends, hotspots, recommendations };\n    }\n\n    private calculateAverage(numbers: number[]): number {\n        return numbers.reduce((sum, n) => sum + n, 0) / numbers.length;\n    }\n\n    private calculateTrend(value: number): Trend {\n        if (value < -5) return 'improving';\n        if (value > 5) return 'degrading';\n        return 'stable';\n    }\n\n    private generateRecommendations(\n        trends: { operation: string; trend: string; percentageChange: number }[],\n        hotspots: { operation: string; frequency: number; averageDuration: number }[]\n    ): string[] {\n        const recommendations: string[] = [];\n\n        // Check for degrading performance\n        const degradingOps = trends.filter(t => t.trend === 'degrading');\n        if (degradingOps.length > 0) {\n            recommendations.push(\n                `Performance degradation detected in: ${degradingOps\n                    .map(op => `${op.operation} (${op.percentageChange.toFixed(1)}% slower)`)\n                    .join(', ')}`\n            );\n        }\n\n        // Check for frequent slow operations\n        hotspots.forEach(hotspot => {\n            if (hotspot.averageDuration > 200) {\n                recommendations.push(\n                    `Consider optimizing ${hotspot.operation} (avg: ${hotspot.averageDuration.toFixed(1)}ms, ` +\n                    `called ${hotspot.frequency} times)`\n                );\n            }\n        });\n\n        // Add general recommendations\n        if (hotspots.length > 3) {\n            recommendations.push('Consider reducing the number of expensive operations running in parallel');\n        }\n\n        if (recommendations.length === 0) {\n            recommendations.push('Performance is within acceptable ranges');\n        }\n\n        return recommendations;\n    }\n\n    public async clearLogs(): Promise<void> {\n        try {\n            await chrome.storage.local.remove(PerformanceLogger.STORAGE_KEY);\n            this.logger.info('Performance logs cleared');\n        } catch (error) {\n            this.logger.error('Error clearing performance logs:', error);\n        }\n    }\n}","import { Logger } from './logger';\nimport { DebugPanel } from './debugPanel';\nimport { DateDebugPanel } from './dateDebugPanel';\nimport { PerformanceMonitor } from './performanceMonitor';\nimport { PerformanceLogger } from './performanceLogger';\n\ninterface DebugConfig {\n    enabled: boolean;\n    logLevel: 'debug' | 'info' | 'warn' | 'error';\n    showDateDebug: boolean;\n    showAssignmentDebug: boolean;\n    showPriorityDebug: boolean;\n    showPerformanceMetrics: boolean;\n}\n\nexport class DebugManager {\n    private logger: Logger;\n    private mainPanel: DebugPanel;\n    private datePanel: DateDebugPanel;\n    private performanceMonitor: PerformanceMonitor;\n    private performanceLogger: PerformanceLogger;\n    private config: DebugConfig = {\n        enabled: false,\n        logLevel: 'info',\n        showDateDebug: false,\n        showAssignmentDebug: false,\n        showPriorityDebug: false,\n        showPerformanceMetrics: false\n    };\n\n    constructor() {\n        this.logger = new Logger('DebugManager');\n        this.mainPanel = new DebugPanel();\n        this.datePanel = new DateDebugPanel();\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.performanceLogger = new PerformanceLogger();\n        this.initializeKeyboardShortcuts();\n        this.initializePerformanceLogging();\n        this.loadDebugConfig();\n    }\n\n    private initializePerformanceLogging(): void {\n        // Log performance metrics every 5 minutes if debug mode is enabled\n        setInterval(async () => {\n            if (this.config.enabled && this.config.showPerformanceMetrics) {\n                const report = this.performanceMonitor.getReport();\n                // Filter out metrics with undefined duration and ensure proper type\n                const validMetrics = report.metrics.filter(m => m.duration !== undefined).map(m => ({\n                    name: m.name,\n                    duration: m.duration as number,\n                    metadata: m.metadata\n                }));\n                \n                await this.performanceLogger.logPerformance(validMetrics);\n                \n                if (this.config.showPerformanceMetrics) {\n                    await this.updatePerformanceAnalysis();\n                }\n            }\n        }, 5 * 60 * 1000);\n    }\n\n    private async updatePerformanceAnalysis(): Promise<void> {\n        const analysis = await this.performanceLogger.getPerformanceAnalysis();\n        this.mainPanel.updatePerformanceAnalysis(analysis);\n    }\n\n    private initializeKeyboardShortcuts(): void {\n        document.addEventListener('keydown', (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey) {\n                switch (e.key) {\n                    case '`': // Toggle all debug features\n                        e.preventDefault();\n                        this.toggleDebugMode();\n                        break;\n                    case 'D': // Main debug panel\n                        e.preventDefault();\n                        this.mainPanel.toggleVisibility();\n                        break;\n                    case 'T': // Date debug panel\n                        e.preventDefault();\n                        this.datePanel.toggleVisibility();\n                        break;\n                    case 'P': // Performance metrics\n                        e.preventDefault();\n                        this.togglePerformanceMetrics();\n                        break;\n                }\n            }\n        });\n    }\n\n    private async togglePerformanceMetrics(): Promise<void> {\n        this.config.showPerformanceMetrics = !this.config.showPerformanceMetrics;\n        if (this.config.showPerformanceMetrics) {\n            await this.updatePerformanceAnalysis();\n        }\n        this.saveDebugConfig();\n    }\n\n    private async loadDebugConfig(): Promise<void> {\n        try {\n            const result = await chrome.storage.sync.get('debugConfig');\n            if (result.debugConfig) {\n                this.config = { ...this.config, ...result.debugConfig };\n                this.applyConfig();\n            }\n        } catch (error) {\n            this.logger.error('Error loading debug config:', error);\n        }\n    }\n\n    private async saveDebugConfig(): Promise<void> {\n        try {\n            await chrome.storage.sync.set({ debugConfig: this.config });\n        } catch (error) {\n            this.logger.error('Error saving debug config:', error);\n        }\n    }\n\n    private applyConfig(): void {\n        if (!this.config.enabled) {\n            this.disableAllPanels();\n            return;\n        }\n\n        this.logger.setLevel(this.getLogLevel());\n        \n        if (this.config.showDateDebug) {\n            this.datePanel.toggleVisibility();\n        }\n        \n        if (this.config.showAssignmentDebug || this.config.showPriorityDebug) {\n            this.mainPanel.toggleVisibility();\n        }\n    }\n\n    private disableAllPanels(): void {\n        const panels = document.querySelectorAll('[id$=\"-debug-panel\"]');\n        panels.forEach(panel => {\n            (panel as HTMLElement).style.display = 'none';\n        });\n    }\n\n    public toggleDebugMode(): void {\n        this.config.enabled = !this.config.enabled;\n        this.applyConfig();\n        this.saveDebugConfig();\n\n        this.logger.info(`Debug mode ${this.config.enabled ? 'enabled' : 'disabled'}`);\n    }\n\n    public updateDebugConfig(newConfig: Partial<DebugConfig>): void {\n        this.config = { ...this.config, ...newConfig };\n        this.applyConfig();\n        this.saveDebugConfig();\n    }\n\n    private getLogLevel(): number {\n        switch (this.config.logLevel) {\n            case 'debug': return 0;\n            case 'info': return 1;\n            case 'warn': return 2;\n            case 'error': return 3;\n            default: return 1;\n        }\n    }\n\n    public getMainPanel(): DebugPanel {\n        return this.mainPanel;\n    }\n\n    public getDatePanel(): DateDebugPanel {\n        return this.datePanel;\n    }\n\n    public isDebugEnabled(): boolean {\n        return this.config.enabled;\n    }\n\n    public getConfig(): DebugConfig {\n        return { ...this.config };\n    }\n\n    public async clearPerformanceLogs(): Promise<void> {\n        await this.performanceLogger.clearLogs();\n        if (this.config.showPerformanceMetrics) {\n            await this.updatePerformanceAnalysis();\n        }\n    }\n\n    public async getPerformanceAnalysis() {\n        return this.performanceLogger.getPerformanceAnalysis();\n    }\n}","import { Settings } from '../types/models';\nimport { Logger } from '../utils/logger';\nimport { DebugManager } from '../utils/debugManager';\n\nexport class SettingsManager {\n    private logger: Logger;\n    private debugManager: DebugManager;\n    private defaultSettings: Settings = {\n        priorityWeights: {\n            GRADE_IMPACT: 0.4,\n            COURSE_GRADE: 0.3,\n            DUE_DATE: 0.3\n        },\n        typeWeights: {\n            quiz: 1.2,\n            assignment: 1.0,\n            discussion: 0.8,\n            announcement: 0.5\n        },\n        displayOptions: {\n            showCourseNames: true,\n            showGradeImpact: true,\n            showPriorityScores: true,\n            highlightOverdue: true\n        },\n        refreshInterval: 30,\n        debugSettings: {\n            enabled: false,\n            logLevel: 'info',\n            showDateDebug: false,\n            showAssignmentDebug: false,\n            showPriorityDebug: false\n        },\n        icalUrl: ''\n    };\n\n    constructor() {\n        this.logger = new Logger('SettingsManager');\n        this.debugManager = new DebugManager();\n        this.initializeEventListeners();\n        this.loadSettings();\n    }\n\n    private initializeEventListeners(): void {\n        document.getElementById('saveSettings')?.addEventListener('click', () => this.saveSettings());\n        document.getElementById('resetSettings')?.addEventListener('click', () => this.resetSettings());\n\n        // Priority weight sliders\n        ['gradeImpact', 'courseGrade', 'dueDate'].forEach(id => {\n            const slider = document.getElementById(id) as HTMLInputElement;\n            const valueDisplay = document.getElementById(`${id}Value`);\n            \n            if (slider && valueDisplay) {\n                slider.addEventListener('input', () => {\n                    valueDisplay.textContent = `${slider.value}%`;\n                    this.validateWeights();\n                });\n            }\n        });\n\n        // Debug settings\n        document.getElementById('debugEnabled')?.addEventListener('change', (e) => {\n            const enabled = (e.target as HTMLInputElement).checked;\n            this.updateDebugSettings({ enabled });\n        });\n\n        document.getElementById('logLevel')?.addEventListener('change', (e) => {\n            const level = (e.target as HTMLSelectElement).value as Settings['debugSettings']['logLevel'];\n            this.updateDebugSettings({ logLevel: level });\n        });\n\n        ['showDateDebug', 'showAssignmentDebug', 'showPriorityDebug'].forEach(id => {\n            document.getElementById(id)?.addEventListener('change', (e) => {\n                const value = (e.target as HTMLInputElement).checked;\n                this.updateDebugSettings({ [id]: value });\n            });\n        });\n    }\n\n    private updateDebugSettings(settings: Partial<Settings['debugSettings']>): void {\n        this.debugManager.updateDebugConfig(settings);\n        this.saveSettings();\n    }\n\n    private async loadSettings(): Promise<void> {\n        try {\n            const result = await chrome.storage.sync.get('settings');\n            const settings: Settings = result.settings || this.defaultSettings;\n            this.applySettingsToForm(settings);\n        } catch (error) {\n            this.logger.error('Error loading settings:', error);\n            this.applySettingsToForm(this.defaultSettings);\n        }\n    }\n\n    private applySettingsToForm(settings: Settings): void {\n        // Priority weights\n        (document.getElementById('gradeImpact') as HTMLInputElement).value = \n            (settings.priorityWeights.GRADE_IMPACT * 100).toString();\n        (document.getElementById('courseGrade') as HTMLInputElement).value = \n            (settings.priorityWeights.COURSE_GRADE * 100).toString();\n        (document.getElementById('dueDate') as HTMLInputElement).value = \n            (settings.priorityWeights.DUE_DATE * 100).toString();\n\n        // Type weights\n        (document.getElementById('quizWeight') as HTMLInputElement).value = \n            settings.typeWeights.quiz.toString();\n        (document.getElementById('assignmentWeight') as HTMLInputElement).value = \n            settings.typeWeights.assignment.toString();\n        (document.getElementById('discussionWeight') as HTMLInputElement).value = \n            settings.typeWeights.discussion.toString();\n        (document.getElementById('announcementWeight') as HTMLInputElement).value = \n            settings.typeWeights.announcement.toString();\n\n        // Display options\n        (document.getElementById('showCourseNames') as HTMLInputElement).checked = \n            settings.displayOptions.showCourseNames;\n        (document.getElementById('showGradeImpact') as HTMLInputElement).checked = \n            settings.displayOptions.showGradeImpact;\n        (document.getElementById('showPriorityScores') as HTMLInputElement).checked = \n            settings.displayOptions.showPriorityScores;\n        (document.getElementById('highlightOverdue') as HTMLInputElement).checked = \n            settings.displayOptions.highlightOverdue;\n\n        // Refresh interval\n        (document.getElementById('refreshInterval') as HTMLInputElement).value = \n            settings.refreshInterval.toString();\n\n        // iCal URL\n        (document.getElementById('icalUrl') as HTMLInputElement).value = \n            settings.icalUrl;\n\n        // Apply debug settings\n        const debugSettings = settings.debugSettings;\n        (document.getElementById('debugEnabled') as HTMLInputElement).checked = \n            debugSettings.enabled;\n        (document.getElementById('logLevel') as HTMLSelectElement).value = \n            debugSettings.logLevel;\n        (document.getElementById('showDateDebug') as HTMLInputElement).checked = \n            debugSettings.showDateDebug;\n        (document.getElementById('showAssignmentDebug') as HTMLInputElement).checked = \n            debugSettings.showAssignmentDebug;\n        (document.getElementById('showPriorityDebug') as HTMLInputElement).checked = \n            debugSettings.showPriorityDebug;\n\n        // Update displays\n        this.updateWeightDisplays();\n        this.validateWeights();\n    }\n\n    private async saveSettings(): Promise<void> {\n        if (!this.validateWeights()) {\n            return;\n        }\n\n        try {\n            const settings: Settings = {\n                priorityWeights: {\n                    GRADE_IMPACT: parseInt((document.getElementById('gradeImpact') as HTMLInputElement).value) / 100,\n                    COURSE_GRADE: parseInt((document.getElementById('courseGrade') as HTMLInputElement).value) / 100,\n                    DUE_DATE: parseInt((document.getElementById('dueDate') as HTMLInputElement).value) / 100\n                },\n                typeWeights: {\n                    quiz: parseFloat((document.getElementById('quizWeight') as HTMLInputElement).value),\n                    assignment: parseFloat((document.getElementById('assignmentWeight') as HTMLInputElement).value),\n                    discussion: parseFloat((document.getElementById('discussionWeight') as HTMLInputElement).value),\n                    announcement: parseFloat((document.getElementById('announcementWeight') as HTMLInputElement).value)\n                },\n                displayOptions: {\n                    showCourseNames: (document.getElementById('showCourseNames') as HTMLInputElement).checked,\n                    showGradeImpact: (document.getElementById('showGradeImpact') as HTMLInputElement).checked,\n                    showPriorityScores: (document.getElementById('showPriorityScores') as HTMLInputElement).checked,\n                    highlightOverdue: (document.getElementById('highlightOverdue') as HTMLInputElement).checked\n                },\n                refreshInterval: parseInt((document.getElementById('refreshInterval') as HTMLInputElement).value),\n                debugSettings: {\n                    enabled: (document.getElementById('debugEnabled') as HTMLInputElement).checked,\n                    logLevel: (document.getElementById('logLevel') as HTMLSelectElement).value as Settings['debugSettings']['logLevel'],\n                    showDateDebug: (document.getElementById('showDateDebug') as HTMLInputElement).checked,\n                    showAssignmentDebug: (document.getElementById('showAssignmentDebug') as HTMLInputElement).checked,\n                    showPriorityDebug: (document.getElementById('showPriorityDebug') as HTMLInputElement).checked\n                },\n                icalUrl: (document.getElementById('icalUrl') as HTMLInputElement).value\n            };\n\n            await chrome.storage.sync.set({ settings });\n            await this.notifySettingsChanged(settings);\n            this.showSaveSuccess();\n        } catch (error) {\n            this.logger.error('Error saving settings:', error);\n            this.showSaveError();\n        }\n    }\n\n    private async resetSettings(): Promise<void> {\n        try {\n            await chrome.storage.sync.set({ settings: this.defaultSettings });\n            this.applySettingsToForm(this.defaultSettings);\n            await this.notifySettingsChanged(this.defaultSettings);\n            this.showSaveSuccess();\n        } catch (error) {\n            this.logger.error('Error resetting settings:', error);\n            this.showSaveError();\n        }\n    }\n\n    private validateWeights(): boolean {\n        const gradeImpact = parseInt((document.getElementById('gradeImpact') as HTMLInputElement).value);\n        const courseGrade = parseInt((document.getElementById('courseGrade') as HTMLInputElement).value);\n        const dueDate = parseInt((document.getElementById('dueDate') as HTMLInputElement).value);\n        const totalWeight = gradeImpact + courseGrade + dueDate;\n        \n        const validation = document.getElementById('weightValidation');\n        if (validation) {\n            if (totalWeight !== 100) {\n                validation.textContent = `Total weight must be 100% (currently ${totalWeight}%)`;\n                validation.className = 'weight-validation error';\n                return false;\n            } else {\n                validation.textContent = '✓ Weights are valid';\n                validation.className = 'weight-validation success';\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private updateWeightDisplays(): void {\n        ['gradeImpact', 'courseGrade', 'dueDate'].forEach(id => {\n            const value = (document.getElementById(id) as HTMLInputElement).value;\n            const display = document.getElementById(`${id}Value`);\n            if (display) {\n                display.textContent = `${value}%`;\n            }\n        });\n    }\n\n    private async notifySettingsChanged(settings: Settings): Promise<void> {\n        try {\n            // Notify background script\n            await chrome.runtime.sendMessage({\n                type: 'SETTINGS_UPDATED',\n                settings\n            });\n\n            // Notify all tabs\n            const tabs = await chrome.tabs.query({\n                url: \"*://*.instructure.com/*\"\n            });\n            \n            for (const tab of tabs) {\n                if (tab.id) {\n                    try {\n                        await chrome.tabs.sendMessage(tab.id, {\n                            type: 'SETTINGS_UPDATED',\n                            settings\n                        });\n                    } catch (e) {\n                        // Ignore errors for tabs that don't have our content script\n                        this.logger.debug(`Could not notify tab ${tab.id}: ${e}`);\n                    }\n                }\n            }\n\n            this.logger.info('Settings updated and propagated');\n        } catch (error) {\n            this.logger.error('Error notifying settings change:', error);\n            throw error; // Re-throw to handle in the save function\n        }\n    }\n\n    private showSaveSuccess(): void {\n        const saveBtn = document.getElementById('saveSettings');\n        if (saveBtn) {\n            const originalText = saveBtn.textContent;\n            saveBtn.textContent = '✓ Saved';\n            saveBtn.classList.add('success');\n            setTimeout(() => {\n                if (saveBtn) {\n                    saveBtn.textContent = originalText;\n                    saveBtn.classList.remove('success');\n                }\n            }, 2000);\n        }\n    }\n\n    private showSaveError(): void {\n        const saveBtn = document.getElementById('saveSettings');\n        if (saveBtn) {\n            const originalText = saveBtn.textContent;\n            saveBtn.textContent = '✗ Error';\n            saveBtn.classList.add('error');\n            setTimeout(() => {\n                if (saveBtn) {\n                    saveBtn.textContent = originalText;\n                    saveBtn.classList.remove('error');\n                }\n            }, 2000);\n        }\n    }\n}\n\n// Initialize settings manager\nwindow.addEventListener('DOMContentLoaded', () => {\n    new SettingsManager();\n});\n"],"names":["LogLevel","Logger","context","level","INFO","this","currentLevel","cleanOldLogs","getInstance","key","instances","has","set","get","setLevel","debug","message","data","log","DEBUG","info","warn","WARN","error","ERROR","args","timestamp","Date","toISOString","formattedMessage","getLogPrefix","length","formattedData","formatLogData","console","entry","stack","Error","saveLogs","notifyError","Array","isArray","map","item","name","formatted","value","Object","entries","logs","chrome","storage","local","push","MAX_LOGS","splice","thirtyDaysAgo","setDate","getDate","filteredLogs","filter","notifications","create","type","iconUrl","title","priority","getLogs","Map","PerformanceMonitor","metrics","logger","instance","startMetric","metadata","id","now","startTime","performance","endMetric","metric","find","m","endTime","duration","toFixed","getReport","completedMetrics","undefined","summary","totalDuration","averageDuration","slowestOperation","fastestOperation","reduce","sum","sorted","sort","a","b","clear","monitorAsync","fn","finally","monitor","result","DebugPanel","constructor","panel","isVisible","performanceMonitor","createPanel","initializeKeyboardShortcut","document","createElement","innerHTML","style","cssText","textContent","head","appendChild","body","getElementById","addEventListener","toggleVisibility","updatePerformanceMetrics","e","ctrlKey","metaKey","shiftKey","preventDefault","display","metricsContainer","report","slice","getMetricSpeedClass","join","updateAssignmentInfo","assignments","container","typeCounts","getAssignmentTypeCounts","priorityRanges","getPriorityRanges","renderTypeCounts","renderPriorityDistribution","renderAssignmentList","acc","assignment","priorityScore","high","medium","low","counts","count","ranges","colors","range","renderAssignmentDetail","priorityColor","points","maxPoints","dueDate","toLocaleDateString","course","Math","round","logDetectionEvent","updatePerformanceAnalysis","analysis","DateDebugPanel","header","content","updateDebugInfo","totalDates","renderTypeDistribution","types","renderDetections","detections","due","availability","unlock","unknown","charAt","toUpperCase","detection","text","date","element","logDateDetection","PerformanceLogger","logPerformance","calculateSummary","unshift","pop","STORAGE_KEY","sortedMetrics","getPerformanceAnalysis","trends","hotspots","recommendations","operationMetrics","forEach","operation","durations","recent","floor","older","recentAvg","calculateAverage","olderAvg","percentageChange","trend","calculateTrend","frequency","h","generateRecommendations","numbers","n","degradingOps","t","op","hotspot","clearLogs","remove","DebugManager","config","enabled","logLevel","showDateDebug","showAssignmentDebug","showPriorityDebug","showPerformanceMetrics","mainPanel","datePanel","performanceLogger","initializeKeyboardShortcuts","initializePerformanceLogging","loadDebugConfig","setInterval","async","validMetrics","toggleDebugMode","togglePerformanceMetrics","saveDebugConfig","sync","debugConfig","applyConfig","getLogLevel","disableAllPanels","querySelectorAll","updateDebugConfig","newConfig","getMainPanel","getDatePanel","isDebugEnabled","getConfig","clearPerformanceLogs","SettingsManager","defaultSettings","priorityWeights","GRADE_IMPACT","COURSE_GRADE","DUE_DATE","typeWeights","quiz","discussion","announcement","displayOptions","showCourseNames","showGradeImpact","showPriorityScores","highlightOverdue","refreshInterval","debugSettings","icalUrl","debugManager","initializeEventListeners","loadSettings","saveSettings","resetSettings","slider","valueDisplay","validateWeights","target","checked","updateDebugSettings","settings","applySettingsToForm","toString","updateWeightDisplays","parseInt","parseFloat","notifySettingsChanged","showSaveSuccess","showSaveError","totalWeight","validation","className","runtime","sendMessage","tabs","query","url","tab","saveBtn","originalText","classList","add","setTimeout","window"],"sourceRoot":""}