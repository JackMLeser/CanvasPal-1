{"version":3,"file":"popup.js","mappings":"mBACA,MAAMA,EACF,WAAAC,GACIC,KAAKC,eAAiBC,SAASC,eAAe,kBAC9CH,KAAKI,WAAaF,SAASC,eAAe,eAC1CH,KAAKK,cAAgBH,SAASC,eAAe,kBAC7CH,KAAKM,2BACLN,KAAKO,iBACT,CACA,wBAAAD,GACI,IAAIE,EAC+C,QAAlDA,EAAKN,SAASC,eAAe,uBAAoC,IAAPK,GAAyBA,EAAGC,iBAAiB,SAAS,KAC7GC,OAAOC,QAAQC,iBAAiB,IAGpCF,OAAOC,QAAQE,UAAUC,aAAaC,IACb,kBAAjBA,EAAQC,MACRhB,KAAKiB,aAAa,SAAU,IAAIC,MAChClB,KAAKO,mBAEiB,eAAjBQ,EAAQC,KACbhB,KAAKiB,aAAa,cAAe,MAEX,wBAAjBF,EAAQC,MACbhB,KAAKmB,kBAAkBJ,EAAQK,YACnC,GAER,CACA,qBAAMb,GACFP,KAAKC,eAAeoB,UAAY,oDAChC,IACI,MAAMC,QAAiBZ,OAAOC,QAAQY,YAAY,CAAEP,KAAM,oBAC1D,GAAIM,EAASE,MAET,YADAxB,KAAKC,eAAeoB,UAAY,6BAA6BC,EAASE,eAG1E,IAAKC,MAAMC,QAAQJ,IAAiC,IAApBA,EAASK,OAErC,YADA3B,KAAKC,eAAeoB,UAAY,0DAGpCrB,KAAKmB,kBAAkBG,EAC3B,CACA,MAAOE,GACHI,QAAQJ,MAAM,6BAA8BA,GAC5CxB,KAAKC,eAAeoB,UAAY,qDACpC,CACJ,CACA,iBAAAF,CAAkBC,GACd,IAAKA,EAAYO,OAEb,YADA3B,KAAKC,eAAeoB,UAAY,0DAGpC,MAAMQ,EAAoBT,EAAYU,MAAK,CAACC,EAAGC,IAAMA,EAAEC,cAAgBF,EAAEE,gBACzEjC,KAAKC,eAAeoB,UAAYQ,EAC3BK,KAAIC,GAAcnC,KAAKoC,wBAAwBD,KAC/CE,KAAK,GACd,CACA,uBAAAD,CAAwBD,GACpB,MAAMG,EAAgBtC,KAAKuC,iBAAiBJ,EAAWF,eACjDO,EAAU,IAAItB,KAAKiB,EAAWK,SACpC,MAAO,6CAC2BF,eAA2BH,EAAWM,kFAEtDN,EAAWO,0JAGSP,EAAWM,uCACxBN,EAAWQ,UAAY,UAAY,yEACDR,EAAWM,yKAIpCN,EAAWS,gEACJJ,EAAQK,wBAAwBL,EAAQM,mDACnEX,EAAWY,YAAc,+BAA+BZ,EAAWY,qBAAuB,2DAC1DC,KAAKC,MAAiC,IAA3Bd,EAAWF,6EAIxE,CACA,gBAAAM,CAAiBW,GACb,OAAIA,GAAS,GACF,gBACPA,GAAS,GACF,kBACJ,cACX,CACA,YAAAjC,CAAakC,EAAQC,GACjBpD,KAAKI,WAAWiD,YAAcF,EAC1BC,IACApD,KAAKK,cAAcgD,YAAc,YAAYD,EAAUN,uBAE/D,EAGJQ,OAAOC,uBAAyB,CAACC,EAAcb,KAC3CjC,OAAOC,QAAQY,YAAY,CACvBP,KAAM,oBACNwC,eACAb,aACF,EAGNzC,SAASO,iBAAiB,oBAAoB,KAC1C,IAAIX,CAAc,G","sources":["webpack://canvaspal/./src/popup/popup.ts"],"sourcesContent":["\"use strict\";\nclass PopupManager {\n    constructor() {\n        this.assignmentList = document.getElementById('assignmentList');\n        this.syncStatus = document.getElementById('sync-status');\n        this.dataFreshness = document.getElementById('data-freshness');\n        this.initializeEventListeners();\n        this.loadAssignments();\n    }\n    initializeEventListeners() {\n        var _a;\n        (_a = document.getElementById('openSettings')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', () => {\n            chrome.runtime.openOptionsPage();\n        });\n        // Listen for sync updates\n        chrome.runtime.onMessage.addListener((message) => {\n            if (message.type === 'SYNC_COMPLETE') {\n                this.updateStatus('Synced', new Date());\n                this.loadAssignments();\n            }\n            else if (message.type === 'SYNC_ERROR') {\n                this.updateStatus('Sync Failed', null);\n            }\n            else if (message.type === 'ASSIGNMENTS_UPDATED') {\n                this.renderAssignments(message.assignments);\n            }\n        });\n    }\n    async loadAssignments() {\n        this.assignmentList.innerHTML = '<div class=\"loading\">Loading assignments...</div>';\n        try {\n            const response = await chrome.runtime.sendMessage({ type: 'GET_ASSIGNMENTS' });\n            if (response.error) {\n                this.assignmentList.innerHTML = `<div class=\"error\">Error: ${response.error}</div>`;\n                return;\n            }\n            if (!Array.isArray(response) || response.length === 0) {\n                this.assignmentList.innerHTML = '<div class=\"no-assignments\">No assignments found</div>';\n                return;\n            }\n            this.renderAssignments(response);\n        }\n        catch (error) {\n            console.error('Error loading assignments:', error);\n            this.assignmentList.innerHTML = '<div class=\"error\">Failed to load assignments</div>';\n        }\n    }\n    renderAssignments(assignments) {\n        if (!assignments.length) {\n            this.assignmentList.innerHTML = '<div class=\"no-assignments\">No assignments found</div>';\n            return;\n        }\n        const sortedAssignments = assignments.sort((a, b) => b.priorityScore - a.priorityScore);\n        this.assignmentList.innerHTML = sortedAssignments\n            .map(assignment => this.createAssignmentElement(assignment))\n            .join('');\n    }\n    createAssignmentElement(assignment) {\n        const priorityClass = this.getPriorityClass(assignment.priorityScore);\n        const dueDate = new Date(assignment.dueDate);\n        return `\n            <div class=\"assignment-item ${priorityClass}\" data-id=\"${assignment.id}\">\n                <div class=\"assignment-header\">\n                    <h3>${assignment.title}</h3>\n                    <div class=\"completion\">\n                        <input type=\"checkbox\" \n                               id=\"complete-${assignment.id}\"\n                               ${assignment.completed ? 'checked' : ''} \n                               onchange=\"handleCompletionChange('${assignment.id}', this.checked)\" />\n                    </div>\n                </div>\n                <div class=\"assignment-details\">\n                    <div class=\"course\">${assignment.course}</div>\n                    <div class=\"due-date\">Due: ${dueDate.toLocaleDateString()} ${dueDate.toLocaleTimeString()}</div>\n                    ${assignment.gradeWeight ? `<div class=\"weight\">Weight: ${assignment.gradeWeight}%</div>` : ''}\n                    <div class=\"priority\">Priority: ${Math.round(assignment.priorityScore * 100)}%</div>\n                </div>\n            </div>\n        `;\n    }\n    getPriorityClass(score) {\n        if (score >= 0.7)\n            return 'high-priority';\n        if (score >= 0.4)\n            return 'medium-priority';\n        return 'low-priority';\n    }\n    updateStatus(status, timestamp) {\n        this.syncStatus.textContent = status;\n        if (timestamp) {\n            this.dataFreshness.textContent = `Updated: ${timestamp.toLocaleTimeString()}`;\n        }\n    }\n}\n// Handle completion change globally\nwindow.handleCompletionChange = (assignmentId, completed) => {\n    chrome.runtime.sendMessage({\n        type: 'UPDATE_COMPLETION',\n        assignmentId,\n        completed\n    });\n};\n// Initialize popup\ndocument.addEventListener('DOMContentLoaded', () => {\n    new PopupManager();\n});\n"],"names":["PopupManager","constructor","this","assignmentList","document","getElementById","syncStatus","dataFreshness","initializeEventListeners","loadAssignments","_a","addEventListener","chrome","runtime","openOptionsPage","onMessage","addListener","message","type","updateStatus","Date","renderAssignments","assignments","innerHTML","response","sendMessage","error","Array","isArray","length","console","sortedAssignments","sort","a","b","priorityScore","map","assignment","createAssignmentElement","join","priorityClass","getPriorityClass","dueDate","id","title","completed","course","toLocaleDateString","toLocaleTimeString","gradeWeight","Math","round","score","status","timestamp","textContent","window","handleCompletionChange","assignmentId"],"sourceRoot":""}