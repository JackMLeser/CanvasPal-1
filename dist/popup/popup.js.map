{"version":3,"file":"popup/popup.js","mappings":"yBAOA,MAAMA,EAGF,WAAAC,GAFQ,KAAAC,YAA4B,GAGhCC,KAAKC,2BACLD,KAAKE,iBACT,CAEQ,wBAAAD,GACJE,SAASC,eAAe,iBAAiBC,iBAAiB,SAAS,KAC3DC,OAAOC,QAAQC,iBACfF,OAAOC,QAAQC,iB,GAG3B,CAEQ,qBAAMN,GACV,IACI,MAAMO,QAAaH,OAAOG,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IACpE,IAAKH,EAAK,IAAII,GAEV,YADAb,KAAKc,kBAAkB,uBAI3BR,OAAOG,KAAKM,YAAYN,EAAK,GAAGI,GAAI,CAAEG,OAAQ,cAAgBC,IACtDX,OAAOC,QAAQW,UACflB,KAAKc,kBAAkB,iCAItBG,GAAaA,EAASE,QAatBF,EAASG,QAAWH,EAASG,OAAOrB,aAKzCC,KAAKD,YAAckB,EAASG,OAAOrB,YAAYsB,KAAKC,IAA4C,CAC5FC,MAAOD,EAAWE,KAClBC,OAAQR,EAASG,OAAOM,WACxBC,QAAS,IAAIC,KACbC,cAAe,EACfC,WAAW,EACXC,KAAM,aACNC,OAAQV,EAAWU,OACnBC,UAAWX,EAAWY,mBAE1BlC,KAAKmC,qBAdDnC,KAAKc,kBAAkB,wBAZvBR,OAAOG,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAASH,IACtD,MAAM2B,EAAM3B,EAAK,IAAI2B,IACjBA,GAAOA,EAAIC,SAAS,qBACpBrC,KAAKc,kBAAkB,2CAEvBd,KAAKc,kBAAkB,kB,GAqBX,G,CAG9B,MAAOwB,GACLtC,KAAKc,kBAAkB,6B,CAE/B,CAEQ,iBAAAqB,GACJ,MAAMI,EAAiBpC,SAASC,eAAe,kBAC1CmC,IAELA,EAAeC,UAAYxC,KAAKD,YAC3BsB,KAAIC,GAActB,KAAKyC,wBAAwBnB,KAC/CoB,KAAK,IACd,CAEQ,uBAAAD,CAAwBnB,GAE5B,MAAO,6CADetB,KAAK2C,iBAAiBrB,EAAWO,mEAGfP,EAAWC,+DACVD,EAAWG,uEACJzB,KAAK4C,WAAWtB,EAAWK,8CAG/E,CAEQ,gBAAAgB,CAAiBd,GACrB,OAAIA,EAAgB,GAAY,gBAC5BA,EAAgB,GAAY,kBACzB,cACX,CAEQ,UAAAe,CAAWC,GACf,OAAO,IAAIjB,KAAKiB,GAAMC,mBAAmB,QAAS,CAC9CC,MAAO,QACPC,IAAK,UACLC,KAAM,WAEd,CAEQ,iBAAAnC,CAAkBoC,GACtB,MAAMX,EAAiBpC,SAASC,eAAe,kBAC3CmC,IACAA,EAAeC,UAAY,uEAEjBU,0CAIlB,EAIJC,OAAO9C,iBAAiB,oBAAoB,KACxC,IAAIR,CAAc,G","sources":["webpack://canvaspal/./src/popup/popup.ts"],"sourcesContent":["import { Assignment, GradeData } from '../types/models';\n\ninterface GradeResponse {\n    success: boolean;\n    grades: GradeData | null;\n}\n\nclass PopupManager {\n    private assignments: Assignment[] = [];\n\n    constructor() {\n        this.initializeEventListeners();\n        this.loadAssignments();\n    }\n\n    private initializeEventListeners(): void {\n        document.getElementById('openSettings')?.addEventListener('click', () => {\n            if (chrome.runtime.openOptionsPage) {\n                chrome.runtime.openOptionsPage();\n            }\n        });\n    }\n\n    private async loadAssignments(): Promise<void> {\n        try {\n            const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n            if (!tabs[0]?.id) {\n                this.showNoAssignments('No active tab found');\n                return;\n            }\n\n            chrome.tabs.sendMessage(tabs[0].id, { action: \"getGrades\" }, (response) => {\n                if (chrome.runtime.lastError) {\n                    this.showNoAssignments('Error communicating with page');\n                    return;\n                }\n\n                if (!response || !response.success) {\n                    // Check if we're on the main Canvas page\n                    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n                        const url = tabs[0]?.url;\n                        if (url && url.endsWith('.instructure.com/')) {\n                            this.showNoAssignments('Please navigate to a course grades page');\n                        } else {\n                            this.showNoAssignments('No grades found');\n                        }\n                    });\n                    return;\n                }\n\n                if (!response.grades || !response.grades.assignments) {\n                    this.showNoAssignments('No assignments found');\n                    return;\n                }\n\n                this.assignments = response.grades.assignments.map((assignment: GradeData['assignments'][0]) => ({\n                    title: assignment.name,\n                    course: response.grades.courseName,\n                    dueDate: new Date(), // Since grade data doesn't include due dates\n                    priorityScore: 0, // Calculate this based on grade data\n                    completed: false,\n                    type: 'assignment',\n                    points: assignment.points,\n                    maxPoints: assignment.pointsPossible\n                }));\n                this.renderAssignments();\n            });\n\n        } catch (error) {\n            this.showNoAssignments('Failed to load assignments');\n        }\n    }\n\n    private renderAssignments(): void {\n        const assignmentList = document.getElementById('assignmentList');\n        if (!assignmentList) return;\n\n        assignmentList.innerHTML = this.assignments\n            .map(assignment => this.createAssignmentElement(assignment))\n            .join('');\n    }\n\n    private createAssignmentElement(assignment: Assignment): string {\n        const priorityClass = this.getPriorityClass(assignment.priorityScore);\n        return `\n            <div class=\"assignment-item ${priorityClass}\">\n                <div class=\"assignment-title\">${assignment.title}</div>\n                <div class=\"assignment-course\">${assignment.course}</div>\n                <div class=\"assignment-due-date\">Due: ${this.formatDate(assignment.dueDate)}</div>\n            </div>\n        `;\n    }\n\n    private getPriorityClass(priorityScore: number): string {\n        if (priorityScore > 0.7) return 'high-priority';\n        if (priorityScore > 0.4) return 'medium-priority';\n        return 'low-priority';\n    }\n\n    private formatDate(date: Date): string {\n        return new Date(date).toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric'\n        });\n    }\n\n    private showNoAssignments(message: string): void {\n        const assignmentList = document.getElementById('assignmentList');\n        if (assignmentList) {\n            assignmentList.innerHTML = `\n                <div class=\"no-assignments\">\n                    ${message}\n                </div>\n            `;\n        }\n    }\n}\n\n// Initialize popup\nwindow.addEventListener('DOMContentLoaded', () => {\n    new PopupManager();\n});\n"],"names":["PopupManager","constructor","assignments","this","initializeEventListeners","loadAssignments","document","getElementById","addEventListener","chrome","runtime","openOptionsPage","tabs","query","active","currentWindow","id","showNoAssignments","sendMessage","action","response","lastError","success","grades","map","assignment","title","name","course","courseName","dueDate","Date","priorityScore","completed","type","points","maxPoints","pointsPossible","renderAssignments","url","endsWith","error","assignmentList","innerHTML","createAssignmentElement","join","getPriorityClass","formatDate","date","toLocaleDateString","month","day","year","message","window"],"sourceRoot":""}