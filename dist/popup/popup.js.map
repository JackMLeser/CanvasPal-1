{"version":3,"file":"popup/popup.js","mappings":"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","sources":["webpack://canvaspal/./src/popup/popup.ts"],"sourcesContent":["import { Assignment, GradeData } from '../types/models';\n\ninterface GradeResponse {\n    success: boolean;\n    grades: GradeData | null;\n}\n\ninterface Settings {\n    showOutsideCanvas: boolean;\n    refreshInterval: number;\n}\n\nclass PopupManager {\n    private assignments: Assignment[] = [];\n    private popupContainer: HTMLElement | null;\n    private assignmentsButton: HTMLElement | null;\n    private settingsContent: HTMLElement | null;\n    private settings: Settings = {\n        showOutsideCanvas: true,\n        refreshInterval: 60\n    };\n\n    constructor() {\n        this.popupContainer = document.getElementById('popupContainer');\n        this.assignmentsButton = document.getElementById('assignmentsButton');\n        this.settingsContent = document.getElementById('settingsContent');\n        this.initializeEventListeners();\n        this.loadSettings();\n        this.loadAssignments();\n    }\n\n    private initializeEventListeners(): void {\n        // Toggle popup\n        this.assignmentsButton?.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.togglePopup();\n        });\n\n        // Close popup when clicking outside\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            if (!this.popupContainer?.contains(target) && \n                !this.assignmentsButton?.contains(target)) {\n                this.closePopup();\n            }\n        });\n\n        // Settings panel toggle\n        document.getElementById('openSettings')?.addEventListener('click', () => {\n            this.showSettings();\n        });\n\n        document.getElementById('backButton')?.addEventListener('click', () => {\n            this.hideSettings();\n        });\n\n        // Settings controls\n        document.getElementById('showOutsideCanvas')?.addEventListener('change', (e) => {\n            const target = e.target as HTMLInputElement;\n            this.settings.showOutsideCanvas = target.checked;\n            this.saveSettings();\n        });\n\n        document.getElementById('refreshInterval')?.addEventListener('change', (e) => {\n            const target = e.target as HTMLSelectElement;\n            this.settings.refreshInterval = parseInt(target.value);\n            this.saveSettings();\n        });\n    }\n\n    private togglePopup(): void {\n        this.popupContainer?.classList.toggle('show');\n        if (this.popupContainer?.classList.contains('show')) {\n            this.loadAssignments();\n        }\n    }\n\n    private closePopup(): void {\n        this.popupContainer?.classList.remove('show');\n        this.hideSettings();\n    }\n\n    private showSettings(): void {\n        this.settingsContent?.classList.add('show');\n    }\n\n    private hideSettings(): void {\n        this.settingsContent?.classList.remove('show');\n    }\n\n    private async loadSettings(): Promise<void> {\n        try {\n            const result = await chrome.storage.local.get(['settings']);\n            if (result.settings) {\n                this.settings = result.settings;\n                // Update UI\n                const showOutsideCanvas = document.getElementById('showOutsideCanvas') as HTMLInputElement;\n                const refreshInterval = document.getElementById('refreshInterval') as HTMLSelectElement;\n                if (showOutsideCanvas) showOutsideCanvas.checked = this.settings.showOutsideCanvas;\n                if (refreshInterval) refreshInterval.value = this.settings.refreshInterval.toString();\n            }\n        } catch (error) {\n            console.error('Failed to load settings:', error);\n        }\n    }\n\n    private async saveSettings(): Promise<void> {\n        try {\n            await chrome.storage.local.set({ settings: this.settings });\n            // Update button visibility if not on Canvas\n            if (!window.location.href.includes('.instructure.com')) {\n                this.assignmentsButton!.style.display = \n                    this.settings.showOutsideCanvas ? 'flex' : 'none';\n            }\n        } catch (error) {\n            console.error('Failed to save settings:', error);\n        }\n    }\n\n    private async loadAssignments(): Promise<void> {\n        try {\n            const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n            if (!tabs[0]?.id) {\n                this.showNoAssignments('No active tab found');\n                return;\n            }\n\n            // Get assignments from background script\n            const response = await chrome.runtime.sendMessage({ type: 'GET_ASSIGNMENTS' });\n            \n            if (!response || !response.assignments) {\n                const url = tabs[0]?.url;\n                if (url?.includes('.instructure.com')) {\n                    if (url.includes('/grades')) {\n                        this.showNoAssignments('Loading grades...');\n                        await chrome.runtime.sendMessage({ type: 'REFRESH_ASSIGNMENTS' });\n                    } else {\n                        this.showNoAssignments('Please navigate to a course grades page');\n                    }\n                } else {\n                    this.showNoAssignments('Please navigate to Canvas');\n                }\n                return;\n            }\n\n            this.assignments = response.assignments;\n            this.updateAssignmentCount();\n            this.renderAssignments();\n\n        } catch (error) {\n            this.showNoAssignments('Failed to load assignments');\n        }\n    }\n\n    private updateAssignmentCount(): void {\n        if (this.assignmentsButton) {\n            this.assignmentsButton.textContent = this.assignments.length.toString();\n            this.assignmentsButton.classList.toggle('has-assignments', this.assignments.length > 0);\n        }\n\n        const taskCount = document.getElementById('taskCount');\n        if (taskCount) {\n            taskCount.textContent = `${this.assignments.length} Task${this.assignments.length !== 1 ? 's' : ''}`;\n        }\n    }\n\n    private renderAssignments(): void {\n        const assignmentList = document.getElementById('assignmentList');\n        if (!assignmentList) return;\n\n        if (this.assignments.length === 0) {\n            this.showNoAssignments('No assignments found');\n            return;\n        }\n\n        assignmentList.innerHTML = this.assignments\n            .map(assignment => this.createAssignmentElement(assignment))\n            .join('');\n    }\n\n    private createAssignmentElement(assignment: Assignment): string {\n        const priorityClass = this.getPriorityClass(assignment.priorityScore);\n        const dueDate = this.formatDate(assignment.dueDate);\n        const timeStatus = this.getTimeStatus(dueDate);\n\n        return `\n            <div class=\"assignment-card ${priorityClass}\">\n                <div class=\"assignment-title\">\n                    <a href=\"${assignment.url || '#'}\" target=\"_blank\">\n                        ${assignment.title}\n                    </a>\n                </div>\n                <div class=\"assignment-course\">${assignment.course}</div>\n                <div class=\"due-info\">\n                    <span class=\"due-date\">Due: ${dueDate}</span>\n                    <span class=\"time-remaining ${timeStatus.class}\">${timeStatus.text}</span>\n                </div>\n                <div class=\"points\">${assignment.points} points</div>\n            </div>\n        `;\n    }\n\n    private getPriorityClass(priorityScore: number): string {\n        if (priorityScore > 0.7) return 'high-priority';\n        if (priorityScore > 0.4) return 'medium-priority';\n        return 'low-priority';\n    }\n\n    private formatDate(date: string): string {\n        if (date === 'All Day' || date === 'No due date') {\n            return date;\n        }\n\n        const dateStr = date.startsWith('Due: ') ? date.substring(5) : date;\n        \n        try {\n            const dateObj = new Date(dateStr);\n            if (!isNaN(dateObj.getTime())) {\n                return dateObj.toLocaleDateString('en-US', {\n                    weekday: 'short',\n                    month: 'short',\n                    day: 'numeric',\n                    hour: 'numeric',\n                    minute: 'numeric'\n                });\n            }\n            return date;\n        } catch {\n            return date;\n        }\n    }\n\n    private getTimeStatus(dueDate: string): { text: string; class: string } {\n        if (dueDate === 'No due date') {\n            return { text: 'No due date', class: '' };\n        }\n\n        try {\n            const due = new Date(dueDate);\n            const now = new Date();\n            const diffDays = Math.ceil((due.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n            if (diffDays < 0) return { text: 'Past due!', class: 'urgent' };\n            if (diffDays === 0) return { text: 'Due today!', class: 'urgent' };\n            if (diffDays === 1) return { text: 'Due tomorrow!', class: 'urgent' };\n            if (diffDays <= 3) return { text: `Due in ${diffDays} days`, class: 'soon' };\n            return { text: `${diffDays} days left`, class: '' };\n        } catch {\n            return { text: 'Invalid date', class: '' };\n        }\n    }\n\n    private showNoAssignments(message: string): void {\n        const assignmentList = document.getElementById('assignmentList');\n        if (assignmentList) {\n            assignmentList.innerHTML = `\n                <div class=\"no-assignments\">\n                    ${message}\n                </div>\n            `;\n        }\n    }\n}\n\n// Initialize popup\nwindow.addEventListener('DOMContentLoaded', () => {\n    new PopupManager();\n});\n"],"names":["PopupManager","constructor","assignments","settings","showOutsideCanvas","refreshInterval","this","popupContainer","document","getElementById","assignmentsButton","settingsContent","initializeEventListeners","loadSettings","loadAssignments","addEventListener","e","stopPropagation","togglePopup","target","contains","closePopup","showSettings","hideSettings","checked","saveSettings","parseInt","value","classList","toggle","remove","add","result","chrome","storage","local","get","toString","error","console","set","window","location","href","includes","style","display","tabs","query","active","currentWindow","id","showNoAssignments","response","runtime","sendMessage","type","url","updateAssignmentCount","renderAssignments","textContent","length","taskCount","assignmentList","innerHTML","map","assignment","createAssignmentElement","join","priorityClass","getPriorityClass","priorityScore","dueDate","formatDate","timeStatus","getTimeStatus","title","course","class","text","points","date","dateStr","startsWith","substring","dateObj","Date","isNaN","getTime","toLocaleDateString","weekday","month","day","hour","minute","due","now","diffDays","Math","ceil","message"],"sourceRoot":""}