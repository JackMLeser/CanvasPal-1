{"version":3,"file":"popup/popup.js","mappings":"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","sources":["webpack://canvaspal/./src/utils/logger.ts","webpack://canvaspal/./src/utils/debugManager.ts","webpack://canvaspal/./src/utils/dateDebugPanel.ts","webpack://canvaspal/./src/utils/debugPanel.ts","webpack://canvaspal/./src/utils/performanceLogger.ts","webpack://canvaspal/./src/utils/assignmentRenderer.ts","webpack://canvaspal/./src/utils/performanceMonitor.ts","webpack://canvaspal/webpack/bootstrap","webpack://canvaspal/./src/popup/popup.ts"],"sourcesContent":["export enum LogLevel {\n    DEBUG = 0,\n    INFO = 1,\n    WARN = 2,\n    ERROR = 3\n}\n\ninterface LogEntry {\n    timestamp: string;\n    level: LogLevel;\n    message: string;\n    data?: any;\n    stack?: string;\n}\n\nexport class Logger {\n    private static readonly MAX_LOGS = 1000;\n    private static instances: Map<string, Logger> = new Map();\n    private context: string;\n    private currentLevel: LogLevel;\n\n    public constructor(context: string, level: LogLevel = LogLevel.INFO) {\n        this.context = context;\n        this.currentLevel = level;\n        this.cleanOldLogs();\n    }\n\n    public static getInstance(context: string, level: LogLevel = LogLevel.INFO): Logger {\n        const key = `${context}-${level}`;\n        if (!this.instances.has(key)) {\n            this.instances.set(key, new Logger(context, level));\n        }\n        return this.instances.get(key)!;\n    }\n\n    setLevel(level: LogLevel): void {\n        this.currentLevel = level;\n    }\n\n    debug(message: string, data?: any): void {\n        this.log(LogLevel.DEBUG, message, data);\n    }\n\n    info(message: string, data?: any): void {\n        this.log(LogLevel.INFO, message, data);\n    }\n\n    warn(message: string, data?: any): void {\n        this.log(LogLevel.WARN, message, data);\n    }\n\n    error(message: string, data?: any): void {\n        this.log(LogLevel.ERROR, message, data);\n    }\n\n    public async log(level: LogLevel, message: string, ...args: any[]): Promise<void> {\n        if (level >= this.currentLevel) {\n            const timestamp = new Date().toISOString();\n            const prefix = this.getLogPrefix(level);\n            const formattedMessage = `[${timestamp}] ${prefix} [${this.context}] ${message}`;\n\n            if (args.length) {\n                const formattedData = this.formatLogData(args);\n                console.log(formattedMessage, formattedData);\n            } else {\n                console.log(formattedMessage);\n            }\n\n            const entry: LogEntry = {\n                timestamp,\n                level,\n                message,\n                data: args,\n                stack: Error().stack\n            };\n\n            this.saveLogs(entry);\n\n            if (level === LogLevel.ERROR) {\n                this.notifyError(entry);\n            }\n        }\n    }\n\n    private getLogPrefix(level: LogLevel): string {\n        switch (level) {\n            case LogLevel.DEBUG:\n                return '🔍 DEBUG:';\n            case LogLevel.INFO:\n                return '📢 INFO:';\n            case LogLevel.WARN:\n                return '⚠️ WARN:';\n            case LogLevel.ERROR:\n                return '❌ ERROR:';\n            default:\n                return '📢';\n        }\n    }\n\n    private formatLogData(data: any): any {\n        if (data instanceof Element) {\n            return {\n                tagName: data.tagName,\n                id: data.id,\n                className: data.className,\n                textContent: data.textContent?.substring(0, 100) + '...',\n                html: data.outerHTML?.substring(0, 200) + '...'\n            };\n        }\n\n        if (Array.isArray(data)) {\n            return data.map(item => this.formatLogData(item));\n        }\n\n        if (data && typeof data === 'object') {\n            const formatted: Record<string, any> = {};\n            for (const [key, value] of Object.entries(data)) {\n                formatted[key] = this.formatLogData(value);\n            }\n            return formatted;\n        }\n\n        return data;\n    }\n\n    private async saveLogs(entry: LogEntry): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        logs.push(entry);\n\n        if (logs.length > Logger.MAX_LOGS) {\n            logs.splice(0, logs.length - Logger.MAX_LOGS);\n        }\n\n        await chrome.storage.local.set({ logs });\n    }\n\n    private async cleanOldLogs(): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n        const filteredLogs = logs.filter((log: LogEntry) => \n            new Date(log.timestamp) > thirtyDaysAgo\n        );\n\n        await chrome.storage.local.set({ logs: filteredLogs });\n    }\n\n    private notifyError(entry: LogEntry): void {\n        chrome.notifications.create({\n            type: 'basic',\n            iconUrl: 'icons/icon128.png',\n            title: 'CanvasPal Error',\n            message: entry.message,\n            priority: 2\n        });\n    }\n\n    async getLogs(level?: LogLevel): Promise<LogEntry[]> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        return level ? logs.filter((log: LogEntry) => log.level === level) : logs;\n    }\n}\n\nexport const logger = Logger.getInstance('default');\n","import { Logger } from './logger';\nimport { DebugPanel } from './debugPanel';\nimport { DateDebugPanel } from './dateDebugPanel';\nimport { PerformanceMonitor } from './performanceMonitor';\nimport { PerformanceLogger } from './performanceLogger';\n\ninterface DebugConfig {\n    enabled: boolean;\n    logLevel: 'debug' | 'info' | 'warn' | 'error';\n    showDateDebug: boolean;\n    showAssignmentDebug: boolean;\n    showPriorityDebug: boolean;\n    showPerformanceMetrics: boolean;\n}\n\nexport class DebugManager {\n    private logger: Logger;\n    private mainPanel: DebugPanel;\n    private datePanel: DateDebugPanel;\n    private performanceMonitor: PerformanceMonitor;\n    private performanceLogger: PerformanceLogger;\n    private config: DebugConfig = {\n        enabled: false,\n        logLevel: 'info',\n        showDateDebug: false,\n        showAssignmentDebug: false,\n        showPriorityDebug: false,\n        showPerformanceMetrics: false\n    };\n\n    constructor() {\n        this.logger = new Logger('DebugManager');\n        this.mainPanel = new DebugPanel();\n        this.datePanel = new DateDebugPanel();\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.performanceLogger = new PerformanceLogger();\n        this.initializeKeyboardShortcuts();\n        this.initializePerformanceLogging();\n        this.loadDebugConfig();\n    }\n\n    private initializePerformanceLogging(): void {\n        // Log performance metrics every 5 minutes if debug mode is enabled\n        setInterval(async () => {\n            if (this.config.enabled && this.config.showPerformanceMetrics) {\n                const report = this.performanceMonitor.getReport();\n                // Filter out metrics with undefined duration and ensure proper type\n                const validMetrics = report.metrics.filter(m => m.duration !== undefined).map(m => ({\n                    name: m.name,\n                    duration: m.duration as number,\n                    metadata: m.metadata\n                }));\n                \n                await this.performanceLogger.logPerformance(validMetrics);\n                \n                if (this.config.showPerformanceMetrics) {\n                    await this.updatePerformanceAnalysis();\n                }\n            }\n        }, 5 * 60 * 1000);\n    }\n\n    private async updatePerformanceAnalysis(): Promise<void> {\n        const analysis = await this.performanceLogger.getPerformanceAnalysis();\n        this.mainPanel.updatePerformanceAnalysis(analysis);\n    }\n\n    private initializeKeyboardShortcuts(): void {\n        document.addEventListener('keydown', (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey) {\n                switch (e.key) {\n                    case '`': // Toggle all debug features\n                        e.preventDefault();\n                        this.toggleDebugMode();\n                        break;\n                    case 'D': // Main debug panel\n                        e.preventDefault();\n                        this.mainPanel.toggleVisibility();\n                        break;\n                    case 'T': // Date debug panel\n                        e.preventDefault();\n                        this.datePanel.toggleVisibility();\n                        break;\n                    case 'P': // Performance metrics\n                        e.preventDefault();\n                        this.togglePerformanceMetrics();\n                        break;\n                }\n            }\n        });\n    }\n\n    private async togglePerformanceMetrics(): Promise<void> {\n        this.config.showPerformanceMetrics = !this.config.showPerformanceMetrics;\n        if (this.config.showPerformanceMetrics) {\n            await this.updatePerformanceAnalysis();\n        }\n        this.saveDebugConfig();\n    }\n\n    private async loadDebugConfig(): Promise<void> {\n        try {\n            const result = await chrome.storage.sync.get('debugConfig');\n            if (result.debugConfig) {\n                this.config = { ...this.config, ...result.debugConfig };\n                this.applyConfig();\n            }\n        } catch (error) {\n            this.logger.error('Error loading debug config:', error);\n        }\n    }\n\n    private async saveDebugConfig(): Promise<void> {\n        try {\n            await chrome.storage.sync.set({ debugConfig: this.config });\n        } catch (error) {\n            this.logger.error('Error saving debug config:', error);\n        }\n    }\n\n    private applyConfig(): void {\n        if (!this.config.enabled) {\n            this.disableAllPanels();\n            return;\n        }\n\n        this.logger.setLevel(this.getLogLevel());\n        \n        if (this.config.showDateDebug) {\n            this.datePanel.toggleVisibility();\n        }\n        \n        if (this.config.showAssignmentDebug || this.config.showPriorityDebug) {\n            this.mainPanel.toggleVisibility();\n        }\n    }\n\n    private disableAllPanels(): void {\n        const panels = document.querySelectorAll('[id$=\"-debug-panel\"]');\n        panels.forEach(panel => {\n            (panel as HTMLElement).style.display = 'none';\n        });\n    }\n\n    public toggleDebugMode(): void {\n        this.config.enabled = !this.config.enabled;\n        this.applyConfig();\n        this.saveDebugConfig();\n\n        this.logger.info(`Debug mode ${this.config.enabled ? 'enabled' : 'disabled'}`);\n    }\n\n    public updateDebugConfig(newConfig: Partial<DebugConfig>): void {\n        this.config = { ...this.config, ...newConfig };\n        this.applyConfig();\n        this.saveDebugConfig();\n    }\n\n    private getLogLevel(): number {\n        switch (this.config.logLevel) {\n            case 'debug': return 0;\n            case 'info': return 1;\n            case 'warn': return 2;\n            case 'error': return 3;\n            default: return 1;\n        }\n    }\n\n    public getMainPanel(): DebugPanel {\n        return this.mainPanel;\n    }\n\n    public getDatePanel(): DateDebugPanel {\n        return this.datePanel;\n    }\n\n    public isDebugEnabled(): boolean {\n        return this.config.enabled;\n    }\n\n    public getConfig(): DebugConfig {\n        return { ...this.config };\n    }\n\n    public async clearPerformanceLogs(): Promise<void> {\n        await this.performanceLogger.clearLogs();\n        if (this.config.showPerformanceMetrics) {\n            await this.updatePerformanceAnalysis();\n        }\n    }\n\n    public async getPerformanceAnalysis() {\n        return this.performanceLogger.getPerformanceAnalysis();\n    }\n}","import { Logger } from './logger';\n\ninterface DateDebugInfo {\n    totalDates: number;\n    types: {\n        due: number;\n        availability: number;\n        unlock: number;\n        unknown: number;\n    };\n    detections: {\n        element: string;\n        text: string;\n        type: string;\n        date: string;\n    }[];\n}\n\nexport class DateDebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n\n    constructor() {\n        this.logger = new Logger('DateDebugPanel');\n        this.createPanel();\n    }\n\n    private createPanel(): void {\n        this.panel = document.createElement('div');\n        this.panel.id = 'date-debug-panel';\n        this.panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            left: 20px;\n            width: 300px;\n            max-height: 400px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 9999;\n            overflow-y: auto;\n            box-shadow: 0 0 10px rgba(0,0,0,0.5);\n            display: none;\n        `;\n\n        const header = document.createElement('div');\n        header.innerHTML = `\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;\">\n                <span style=\"color: #ffd700; font-weight: bold;\">📅 Date Detection Debug</span>\n                <button id=\"date-debug-close\" style=\"background: none; border: none; color: white; cursor: pointer;\">✕</button>\n            </div>\n        `;\n        this.panel.appendChild(header);\n\n        const content = document.createElement('div');\n        content.id = 'date-debug-content';\n        this.panel.appendChild(content);\n\n        document.body.appendChild(this.panel);\n\n        document.getElementById('date-debug-close')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n\n        // Add keyboard shortcut (Ctrl/Cmd + Shift + T)\n        document.addEventListener('keydown', (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            const isVisible = this.panel.style.display === 'block';\n            this.panel.style.display = isVisible ? 'none' : 'block';\n        }\n    }\n\n    public updateDebugInfo(info: DateDebugInfo): void {\n        const content = document.getElementById('date-debug-content');\n        if (!content) return;\n\n        content.innerHTML = `\n            <div class=\"date-stats\" style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${info.totalDates} date${info.totalDates !== 1 ? 's' : ''}\n                </div>\n                ${this.renderTypeDistribution(info.types)}\n            </div>\n            <div class=\"date-detections\">\n                <div style=\"color: #ffd700; margin-bottom: 8px;\">Detected Dates:</div>\n                ${this.renderDetections(info.detections)}\n            </div>\n        `;\n    }\n\n    private renderTypeDistribution(types: DateDebugInfo['types']): string {\n        const colors = {\n            due: '#ff6b6b',\n            availability: '#4CAF50',\n            unlock: '#2196F3',\n            unknown: '#9e9e9e'\n        };\n\n        return Object.entries(types)\n            .map(([type, count]) => `\n                <div style=\"margin-left: 10px; color: ${colors[type as keyof typeof colors]};\">\n                    ${type.charAt(0).toUpperCase() + type.slice(1)}: ${count}\n                </div>\n            `).join('');\n    }\n\n    private renderDetections(detections: DateDebugInfo['detections']): string {\n        return detections\n            .map(detection => `\n                <div style=\"margin: 8px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px;\">\n                    <div style=\"margin-bottom: 4px; color: #90EE90;\">\n                        ${detection.text}\n                    </div>\n                    <div style=\"font-size: 11px; color: #ADD8E6;\">\n                        Type: ${detection.type}\n                    </div>\n                    <div style=\"font-size: 11px; color: #DDA0DD;\">\n                        Parsed: ${detection.date}\n                    </div>\n                    <div style=\"font-size: 11px; color: #FFB6C1;\">\n                        Element: ${detection.element}\n                    </div>\n                </div>\n            `).join('');\n    }\n\n    public logDateDetection(message: string, data?: any): void {\n        this.logger.debug(message, data);\n    }\n}","import { Assignment } from '../types/models';\nimport { Logger } from './logger';\nimport { PerformanceMonitor } from './performanceMonitor';\n\nexport class DebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n    private performanceMonitor: PerformanceMonitor;\n    private isVisible: boolean = false;\n\n    constructor() {\n        this.logger = new Logger('DebugPanel');\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.createPanel();\n        this.initializeKeyboardShortcut();\n    }\n\n    private createPanel(): void {\n        this.panel = document.createElement('div');\n        this.panel.id = 'canvaspal-debug-panel';\n        this.panel.innerHTML = `\n            <div class=\"debug-panel-header\">\n                <span>🔍 CanvasPal Debug</span>\n                <div class=\"debug-panel-controls\">\n                    <button id=\"clear-metrics\" title=\"Clear Performance Metrics\">🗑️</button>\n                    <button id=\"canvaspal-debug-close\">✕</button>\n                </div>\n            </div>\n            <div class=\"debug-panel-content\">\n                <div id=\"performance-metrics\"></div>\n                <div id=\"assignment-info\"></div>\n            </div>\n        `;\n\n        // Apply styles\n        this.panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            width: 350px;\n            max-height: 500px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 9999;\n            overflow-y: auto;\n            box-shadow: 0 0 10px rgba(0,0,0,0.5);\n            display: none;\n        `;\n\n        // Add button styles\n        const style = document.createElement('style');\n        style.textContent = `\n            .debug-panel-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 10px;\n                padding-bottom: 10px;\n                border-bottom: 1px solid rgba(255,255,255,0.1);\n            }\n\n            .debug-panel-controls {\n                display: flex;\n                gap: 8px;\n            }\n\n            .debug-panel-controls button {\n                background: none;\n                border: none;\n                color: white;\n                cursor: pointer;\n                padding: 4px;\n                border-radius: 4px;\n                transition: background 0.2s;\n            }\n\n            .debug-panel-controls button:hover {\n                background: rgba(255,255,255,0.1);\n            }\n\n            .performance-section {\n                margin: 10px 0;\n                padding: 8px;\n                background: rgba(255,255,255,0.05);\n                border-radius: 4px;\n            }\n\n            .metric-item {\n                margin: 4px 0;\n                display: flex;\n                justify-content: space-between;\n            }\n\n            .metric-value {\n                color: #90EE90;\n            }\n\n            .slow-metric {\n                color: #ff6b6b;\n            }\n\n            .normal-metric {\n                color: #ffd700;\n            }\n\n            .fast-metric {\n                color: #90EE90;\n            }\n        `;\n        document.head.appendChild(style);\n\n        document.body.appendChild(this.panel);\n\n        // Add event listeners\n        document.getElementById('canvaspal-debug-close')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n\n        document.getElementById('clear-metrics')?.addEventListener('click', () => {\n            this.performanceMonitor.clear();\n            this.updatePerformanceMetrics();\n        });\n    }\n\n    private initializeKeyboardShortcut(): void {\n        document.addEventListener('keydown', (e) => {\n            // Ctrl/Cmd + Shift + D to toggle debug panel\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'D') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            this.isVisible = !this.isVisible;\n            this.panel.style.display = this.isVisible ? 'block' : 'none';\n            this.logger.debug(`Debug panel ${this.isVisible ? 'shown' : 'hidden'}`);\n        }\n    }\n\n    private updatePerformanceMetrics(): void {\n        const metricsContainer = document.getElementById('performance-metrics');\n        if (!metricsContainer) return;\n\n        const report = this.performanceMonitor.getReport();\n        \n        metricsContainer.innerHTML = `\n            <div class=\"performance-section\">\n                <h3>Performance Summary</h3>\n                <div class=\"metric-item\">\n                    <span>Total Duration:</span>\n                    <span class=\"metric-value\">${report.summary.totalDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Average Duration:</span>\n                    <span class=\"metric-value\">${report.summary.averageDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Slowest Operation:</span>\n                    <span class=\"slow-metric\">${report.summary.slowestOperation.name} (${report.summary.slowestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Fastest Operation:</span>\n                    <span class=\"fast-metric\">${report.summary.fastestOperation.name} (${report.summary.fastestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n            </div>\n            <div class=\"performance-section\">\n                <h3>Recent Operations</h3>\n                ${report.metrics.slice(-5).map(metric => `\n                    <div class=\"metric-item\">\n                        <span>${metric.name}</span>\n                        <span class=\"${this.getMetricSpeedClass(metric.duration || 0)}\">${metric.duration?.toFixed(2)}ms</span>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private getMetricSpeedClass(duration: number): string {\n        if (duration > 100) return 'slow-metric';\n        if (duration > 50) return 'normal-metric';\n        return 'fast-metric';\n    }\n\n    public updateAssignmentInfo(assignments: Assignment[]): void {\n        const container = document.getElementById('assignment-info');\n        if (!container) return;\n\n        const typeCounts = this.getAssignmentTypeCounts(assignments);\n        const priorityRanges = this.getPriorityRanges(assignments);\n\n        container.innerHTML = `\n            <div style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${assignments.length} assignments\n                </div>\n                ${this.renderTypeCounts(typeCounts)}\n                ${this.renderPriorityDistribution(priorityRanges)}\n            </div>\n            ${this.renderAssignmentList(assignments)}\n        `;\n\n        // Update performance metrics\n        this.updatePerformanceMetrics();\n    }\n\n    private getAssignmentTypeCounts(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            acc[assignment.type] = (acc[assignment.type] || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private getPriorityRanges(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            if (assignment.priorityScore >= 0.7) acc.high = (acc.high || 0) + 1;\n            else if (assignment.priorityScore >= 0.4) acc.medium = (acc.medium || 0) + 1;\n            else acc.low = (acc.low || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private renderTypeCounts(counts: Record<string, number>): string {\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Assignment Types:</div>\n                ${Object.entries(counts).map(([type, count]) => `\n                    <div style=\"margin-left: 10px; color: #90EE90;\">\n                        ${type}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderPriorityDistribution(ranges: Record<string, number>): string {\n        const colors = {\n            high: '#ff6b6b',\n            medium: '#ffd700',\n            low: '#90EE90'\n        };\n\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Priority Distribution:</div>\n                ${Object.entries(ranges).map(([range, count]) => `\n                    <div style=\"margin-left: 10px; color: ${colors[range as keyof typeof colors]};\">\n                        ${range}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentList(assignments: Assignment[]): string {\n        return `\n            <div style=\"margin-top: 15px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Detailed Assignments:</div>\n                ${assignments.map(assignment => this.renderAssignmentDetail(assignment)).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentDetail(assignment: Assignment): string {\n        const priorityColor = assignment.priorityScore >= 0.7 ? '#ff6b6b' :\n                            assignment.priorityScore >= 0.4 ? '#ffd700' : '#90EE90';\n\n        return `\n            <div style=\"margin: 8px 0; padding: 8px; border-left: 2px solid ${priorityColor}; background: rgba(255,255,255,0.1);\">\n                <div style=\"margin-bottom: 4px;\">📚 ${assignment.title}</div>\n                <div style=\"color: #90EE90; margin-bottom: 4px;\">\n                    ${assignment.points ? `📝 ${assignment.points}/${assignment.maxPoints} points` : 'No points data'}\n                </div>\n                <div style=\"color: #ADD8E6; font-size: 11px;\">\n                    ⏰ Due: ${assignment.dueDate.toLocaleDateString()}\n                </div>\n                <div style=\"color: #DDA0DD; font-size: 11px;\">\n                    📚 Course: ${assignment.course}\n                </div>\n                <div style=\"color: ${priorityColor}; font-size: 11px; margin-top: 4px;\">\n                    ⚡ Priority: ${Math.round(assignment.priorityScore * 100)}%\n                </div>\n            </div>\n        `;\n    }\n\n    public logDetectionEvent(message: string, data?: any): void {\n        this.logger.debug(message, data);\n        // Could add visual indication of new events in the panel\n    }\n\n    public updatePerformanceAnalysis(analysis: any): void {\n        // Implementation\n    }\n}","import { Logger } from './logger';\n\ninterface PerformanceLog {\n    timestamp: number;\n    metrics: {\n        name: string;\n        duration: number;\n        metadata?: Record<string, any>;\n    }[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: string;\n        fastestOperation: string;\n    };\n}\n\ntype Trend = 'improving' | 'degrading' | 'stable';\n\ninterface PerformanceMetric {\n    name: string;\n    duration: number;\n    metadata?: Record<string, any>;\n    trend?: Trend;\n}\n\nexport class PerformanceLogger {\n    private logger: Logger;\n    private static readonly MAX_LOGS = 100;\n    private static readonly STORAGE_KEY = 'performanceLogs';\n\n    constructor() {\n        this.logger = new Logger('PerformanceLogger');\n    }\n\n    public async logPerformance(metrics: { name: string; duration: number; metadata?: Record<string, any> }[]): Promise<void> {\n        try {\n            const logs = await this.getLogs();\n            const log: PerformanceLog = {\n                timestamp: Date.now(),\n                metrics,\n                summary: this.calculateSummary(metrics)\n            };\n            \n            logs.unshift(log);\n            \n            // Keep only the most recent logs\n            while (logs.length > PerformanceLogger.MAX_LOGS) {\n                logs.pop();\n            }\n            await chrome.storage.local.set({ [PerformanceLogger.STORAGE_KEY]: logs });\n            this.logger.debug('Performance log saved:', log);\n        } catch (error) {\n            this.logger.error('Error saving performance log:', error);\n        }\n    }\n\n    private calculateSummary(metrics: { name: string; duration: number }[]): PerformanceLog['summary'] {\n        if (metrics.length === 0) {\n            return {\n                totalDuration: 0,\n                averageDuration: 0,\n                slowestOperation: '',\n                fastestOperation: ''\n            };\n        }\n\n        const totalDuration = metrics.reduce((sum, m) => sum + m.duration, 0);\n        const sortedMetrics = [...metrics].sort((a, b) => b.duration - a.duration);\n\n        return {\n            totalDuration,\n            averageDuration: totalDuration / metrics.length,\n            slowestOperation: sortedMetrics[0].name,\n            fastestOperation: sortedMetrics[sortedMetrics.length - 1].name\n        };\n    }\n\n    public async getLogs(): Promise<PerformanceLog[]> {\n        try {\n            const result = await chrome.storage.local.get(PerformanceLogger.STORAGE_KEY);\n            return result[PerformanceLogger.STORAGE_KEY] || [];\n        } catch (error) {\n            this.logger.error('Error retrieving performance logs:', error);\n            return [];\n        }\n    }\n\n    public async getPerformanceAnalysis(): Promise<{\n        trends: {\n            operation: string;\n            averageDuration: number;\n            trend: Trend;\n            percentageChange: number;\n        }[];\n        hotspots: {\n            operation: string;\n            frequency: number;\n            averageDuration: number;\n        }[];\n        recommendations: string[];\n    }> {\n        const logs = await this.getLogs();\n        if (logs.length < 2) {\n            return {\n                trends: [],\n                hotspots: [],\n                recommendations: ['Not enough data for analysis']\n            };\n        }\n\n        // Group metrics by operation name\n        const operationMetrics: Record<string, number[]> = {};\n        logs.forEach(log => {\n            log.metrics.forEach(metric => {\n                if (!operationMetrics[metric.name]) {\n                    operationMetrics[metric.name] = [];\n                }\n                operationMetrics[metric.name].push(metric.duration);\n            });\n        });\n\n        // Calculate trends\n        const trends = Object.entries(operationMetrics).map(([operation, durations]) => {\n            const recent = durations.slice(0, Math.floor(durations.length / 2));\n            const older = durations.slice(Math.floor(durations.length / 2));\n            \n            const recentAvg = this.calculateAverage(recent);\n            const olderAvg = this.calculateAverage(older);\n            const percentageChange = ((recentAvg - olderAvg) / olderAvg) * 100;\n\n            return {\n                operation,\n                averageDuration: recentAvg,\n                trend: this.calculateTrend(percentageChange),\n                percentageChange\n            };\n        });\n\n        // Identify hotspots\n        const hotspots = Object.entries(operationMetrics)\n            .map(([operation, durations]) => ({\n                operation,\n                frequency: durations.length,\n                averageDuration: this.calculateAverage(durations)\n            }))\n            .filter(h => h.averageDuration > 100 || h.frequency > logs.length * 0.5)\n            .sort((a, b) => b.averageDuration * b.frequency - a.averageDuration * a.frequency);\n\n        // Generate recommendations\n        const recommendations = this.generateRecommendations(trends, hotspots);\n\n        return { trends, hotspots, recommendations };\n    }\n\n    private calculateAverage(numbers: number[]): number {\n        return numbers.reduce((sum, n) => sum + n, 0) / numbers.length;\n    }\n\n    private calculateTrend(value: number): Trend {\n        if (value < -5) return 'improving';\n        if (value > 5) return 'degrading';\n        return 'stable';\n    }\n\n    private generateRecommendations(\n        trends: { operation: string; trend: string; percentageChange: number }[],\n        hotspots: { operation: string; frequency: number; averageDuration: number }[]\n    ): string[] {\n        const recommendations: string[] = [];\n\n        // Check for degrading performance\n        const degradingOps = trends.filter(t => t.trend === 'degrading');\n        if (degradingOps.length > 0) {\n            recommendations.push(\n                `Performance degradation detected in: ${degradingOps\n                    .map(op => `${op.operation} (${op.percentageChange.toFixed(1)}% slower)`)\n                    .join(', ')}`\n            );\n        }\n\n        // Check for frequent slow operations\n        hotspots.forEach(hotspot => {\n            if (hotspot.averageDuration > 200) {\n                recommendations.push(\n                    `Consider optimizing ${hotspot.operation} (avg: ${hotspot.averageDuration.toFixed(1)}ms, ` +\n                    `called ${hotspot.frequency} times)`\n                );\n            }\n        });\n\n        // Add general recommendations\n        if (hotspots.length > 3) {\n            recommendations.push('Consider reducing the number of expensive operations running in parallel');\n        }\n\n        if (recommendations.length === 0) {\n            recommendations.push('Performance is within acceptable ranges');\n        }\n\n        return recommendations;\n    }\n\n    public async clearLogs(): Promise<void> {\n        try {\n            await chrome.storage.local.remove(PerformanceLogger.STORAGE_KEY);\n            this.logger.info('Performance logs cleared');\n        } catch (error) {\n            this.logger.error('Error clearing performance logs:', error);\n        }\n    }\n}","import { Assignment } from '../types/models';\nimport { Logger } from '../utils/logger';\n\nexport class AssignmentRenderer {\n    private logger: Logger;\n\n    constructor() {\n        this.logger = new Logger('AssignmentRenderer');\n    }\n\n    public renderAssignment(assignment: Assignment): HTMLElement {\n        const assignmentElement = document.createElement('div');\n        assignmentElement.className = this.getAssignmentClasses(assignment);\n        assignmentElement.dataset.id = assignment.id;\n\n        assignmentElement.innerHTML = `\n            <div class=\"course-name\">${this.escapeHtml(assignment.course)}</div>\n            <div class=\"assignment-header\">\n                <span class=\"assignment-type type-${assignment.type}\">${this.capitalizeFirstLetter(assignment.type)}</span>\n                <span class=\"priority-score\">${Math.round(assignment.priorityScore * 100)}%</span>\n            </div>\n            <div class=\"assignment-title\">${this.escapeHtml(assignment.title)}</div>\n            <div class=\"assignment-details\">\n                <div class=\"detail-item\">\n                    <span class=\"detail-icon\">⏰</span>\n                    <span>${this.formatDueDate(assignment.dueDate)}</span>\n                </div>\n                ${this.renderPointsDisplay(assignment)}\n                ${assignment.details ? this.renderAdditionalDetails(assignment.details) : ''}\n            </div>\n            <div class=\"completion\">\n                <input type=\"checkbox\" \n                    ${assignment.completed ? 'checked' : ''} \n                    title=\"Mark as complete\"\n                    onclick=\"handleCompletionToggle('${assignment.id}', this.checked)\">\n            </div>\n        `;\n\n        return assignmentElement;\n    }\n\n    private getAssignmentClasses(assignment: Assignment): string {\n        const classes = ['assignment-item'];\n        \n        // Add priority class\n        if (assignment.priorityScore >= 0.7) {\n            classes.push('high-priority');\n        } else if (assignment.priorityScore >= 0.4) {\n            classes.push('medium-priority');\n        } else {\n            classes.push('low-priority');\n        }\n\n        return classes.join(' ');\n    }\n\n    private formatDueDate(date: Date): string {\n        const now = new Date();\n        const diffDays = Math.ceil((date.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n        \n        if (diffDays < 0) {\n            return `Overdue by ${Math.abs(diffDays)} day${Math.abs(diffDays) !== 1 ? 's' : ''}`;\n        } else if (diffDays === 0) {\n            return 'Due today';\n        } else if (diffDays === 1) {\n            return 'Due tomorrow';\n        } else {\n            return `Due in ${diffDays} days`;\n        }\n    }\n\n    private renderPointsDisplay(assignment: Assignment): string {\n        if (!assignment.points && !assignment.maxPoints) return '';\n\n        return `\n            <div class=\"detail-item\">\n                <span class=\"detail-icon\">📊</span>\n                <span class=\"points-display\">\n                    ${assignment.points || 0} / ${assignment.maxPoints || 0} points\n                    ${assignment.gradeWeight ? ` (${Math.round(assignment.gradeWeight * 100)}% of grade)` : ''}\n                </span>\n            </div>\n        `;\n    }\n\n    private renderAdditionalDetails(details: Assignment['details']): string {\n        if (!details) return '';\n\n        let detailsHtml = '';\n\n        if (details.submissionType?.length) {\n            detailsHtml += `\n                <div class=\"detail-item\">\n                    <span class=\"detail-icon\">📝</span>\n                    <span>Submit via: ${details.submissionType.join(', ')}</span>\n                </div>\n            `;\n        }\n\n        if (details.isLocked) {\n            detailsHtml += `\n                <div class=\"detail-item\">\n                    <span class=\"detail-icon\">🔒</span>\n                    <span>Locked</span>\n                </div>\n            `;\n        }\n\n        return detailsHtml;\n    }\n\n    private escapeHtml(str: string): string {\n        const div = document.createElement('div');\n        div.textContent = str;\n        return div.innerHTML;\n    }\n\n    private capitalizeFirstLetter(str: string): string {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n}","import { Logger } from './logger';\n\ninterface PerformanceMetric {\n    name: string;\n    startTime: number;\n    endTime?: number;\n    duration?: number;\n    metadata?: Record<string, any>;\n}\n\ninterface PerformanceReport {\n    metrics: PerformanceMetric[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: {\n            name: string;\n            duration: number;\n        };\n        fastestOperation: {\n            name: string;\n            duration: number;\n        };\n    };\n}\n\nexport class PerformanceMonitor {\n    private metrics: PerformanceMetric[] = [];\n    private logger: Logger;\n    private static instance: PerformanceMonitor;\n\n    private constructor() {\n        this.logger = new Logger('PerformanceMonitor');\n    }\n\n    public static getInstance(): PerformanceMonitor {\n        if (!PerformanceMonitor.instance) {\n            PerformanceMonitor.instance = new PerformanceMonitor();\n        }\n        return PerformanceMonitor.instance;\n    }\n\n    public startMetric(name: string, metadata?: Record<string, any>): string {\n        const id = `${name}_${Date.now()}`;\n        this.metrics.push({\n            name,\n            startTime: performance.now(),\n            metadata\n        });\n        return id;\n    }\n\n    public endMetric(name: string): void {\n        const metric = this.metrics.find(m => m.name === name && !m.endTime);\n        if (metric) {\n            metric.endTime = performance.now();\n            metric.duration = metric.endTime - metric.startTime;\n            this.logger.debug(`Performance metric - ${name}:`, {\n                duration: `${metric.duration.toFixed(2)}ms`,\n                metadata: metric.metadata\n            });\n        }\n    }\n\n    public getReport(): PerformanceReport {\n        const completedMetrics = this.metrics.filter(m => m.duration !== undefined);\n        \n        if (completedMetrics.length === 0) {\n            return {\n                metrics: [],\n                summary: {\n                    totalDuration: 0,\n                    averageDuration: 0,\n                    slowestOperation: { name: 'none', duration: 0 },\n                    fastestOperation: { name: 'none', duration: 0 }\n                }\n            };\n        }\n\n        const totalDuration = completedMetrics.reduce((sum, m) => sum + (m.duration || 0), 0);\n        const averageDuration = totalDuration / completedMetrics.length;\n\n        const sorted = [...completedMetrics].sort((a, b) => \n            (b.duration || 0) - (a.duration || 0));\n\n        return {\n            metrics: completedMetrics,\n            summary: {\n                totalDuration,\n                averageDuration,\n                slowestOperation: {\n                    name: sorted[0].name,\n                    duration: sorted[0].duration || 0\n                },\n                fastestOperation: {\n                    name: sorted[sorted.length - 1].name,\n                    duration: sorted[sorted.length - 1].duration || 0\n                }\n            }\n        };\n    }\n\n    public clear(): void {\n        this.metrics = [];\n    }\n\n    public monitorAsync<T>(name: string, fn: () => Promise<T>, metadata?: Record<string, any>): Promise<T> {\n        this.startMetric(name, metadata);\n        return fn().finally(() => this.endMetric(name));\n    }\n\n    public monitor<T>(name: string, fn: () => T, metadata?: Record<string, any>): T {\n        this.startMetric(name, metadata);\n        const result = fn();\n        this.endMetric(name);\n        return result;\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Assignment as CanvasAssignment } from '../types/models';\nimport { AssignmentRenderer } from '../utils/assignmentRenderer';\nimport { Logger } from '../utils/logger';\nimport { DebugManager } from '../utils/debugManager';\n\ninterface Assignment {\n    id: string;\n    title: string;\n    dueDate: Date;\n    course: string;\n    gradeWeight?: number;\n    priorityScore: number;\n    completed: boolean;\n}\n\ninterface Settings {\n    icalUrl: string;\n    refreshInterval: number;\n    priorities: {\n        dueDate: number;\n        gradeWeight: number;\n        gradeImpact: number;\n    };\n}\n\nclass PopupManager {\n    private assignments: CanvasAssignment[] = [];\n    private renderer: AssignmentRenderer;\n    private logger: Logger;\n    private debugManager: DebugManager;\n    private typeFilter: string = 'all';\n    private priorityFilter: string = 'all';\n\n    constructor() {\n        this.renderer = new AssignmentRenderer();\n        this.logger = new Logger('PopupManager');\n        this.debugManager = new DebugManager();\n        this.initializeEventListeners();\n        this.loadAssignments();\n        this.initializeDebugFeatures();\n    }\n\n    private initializeEventListeners(): void {\n        document.getElementById('typeFilter')?.addEventListener('change', (e) => {\n            this.typeFilter = (e.target as HTMLSelectElement).value;\n            this.renderAssignments();\n        });\n\n        document.getElementById('priorityFilter')?.addEventListener('change', (e) => {\n            this.priorityFilter = (e.target as HTMLSelectElement).value;\n            this.renderAssignments();\n        });\n\n        document.getElementById('refreshData')?.addEventListener('click', () => {\n            this.loadAssignments();\n        });\n\n        document.getElementById('openSettings')?.addEventListener('click', () => {\n            if (chrome.runtime.openOptionsPage) {\n                chrome.runtime.openOptionsPage();\n            }\n        });\n\n        // Listen for sync updates\n        chrome.runtime.onMessage.addListener((message) => {\n            if (message.type === 'SYNC_COMPLETE') {\n                this.updateLastSyncTime();\n                this.loadAssignments();\n            } else if (message.type === 'SYNC_ERROR') {\n                this.showError('Sync Failed');\n            } else if (message.type === 'ASSIGNMENTS_UPDATED') {\n                this.assignments = message.assignments;\n                this.renderAssignments();\n            }\n        });\n    }\n\n    private async loadAssignments(): Promise<void> {\n        try {\n            this.setLoading(true);\n            \n            // Request assignment data from background script\n            const response = await chrome.runtime.sendMessage({ type: 'GET_ASSIGNMENTS' });\n            \n            if (response.error) {\n                throw new Error(response.error);\n            }\n\n            this.assignments = response.assignments;\n            this.updateLastSyncTime();\n            this.renderAssignments();\n        } catch (error) {\n            this.logger.error('Failed to load assignments:', error);\n            this.showError('Failed to load assignments. Please try again.');\n        } finally {\n            this.setLoading(false);\n        }\n    }\n\n    private renderAssignments(): void {\n        const container = document.getElementById('assignmentList');\n        if (!container) return;\n\n        container.innerHTML = '';\n\n        const filteredAssignments = this.filterAssignments();\n        \n        if (filteredAssignments.length === 0) {\n            container.innerHTML = '<div class=\"no-assignments\">No assignments found</div>';\n            return;\n        }\n\n        filteredAssignments.forEach(assignment => {\n            const element = this.renderer.renderAssignment(assignment);\n            container.appendChild(element);\n        });\n    }\n\n    private filterAssignments(): CanvasAssignment[] {\n        return this.assignments.filter(assignment => {\n            if (this.typeFilter !== 'all' && assignment.type !== this.typeFilter) {\n                return false;\n            }\n\n            if (this.priorityFilter !== 'all') {\n                const priority = assignment.priorityScore;\n                switch (this.priorityFilter) {\n                    case 'high':\n                        return priority >= 0.7;\n                    case 'medium':\n                        return priority >= 0.4 && priority < 0.7;\n                    case 'low':\n                        return priority < 0.4;\n                }\n            }\n\n            return true;\n        });\n    }\n\n    private setLoading(isLoading: boolean): void {\n        const status = document.getElementById('sync-status');\n        if (status) {\n            status.textContent = isLoading ? 'Syncing...' : 'Synced';\n            status.className = isLoading ? 'loading' : '';\n        }\n    }\n\n    private showError(message: string): void {\n        const container = document.getElementById('assignmentList');\n        if (container) {\n            container.innerHTML = `<div class=\"error\">${message}</div>`;\n        }\n    }\n\n    private updateLastSyncTime(): void {\n        const element = document.getElementById('data-freshness');\n        if (element) {\n            element.textContent = `Updated: Just now`;\n        }\n    }\n\n    public async handleCompletionToggle(assignmentId: string, completed: boolean): Promise<void> {\n        try {\n            await chrome.runtime.sendMessage({ \n                type: 'UPDATE_ASSIGNMENT_COMPLETION',\n                assignmentId,\n                completed\n            });\n\n            // Update local assignment data\n            const assignment = this.assignments.find(a => a.id === assignmentId);\n            if (assignment) {\n                assignment.completed = completed;\n                this.renderAssignments();\n            }\n        } catch (error) {\n            this.logger.error('Failed to update assignment completion:', error);\n        }\n    }\n\n    private initializeDebugFeatures(): void {\n        if (this.debugManager.isDebugEnabled()) {\n            this.showDebugControls();\n        }\n\n        // Listen for debug mode changes\n        chrome.storage.onChanged.addListener((changes) => {\n            if (changes.debugConfig) {\n                const newConfig = changes.debugConfig.newValue;\n                if (newConfig.enabled) {\n                    this.showDebugControls();\n                } else {\n                    this.hideDebugControls();\n                }\n            }\n        });\n    }\n\n    private showDebugControls(): void {\n        const controls = document.getElementById('debug-controls');\n        if (!controls) {\n            const container = document.createElement('div');\n            container.id = 'debug-controls';\n            container.innerHTML = `\n                <div class=\"debug-toolbar\">\n                    <button id=\"toggleDateDebug\" class=\"debug-button\" title=\"Toggle Date Debug (Ctrl/Cmd + Shift + T)\">\n                        📅\n                    </button>\n                    <button id=\"toggleAssignmentDebug\" class=\"debug-button\" title=\"Toggle Assignment Debug (Ctrl/Cmd + Shift + D)\">\n                        🔍\n                    </button>\n                    <button id=\"togglePriorityDebug\" class=\"debug-button\" title=\"Toggle Priority Debug\">\n                        ⚡\n                    </button>\n                </div>\n            `;\n\n            const header = document.querySelector('header');\n            if (header) {\n                header.appendChild(container);\n                this.initializeDebugButtonListeners();\n            }\n        }\n    }\n\n    private hideDebugControls(): void {\n        const controls = document.getElementById('debug-controls');\n        if (controls) {\n            controls.remove();\n        }\n    }\n\n    private initializeDebugButtonListeners(): void {\n        document.getElementById('toggleDateDebug')?.addEventListener('click', () => {\n            this.debugManager.getDatePanel().toggleVisibility();\n        });\n\n        document.getElementById('toggleAssignmentDebug')?.addEventListener('click', () => {\n            this.debugManager.getMainPanel().toggleVisibility();\n        });\n\n        document.getElementById('togglePriorityDebug')?.addEventListener('click', () => {\n            const config = this.debugManager.getConfig();\n            this.debugManager.updateDebugConfig({\n                showPriorityDebug: !config.showPriorityDebug\n            });\n        });\n    }\n}\n\n// Initialize popup\nwindow.addEventListener('DOMContentLoaded', () => {\n    const popup = new PopupManager();\n    \n    // Expose completion handler for inline event handlers\n    (window as any).handleCompletionToggle = (id: string, completed: boolean) => {\n        popup.handleCompletionToggle(id, completed);\n    };\n});\n"],"names":["LogLevel","Logger","context","level","INFO","this","currentLevel","cleanOldLogs","getInstance","key","instances","has","set","get","setLevel","debug","message","data","log","DEBUG","info","warn","WARN","error","ERROR","args","timestamp","Date","toISOString","formattedMessage","getLogPrefix","length","formattedData","formatLogData","console","entry","stack","Error","saveLogs","notifyError","Element","tagName","id","className","textContent","substring","html","outerHTML","Array","isArray","map","item","formatted","value","Object","entries","logs","chrome","storage","local","push","MAX_LOGS","splice","thirtyDaysAgo","setDate","getDate","filteredLogs","filter","notifications","create","type","iconUrl","title","priority","getLogs","Map","logger","constructor","config","enabled","logLevel","showDateDebug","showAssignmentDebug","showPriorityDebug","showPerformanceMetrics","mainPanel","DebugPanel","datePanel","DateDebugPanel","performanceMonitor","PerformanceMonitor","performanceLogger","PerformanceLogger","initializeKeyboardShortcuts","initializePerformanceLogging","loadDebugConfig","setInterval","async","validMetrics","getReport","metrics","m","undefined","duration","name","metadata","logPerformance","updatePerformanceAnalysis","analysis","getPerformanceAnalysis","document","addEventListener","e","ctrlKey","metaKey","shiftKey","preventDefault","toggleDebugMode","toggleVisibility","togglePerformanceMetrics","saveDebugConfig","result","sync","debugConfig","applyConfig","getLogLevel","disableAllPanels","querySelectorAll","forEach","panel","style","display","updateDebugConfig","newConfig","getMainPanel","getDatePanel","isDebugEnabled","getConfig","clearPerformanceLogs","clearLogs","createPanel","createElement","cssText","header","innerHTML","appendChild","content","body","getElementById","isVisible","updateDebugInfo","totalDates","renderTypeDistribution","types","renderDetections","detections","colors","due","availability","unlock","unknown","count","charAt","toUpperCase","slice","join","detection","text","date","element","logDateDetection","initializeKeyboardShortcut","head","clear","updatePerformanceMetrics","metricsContainer","report","summary","totalDuration","toFixed","averageDuration","slowestOperation","fastestOperation","metric","getMetricSpeedClass","updateAssignmentInfo","assignments","container","typeCounts","getAssignmentTypeCounts","priorityRanges","getPriorityRanges","renderTypeCounts","renderPriorityDistribution","renderAssignmentList","reduce","acc","assignment","priorityScore","high","medium","low","counts","ranges","range","renderAssignmentDetail","priorityColor","points","maxPoints","dueDate","toLocaleDateString","course","Math","round","logDetectionEvent","now","calculateSummary","unshift","pop","STORAGE_KEY","sum","sortedMetrics","sort","a","b","trends","hotspots","recommendations","operationMetrics","operation","durations","recent","floor","older","recentAvg","calculateAverage","olderAvg","percentageChange","trend","calculateTrend","frequency","h","generateRecommendations","numbers","n","degradingOps","t","op","hotspot","remove","renderAssignment","assignmentElement","getAssignmentClasses","dataset","escapeHtml","capitalizeFirstLetter","formatDueDate","renderPointsDisplay","details","renderAdditionalDetails","completed","classes","diffDays","ceil","getTime","abs","gradeWeight","detailsHtml","submissionType","isLocked","str","div","instance","startMetric","startTime","performance","endMetric","find","endTime","completedMetrics","sorted","monitorAsync","fn","finally","monitor","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","PopupManager","typeFilter","priorityFilter","renderer","AssignmentRenderer","debugManager","DebugManager","initializeEventListeners","loadAssignments","initializeDebugFeatures","target","renderAssignments","runtime","openOptionsPage","onMessage","addListener","updateLastSyncTime","showError","setLoading","response","sendMessage","filteredAssignments","filterAssignments","isLoading","status","handleCompletionToggle","assignmentId","showDebugControls","onChanged","changes","newValue","hideDebugControls","querySelector","initializeDebugButtonListeners","controls","window","popup"],"sourceRoot":""}