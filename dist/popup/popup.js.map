{"version":3,"file":"popup/popup.js","mappings":"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","sources":["webpack://canvaspal/./src/popup/popup.ts"],"sourcesContent":["import { Assignment, GradeData } from '../types/models';\n\ninterface GradeResponse {\n    success: boolean;\n    grades: GradeData | null;\n}\n\ninterface Settings {\n    showOutsideCanvas: boolean;\n    refreshInterval: number;\n}\n\nclass PopupManager {\n    private assignments: Assignment[] = [];\n    private popupContainer: HTMLElement | null;\n    private assignmentsButton: HTMLElement | null;\n    private settingsContent: HTMLElement | null;\n    private settings: Settings = {\n        showOutsideCanvas: true,\n        refreshInterval: 60\n    };\n\n    constructor() {\n        this.popupContainer = document.getElementById('popupContainer');\n        this.assignmentsButton = document.getElementById('assignmentsButton');\n        this.settingsContent = document.getElementById('settingsContent');\n\n        // Debug icon loading in popup\n        console.log('Debug: Popup initialization');\n        console.log('Debug: Chrome runtime state:', {\n            available: !!chrome?.runtime,\n            id: chrome?.runtime?.id,\n            manifest: chrome?.runtime?.getManifest?.()\n        });\n\n        // Set the icon URL\n        try {\n            const iconUrl = chrome.runtime.getURL('icons/icon128.png');\n            console.log('Debug: Generated icon URL in popup:', iconUrl);\n            \n            const logoImg = document.getElementById('canvaspal-logo') as HTMLImageElement;\n            if (logoImg) {\n                console.log('Debug: Setting icon src to:', iconUrl);\n                logoImg.src = iconUrl;\n            } else {\n                console.error('Debug: Logo image element not found');\n            }\n        } catch (error) {\n            console.error('Debug: Error setting icon URL in popup:', error);\n        }\n\n        this.initializeEventListeners();\n        this.loadSettings();\n        this.loadAssignments();\n    }\n\n    private initializeEventListeners(): void {\n        // Toggle popup\n        this.assignmentsButton?.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.togglePopup();\n        });\n\n        // Close popup when clicking outside\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            if (!this.popupContainer?.contains(target) && \n                !this.assignmentsButton?.contains(target)) {\n                this.closePopup();\n            }\n        });\n\n        // Settings panel toggle\n        document.getElementById('openSettings')?.addEventListener('click', () => {\n            this.showSettings();\n        });\n\n        document.getElementById('openDesktop')?.addEventListener('click', () => {\n            chrome.tabs.create({ url: 'https://www.google.com' });\n        });\n\n        document.getElementById('backButton')?.addEventListener('click', () => {\n            this.hideSettings();\n        });\n\n        // Settings controls\n        document.getElementById('showOutsideCanvas')?.addEventListener('change', (e) => {\n            const target = e.target as HTMLInputElement;\n            this.settings.showOutsideCanvas = target.checked;\n            this.saveSettings();\n        });\n\n        document.getElementById('refreshInterval')?.addEventListener('change', (e) => {\n            const target = e.target as HTMLSelectElement;\n            this.settings.refreshInterval = parseInt(target.value);\n            this.saveSettings();\n        });\n    }\n\n    private togglePopup(): void {\n        this.popupContainer?.classList.toggle('show');\n        if (this.popupContainer?.classList.contains('show')) {\n            this.loadAssignments();\n        }\n    }\n\n    private closePopup(): void {\n        this.popupContainer?.classList.remove('show');\n        this.hideSettings();\n    }\n\n    private showSettings(): void {\n        this.settingsContent?.classList.add('show');\n    }\n\n    private hideSettings(): void {\n        this.settingsContent?.classList.remove('show');\n    }\n\n    private async loadSettings(): Promise<void> {\n        try {\n            const result = await chrome.storage.local.get(['settings']);\n            if (result.settings) {\n                this.settings = result.settings;\n                // Update UI\n                const showOutsideCanvas = document.getElementById('showOutsideCanvas') as HTMLInputElement;\n                const refreshInterval = document.getElementById('refreshInterval') as HTMLSelectElement;\n                if (showOutsideCanvas) showOutsideCanvas.checked = this.settings.showOutsideCanvas;\n                if (refreshInterval) refreshInterval.value = this.settings.refreshInterval.toString();\n            }\n        } catch (error) {\n            console.error('Failed to load settings:', error);\n        }\n    }\n\n    private async saveSettings(): Promise<void> {\n        try {\n            await chrome.storage.local.set({ settings: this.settings });\n            // Update button visibility if not on Canvas\n            if (!window.location.href.includes('.instructure.com')) {\n                this.assignmentsButton!.style.display = \n                    this.settings.showOutsideCanvas ? 'flex' : 'none';\n            }\n        } catch (error) {\n            console.error('Failed to save settings:', error);\n        }\n    }\n\n    private async loadAssignments(): Promise<void> {\n        try {\n            // First try to get assignments from storage\n            const storage = await chrome.storage.local.get(['currentAssignments', 'lastUpdate']);\n            const storedAssignments = storage.currentAssignments;\n            const lastUpdate = storage.lastUpdate ? new Date(storage.lastUpdate) : null;\n            const now = new Date();\n\n            // Check if stored assignments are fresh (less than 5 minutes old)\n            if (storedAssignments && lastUpdate &&\n                (now.getTime() - lastUpdate.getTime() < 5 * 60 * 1000)) {\n                console.log('Using stored assignments:', storedAssignments);\n                this.assignments = storedAssignments;\n                this.updateAssignmentCount();\n                this.renderAssignments();\n                return;\n            }\n\n            // If no fresh stored assignments, get from background\n            const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n            if (!tabs[0]?.id) {\n                this.showNoAssignments('No active tab found');\n                return;\n            }\n\n            const response = await chrome.runtime.sendMessage({ type: 'GET_ASSIGNMENTS' });\n            \n            if (!response || !response.assignments) {\n                const url = tabs[0]?.url;\n                if (url?.includes('.instructure.com')) {\n                    if (url.includes('/grades')) {\n                        this.showNoAssignments('Loading grades...');\n                        await chrome.runtime.sendMessage({ type: 'REFRESH_ASSIGNMENTS' });\n                    } else {\n                        this.showNoAssignments('Please navigate to a course grades page');\n                    }\n                } else {\n                    this.showNoAssignments('Please navigate to Canvas');\n                }\n                return;\n            }\n\n            this.assignments = response.assignments;\n            this.updateAssignmentCount();\n            this.renderAssignments();\n\n            // Store the fresh assignments\n            await chrome.storage.local.set({\n                currentAssignments: this.assignments,\n                lastUpdate: now.toISOString()\n            });\n\n        } catch (error) {\n            console.error('Failed to load assignments:', error);\n            this.showNoAssignments('Failed to load assignments');\n        }\n    }\n\n    private updateAssignmentCount(): void {\n        if (this.assignmentsButton) {\n            this.assignmentsButton.textContent = this.assignments.length.toString();\n            this.assignmentsButton.classList.toggle('has-assignments', this.assignments.length > 0);\n        }\n\n        const taskCount = document.getElementById('taskCount');\n        if (taskCount) {\n            taskCount.textContent = `${this.assignments.length} Task${this.assignments.length !== 1 ? 's' : ''}`;\n        }\n    }\n\n    private renderAssignments(): void {\n        const assignmentList = document.getElementById('assignmentList');\n        if (!assignmentList) return;\n\n        if (this.assignments.length === 0) {\n            this.showNoAssignments('No assignments found');\n            return;\n        }\n\n        assignmentList.innerHTML = this.assignments\n            .map(assignment => this.createAssignmentElement(assignment))\n            .join('');\n    }\n\n    private createAssignmentElement(assignment: Assignment): string {\n        const priorityClass = this.getPriorityClass(assignment.priorityScore);\n        const dueDate = this.formatDate(assignment.dueDate);\n        const timeStatus = this.getTimeStatus(dueDate);\n        const points = assignment.maxPoints ?\n            `${assignment.points}/${assignment.maxPoints} points` :\n            `${assignment.points} points`;\n\n        // Priority details display\n        const priorityDetails = assignment.priorityDetails ? `\n            <div class=\"priority-details\">\n                <div class=\"priority-item\">\n                    <div class=\"priority-label\">Due Status</div>\n                    <div class=\"priority-value ${assignment.priorityDetails.dueStatus}\">\n                        ${this.formatDueStatus(assignment.priorityDetails.dueStatus)}\n                    </div>\n                </div>\n                <div class=\"priority-item\">\n                    <div class=\"priority-label\">Points</div>\n                    <div class=\"priority-value ${assignment.priorityDetails.pointsImpact}\">\n                        ${points} (${this.formatPointsImpact(assignment.priorityDetails.pointsImpact)} Impact)\n                    </div>\n                </div>\n                <div class=\"priority-item\">\n                    <div class=\"priority-label\">Type</div>\n                    <div class=\"priority-value ${assignment.priorityDetails.typeImportance}\">\n                        ${this.formatTypeImportance(assignment.priorityDetails.typeImportance)}\n                    </div>\n                </div>\n            </div>\n        ` : '';\n\n        return `\n            <div class=\"assignment-card ${priorityClass}\">\n                <div class=\"assignment-header\">\n                    <div class=\"assignment-title\">\n                        <a href=\"${assignment.url || '#'}\" target=\"_blank\">\n                            ${assignment.title}\n                        </a>\n                    </div>\n                    <div class=\"priority-score ${priorityClass}\">\n                        ${Math.round(assignment.priorityScore * 100)}%\n                    </div>\n                </div>\n                <div class=\"assignment-course\">${assignment.course}</div>\n                <div class=\"due-info\">\n                    <span class=\"due-date\">Due: ${dueDate}</span>\n                    <span class=\"time-remaining ${timeStatus.class}\">${timeStatus.text}</span>\n                </div>\n                ${priorityDetails}\n            </div>\n        `;\n    }\n\n    private formatDueStatus(status: string): string {\n        switch (status) {\n            case 'overdue': return '⚠️ Overdue';\n            case 'due-soon': return '⏰ Due Soon';\n            case 'upcoming': return '📅 Upcoming';\n            case 'far-future': return '🕒 Future';\n            default: return status;\n        }\n    }\n\n    private formatPointsImpact(impact: string): string {\n        switch (impact) {\n            case 'high': return '⭐⭐⭐ High';\n            case 'medium': return '⭐⭐ Medium';\n            case 'low': return '⭐ Low';\n            default: return impact;\n        }\n    }\n\n    private formatTypeImportance(importance: string): string {\n        switch (importance) {\n            case 'critical': return '🔥 Critical';\n            case 'high': return '📊 High';\n            case 'normal': return '📝 Normal';\n            case 'low': return '📌 Low';\n            default: return importance;\n        }\n    }\n\n    private getPriorityClass(priorityScore: number): string {\n        if (priorityScore > 0.7) return 'high-priority';\n        if (priorityScore > 0.4) return 'medium-priority';\n        return 'low-priority';\n    }\n\n    private formatDate(date: string): string {\n        if (date === 'All Day' || date === 'No due date') {\n            return date;\n        }\n\n        const dateStr = date.startsWith('Due: ') ? date.substring(5) : date;\n        \n        try {\n            const dateObj = new Date(dateStr);\n            if (!isNaN(dateObj.getTime())) {\n                return dateObj.toLocaleDateString('en-US', {\n                    weekday: 'short',\n                    month: 'short',\n                    day: 'numeric',\n                    hour: 'numeric',\n                    minute: 'numeric'\n                });\n            }\n            return date;\n        } catch {\n            return date;\n        }\n    }\n\n    private getTimeStatus(dueDate: string): { text: string; class: string } {\n        if (dueDate === 'No due date') {\n            return { text: 'No due date', class: '' };\n        }\n\n        try {\n            const due = new Date(dueDate);\n            const now = new Date();\n            const diffDays = Math.ceil((due.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n            if (diffDays < 0) return { text: 'Past due!', class: 'urgent' };\n            if (diffDays === 0) return { text: 'Due today!', class: 'urgent' };\n            if (diffDays === 1) return { text: 'Due tomorrow!', class: 'urgent' };\n            if (diffDays <= 3) return { text: `Due in ${diffDays} days`, class: 'soon' };\n            return { text: `${diffDays} days left`, class: '' };\n        } catch {\n            return { text: 'Invalid date', class: '' };\n        }\n    }\n\n    private showNoAssignments(message: string): void {\n        const assignmentList = document.getElementById('assignmentList');\n        if (assignmentList) {\n            assignmentList.innerHTML = `\n                <div class=\"no-assignments\">\n                    ${message}\n                </div>\n            `;\n        }\n    }\n}\n\n// Initialize popup\nwindow.addEventListener('DOMContentLoaded', () => {\n    new PopupManager();\n});\n"],"names":["PopupManager","constructor","assignments","settings","showOutsideCanvas","refreshInterval","this","popupContainer","document","getElementById","assignmentsButton","settingsContent","console","log","available","chrome","runtime","id","manifest","getManifest","iconUrl","getURL","logoImg","src","error","initializeEventListeners","loadSettings","loadAssignments","addEventListener","e","stopPropagation","togglePopup","target","contains","closePopup","showSettings","tabs","create","url","hideSettings","checked","saveSettings","parseInt","value","classList","toggle","remove","add","result","storage","local","get","toString","set","window","location","href","includes","style","display","storedAssignments","currentAssignments","lastUpdate","Date","now","getTime","updateAssignmentCount","renderAssignments","query","active","currentWindow","showNoAssignments","response","sendMessage","type","toISOString","textContent","length","taskCount","assignmentList","innerHTML","map","assignment","createAssignmentElement","join","priorityClass","getPriorityClass","priorityScore","dueDate","formatDate","timeStatus","getTimeStatus","points","maxPoints","priorityDetails","dueStatus","formatDueStatus","pointsImpact","formatPointsImpact","typeImportance","formatTypeImportance","title","Math","round","course","class","text","status","impact","importance","date","dateStr","startsWith","substring","dateObj","isNaN","toLocaleDateString","weekday","month","day","hour","minute","due","diffDays","ceil","message"],"sourceRoot":""}