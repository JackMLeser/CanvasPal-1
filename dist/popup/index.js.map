{"version":3,"file":"popup/index.js","mappings":"mBAoF4B,IApFrB,MACH,WAAAA,GACIC,KAAKC,SAAWC,SAASC,eAAe,YACxCH,KAAKI,cAAgBF,SAASC,eAAe,mBAC7CH,KAAKK,YAAcH,SAASC,eAAe,gBAC3CH,KAAKM,aAAeJ,SAASC,eAAe,iBAC5CH,KAAKO,gBAAkBL,SAASC,eAAe,oBAC/CH,KAAKQ,WAAaN,SAASC,eAAe,eAC1CH,KAAKS,aAAeP,SAASC,eAAe,iBAC5CH,KAAKU,sBACLV,KAAKW,eACLX,KAAKY,mBACLC,OAAOC,QAAQC,UAAUC,YAAYhB,KAAKiB,cAAcC,KAAKlB,MACjE,CACA,kBAAMW,GACF,MAAMQ,QAAiBN,OAAOO,QAAQC,KAAKC,IAAI,CAAC,UAAW,YACvDH,EAASI,UACTvB,KAAKC,SAASuB,MAAQL,EAASI,SAE/BJ,EAASM,UACTzB,KAAKI,cAAcoB,MAAQL,EAASM,QAAQC,QAAQC,WACpD3B,KAAKK,YAAYmB,MAAQL,EAASM,QAAQpB,YAAYsB,WACtD3B,KAAKM,aAAakB,MAAQL,EAASM,QAAQG,OAAOD,WAE1D,CACA,mBAAAjB,GACI,IAAImB,EACJ7B,KAAKC,SAAS6B,iBAAiB,UAAU,KACrCjB,OAAOO,QAAQC,KAAKU,IAAI,CAAER,QAASvB,KAAKC,SAASuB,OAAQ,IAEX,QAAjDK,EAAK3B,SAASC,eAAe,sBAAmC,IAAP0B,GAAyBA,EAAGC,iBAAiB,SAAS,KAC5GjB,OAAOC,QAAQkB,YAAY,CAAEC,KAAM,aAAc,IAErD,CAACjC,KAAKI,cAAeJ,KAAKK,YAAaL,KAAKM,cAAc4B,SAAQC,IAC9DA,EAAOL,iBAAiB,SAAS,KAC7BjB,OAAOO,QAAQC,KAAKU,IAAI,CACpBN,QAAS,CACLC,QAASU,SAASpC,KAAKI,cAAcoB,OACrCnB,YAAa+B,SAASpC,KAAKK,YAAYmB,OACvCI,OAAQQ,SAASpC,KAAKM,aAAakB,SAEzC,GACJ,GAEV,CACA,sBAAMZ,GACF,IACI,MAAMyB,QAAoBxB,OAAOC,QAAQkB,YAAY,CAAEC,KAAM,qBAC7DjC,KAAKsC,mBAAmBD,EAC5B,CACA,MAAOE,GACHvC,KAAKS,aAAa+B,YAAc,6BACpC,CACJ,CACA,kBAAAF,CAAmBD,GACfrC,KAAKO,gBAAgBkC,UAAYJ,EAAYK,KAAIC,GAAc,sKAI1CA,EAAWC,UAAY,UAAY,+CACvBD,EAAWE,gCAC9BF,EAAWE,oGAGNF,EAAWjB,QAAQoB,6CACxBH,EAAWtC,YAAc,WAAWsC,EAAWtC,eAAiB,6DAG3E0C,KAAK,IACR/C,KAAKO,gBAAgByC,iBAAiB,4BAA4Bd,SAAQe,IACtEA,EAASnB,iBAAiB,UAAWoB,IACjC,MAAML,EAAQK,EAAEC,OAAOC,QAAQP,MAC3BA,GACAhC,OAAOO,QAAQiC,MAAMtB,IAAI,CAAE,CAAC,cAAcc,KAAUK,EAAEC,OAAOG,SACjE,GACF,GAEV,CACA,aAAArC,CAAcsC,GACW,iBAAjBA,EAAQtB,MAA2BsB,EAAQC,YAC3CxD,KAAKQ,WAAWgC,YAAc,gBAAgB,IAAIiB,KAAKF,EAAQC,WAAWE,uBAElF,E","sources":["webpack://canvaspal/./src/popup/index.ts"],"sourcesContent":["export class PopupManager {\n    constructor() {\n        this.urlInput = document.getElementById(\"ical-url\");\n        this.dueDateWeight = document.getElementById(\"due-date-weight\");\n        this.gradeWeight = document.getElementById(\"grade-weight\");\n        this.impactWeight = document.getElementById(\"impact-weight\");\n        this.assignmentsList = document.getElementById(\"assignments-list\");\n        this.syncStatus = document.getElementById(\"sync-status\");\n        this.errorMessage = document.getElementById(\"error-message\");\n        this.initializeListeners();\n        this.loadSettings();\n        this.fetchAssignments();\n        chrome.runtime.onMessage.addListener(this.handleMessage.bind(this));\n    }\n    async loadSettings() {\n        const settings = await chrome.storage.sync.get([\"icalUrl\", \"weights\"]);\n        if (settings.icalUrl) {\n            this.urlInput.value = settings.icalUrl;\n        }\n        if (settings.weights) {\n            this.dueDateWeight.value = settings.weights.dueDate.toString();\n            this.gradeWeight.value = settings.weights.gradeWeight.toString();\n            this.impactWeight.value = settings.weights.impact.toString();\n        }\n    }\n    initializeListeners() {\n        var _a;\n        this.urlInput.addEventListener(\"change\", () => {\n            chrome.storage.sync.set({ icalUrl: this.urlInput.value });\n        });\n        (_a = document.getElementById(\"sync-button\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", () => {\n            chrome.runtime.sendMessage({ type: \"forceSync\" });\n        });\n        [this.dueDateWeight, this.gradeWeight, this.impactWeight].forEach(slider => {\n            slider.addEventListener(\"input\", () => {\n                chrome.storage.sync.set({\n                    weights: {\n                        dueDate: parseInt(this.dueDateWeight.value),\n                        gradeWeight: parseInt(this.gradeWeight.value),\n                        impact: parseInt(this.impactWeight.value)\n                    }\n                });\n            });\n        });\n    }\n    async fetchAssignments() {\n        try {\n            const assignments = await chrome.runtime.sendMessage({ type: \"fetchAssignments\" });\n            this.displayAssignments(assignments);\n        }\n        catch (error) {\n            this.errorMessage.textContent = \"Failed to fetch assignments\";\n        }\n    }\n    displayAssignments(assignments) {\n        this.assignmentsList.innerHTML = assignments.map(assignment => `\n            <div class=\"assignment\">\n                <label class=\"completion-toggle\">\n                    <input type=\"checkbox\" \n                           ${assignment.completed ? \"checked\" : \"\"} \n                           data-title=\"${assignment.title}\">\n                    ${assignment.title}\n                </label>\n                <div class=\"details\">\n                    Due: ${assignment.dueDate.toLocaleDateString()}\n                    ${assignment.gradeWeight ? `Weight: ${assignment.gradeWeight}%` : \"\"}\n                </div>\n            </div>\n        `).join(\"\");\n        this.assignmentsList.querySelectorAll(\".completion-toggle input\").forEach(checkbox => {\n            checkbox.addEventListener(\"change\", (e) => {\n                const title = e.target.dataset.title;\n                if (title) {\n                    chrome.storage.local.set({ [`assignment_${title}`]: e.target.checked });\n                }\n            });\n        });\n    }\n    handleMessage(message) {\n        if (message.type === \"syncComplete\" && message.timestamp) {\n            this.syncStatus.textContent = `Last synced: ${new Date(message.timestamp).toLocaleTimeString()}`;\n        }\n    }\n}\nexport const popupManager = new PopupManager();\n"],"names":["constructor","this","urlInput","document","getElementById","dueDateWeight","gradeWeight","impactWeight","assignmentsList","syncStatus","errorMessage","initializeListeners","loadSettings","fetchAssignments","chrome","runtime","onMessage","addListener","handleMessage","bind","settings","storage","sync","get","icalUrl","value","weights","dueDate","toString","impact","_a","addEventListener","set","sendMessage","type","forEach","slider","parseInt","assignments","displayAssignments","error","textContent","innerHTML","map","assignment","completed","title","toLocaleDateString","join","querySelectorAll","checkbox","e","target","dataset","local","checked","message","timestamp","Date","toLocaleTimeString"],"sourceRoot":""}