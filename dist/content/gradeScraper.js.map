{"version":3,"file":"content/gradeScraper.js","mappings":"mBAwDA,SAASA,IACLC,QAAQC,IAAI,4CACZ,MAAMC,EAhDV,WACI,IACIF,QAAQC,IAAI,yCAEZ,MAAME,EAAgBC,SAASC,cAAc,iBACvCC,EAAaF,SAASC,cAAc,wBAE1C,IAAKF,EAED,OADAH,QAAQO,KAAK,6CACN,KAGX,IAAKD,EAED,OADAN,QAAQO,KAAK,oCACN,KAGX,MAAMC,EAAaL,EAAcM,aAAaC,QAAU,iBACxDV,QAAQC,IAAI,2BAA4BO,GAExC,MAAMG,EAAOL,EAAWM,iBAAiB,yBACzCZ,QAAQC,IAAI,mBAAoBU,EAAKE,OAAQ,eAE7C,MAOMC,EAAO,CAAEN,aAAYO,YAPPC,MAAMC,KAAKN,GAAMO,KAAIC,IAAO,CAC5CC,KAAMD,EAAId,cAAc,qBAAqBI,aAAaC,QAAU,qBACpEW,OAAQC,WAAWH,EAAId,cAAc,WAAWI,aAAaC,QAAU,KACvEa,eAAgBD,WAAWH,EAAId,cAAc,qBAAqBI,aAAaC,QAAU,KACzFc,OAAQF,WAAWH,EAAId,cAAc,uBAAuBI,aAAaC,QAAU,UAKvF,OADAV,QAAQC,IAAI,wCAAyCa,GAC9CA,C,CACT,MAAOW,GAEL,OADAzB,QAAQyB,MAAM,oCAAqCA,GAC5C,I,CAEf,CAWsBC,GAEdxB,GACAF,QAAQC,IAAI,0DACZ0B,OAAOC,QAAQC,YAAY,CACvBC,KAAM,aACNhB,KAAMZ,IACP6B,MAAK,KACJ/B,QAAQC,IAAI,0CAA0C,IACvD+B,OAAMP,IACLzB,QAAQyB,MAAM,wCAAyCA,EAAM,KAGjEzB,QAAQO,KAAK,yCAErB,CAvB4B,YAAxBH,SAAS6B,WACT7B,SAAS8B,iBAAiB,mBAAoBnC,GAE9CA,G","sources":["webpack://canvaspal/./src/content/gradeScraper.ts"],"sourcesContent":["interface GradeData {\n    courseName: string;\n    assignments: Array<{\n        name: string;\n        points: number;\n        pointsPossible: number;\n        weight: number;\n    }>;\n}\n\nfunction scrapeGrades(): GradeData | null {\n    try {\n        console.log('CanvasPal: Starting grade scraping...');\n        \n        const courseElement = document.querySelector('.course-title');\n        const gradeTable = document.querySelector('.student_assignments');\n        \n        if (!courseElement) {\n            console.warn('CanvasPal: Course title element not found');\n            return null;\n        }\n        \n        if (!gradeTable) {\n            console.warn('CanvasPal: Grade table not found');\n            return null;\n        }\n\n        const courseName = courseElement.textContent?.trim() || 'Unknown Course';\n        console.log('CanvasPal: Found course:', courseName);\n        \n        const rows = gradeTable.querySelectorAll('tr.student_assignment');\n        console.log('CanvasPal: Found', rows.length, 'assignments');\n        \n        const assignments = Array.from(rows).map(row => ({\n            name: row.querySelector('.assignment_name')?.textContent?.trim() || 'Unknown Assignment',\n            points: parseFloat(row.querySelector('.grade')?.textContent?.trim() || '0'),\n            pointsPossible: parseFloat(row.querySelector('.points_possible')?.textContent?.trim() || '0'),\n            weight: parseFloat(row.querySelector('.assignment_weight')?.textContent?.trim() || '0')\n        }));\n\n        const data = { courseName, assignments };\n        console.log('CanvasPal: Successfully scraped data:', data);\n        return data;\n    } catch (error) {\n        console.error('CanvasPal: Error scraping grades:', error);\n        return null;\n    }\n}\n\n// Execute after DOM is fully loaded\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializeScraper);\n} else {\n    initializeScraper();\n}\n\nfunction initializeScraper() {\n    console.log('CanvasPal: Initializing grade scraper...');\n    const gradeData = scrapeGrades();\n    \n    if (gradeData) {\n        console.log('CanvasPal: Sending grade data to background service...');\n        chrome.runtime.sendMessage({\n            type: 'GRADE_DATA',\n            data: gradeData\n        }).then(() => {\n            console.log('CanvasPal: Grade data sent successfully');\n        }).catch(error => {\n            console.error('CanvasPal: Failed to send grade data:', error);\n        });\n    } else {\n        console.warn('CanvasPal: No grade data found to send');\n    }\n}\n"],"names":["initializeScraper","console","log","gradeData","courseElement","document","querySelector","gradeTable","warn","courseName","textContent","trim","rows","querySelectorAll","length","data","assignments","Array","from","map","row","name","points","parseFloat","pointsPossible","weight","error","scrapeGrades","chrome","runtime","sendMessage","type","then","catch","readyState","addEventListener"],"sourceRoot":""}