{"version":3,"file":"content/gradeScraper.js","mappings":"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","sources":["webpack://canvaspal/./src/content/gradeScraper.ts"],"sourcesContent":["import { GradeData, Settings } from '../types/models';\n\n// Store settings locally\nlet currentSettings: Settings | null = null;\n\ninterface GradeAssignment {\n    name: string;\n    points: number;\n    pointsPossible: number;\n    weight: number;\n}\n\nfunction scrapeGrades(): GradeData | null {\n    console.log('CanvasPal: Starting grade scraping...');\n    \n    try {\n        // Check if we're on a grades page\n        const pageTitle = document.querySelector('h1.ic-Action-header__Heading')?.textContent;\n        if (!pageTitle?.includes('Grades')) {\n            console.warn('CanvasPal: Not on a grades page');\n            return null;\n        }\n\n        // Updated selectors for course title, including the page title which always contains the course name\n        const courseTitleSelectors = [\n            'h1.page-title',\n            '.course-title',\n            '.ig-header .name',\n            '.course_name',\n            '#course_name',\n            '.course-nav-link',\n            // Add FGCU specific selectors\n            'title',  // The page title contains course name\n            '.context_title'\n        ];\n        \n        let courseTitle = '';\n        for (const selector of courseTitleSelectors) {\n            const el = document.querySelector(selector);\n            if (el?.textContent?.trim()) {\n                courseTitle = el.textContent.trim();\n                // If we found it in the page title, extract just the course name\n                if (selector === 'title') {\n                    const match = courseTitle.match(/: (.+?) -/);\n                    if (match) {\n                        courseTitle = match[1];\n                    }\n                }\n                break;\n            }\n        }\n\n        if (!courseTitle) {\n            courseTitle = 'Unknown Course';\n        }\n\n        // Updated selectors for grade table\n        const gradeTableSelectors = [\n            '#grades_summary',\n            '.student_assignments',\n            '.assignment-grades',\n            '.gradebook-table',\n            // Add FGCU specific selectors\n            '.student_assignment_table',\n            '#assignments-not-weighted',\n            '#assignments-weighted'\n        ];\n        \n        const gradeTable = gradeTableSelectors\n            .map(selector => document.querySelector(selector))\n            .find(el => el);\n\n        if (!gradeTable) {\n            console.warn('CanvasPal: Grade table not found - this might not be a grades page');\n            return null;\n        }\n\n        console.log('CanvasPal: Found course:', courseTitle);\n\n        // Updated selectors for assignment rows\n        const assignmentRowSelectors = [\n            'tr.student_assignment',\n            '.assignment-row',\n            '.slick-row',\n            '.grade-values',\n            // Add FGCU specific selectors\n            '.group_total',\n            '.group_grade',\n            '.assignment_graded'\n        ];\n        \n        let assignments: GradeAssignment[] = [];\n        for (const selector of assignmentRowSelectors) {\n            const rows = gradeTable.querySelectorAll(selector);\n            if (rows.length > 0) {\n                assignments = Array.from(rows)\n                    .filter(row => {\n                        // Skip rows that are muted or pending\n                        const isMuted = row.getAttribute('data-muted') === 'true';\n                        const isPending = row.getAttribute('data-pending_quiz') === 'true';\n                        const isGroupTotal = row.classList.contains('group_total');\n                        const isFinalGrade = row.classList.contains('final_grade');\n                        return !isMuted && !isPending && !isGroupTotal && !isFinalGrade;\n                    })\n                    .map(row => {\n                        const nameSelectors = [\n                            '.assignment_name',\n                            '.title',\n                            '.assignment-name',\n                            '.assignment_title',\n                            '.name'\n                        ];\n                        const gradeSelectors = [\n                            '.grade',\n                            '.score',\n                            '.points',\n                            '.assignment_score',\n                            '.total_grade'\n                        ];\n                        const possibleSelectors = [\n                            '.points_possible',\n                            '.max-points',\n                            '.total_possible'\n                        ];\n                        const weightSelectors = [\n                            '.assignment_weight',\n                            '.weight',\n                            '.group_weight'\n                        ];\n\n                        // Get assignment name from link or text\n                        const nameLink = row.querySelector('th.title a');\n                        const name = (nameLink?.textContent?.trim() ||\n                            nameSelectors\n                                .map(s => row.querySelector(s))\n                                .find(el => el?.textContent?.trim())?.textContent?.trim() ||\n                            'Unknown Assignment');\n                        \n                        // Get points, handling special cases\n                        let points = 0;\n                        const scoreHolder = row.querySelector('.score_holder');\n                        if (scoreHolder) {\n                            const originalPoints = scoreHolder.querySelector('.original_points')?.textContent?.trim();\n                            if (originalPoints) {\n                                points = parseFloat(originalPoints) || 0;\n                            } else {\n                                points = parseFloat(gradeSelectors\n                                    .map(s => row.querySelector(s))\n                                    .find(el => el?.textContent?.trim())?.textContent?.trim()?.replace(/[^0-9.-]/g, '') || '0');\n                            }\n                        }\n                        \n                        // Get points possible\n                        const pointsPossible = parseFloat(possibleSelectors\n                            .map(s => row.querySelector(s))\n                            .find(el => el?.textContent?.trim())?.textContent?.trim()?.replace(/[^0-9.-]/g, '') || '0');\n                        \n                        // Get weight\n                        const weight = parseFloat(weightSelectors\n                            .map(s => row.querySelector(s))\n                            .find(el => el?.textContent?.trim())?.textContent?.trim()?.replace(/[^0-9.-]/g, '') || '0');\n\n                        return {\n                            name,\n                            points,\n                            pointsPossible,\n                            weight\n                        };\n                    });\n                break;\n            }\n        }\n\n        if (assignments.length === 0) {\n            console.warn('CanvasPal: No assignments found in grade table');\n            return null;\n        }\n\n        console.log('CanvasPal: Found', assignments.length, 'assignments');\n        const data: GradeData = {\n            courseName: courseTitle,\n            assignments\n        };\n        \n        console.log('CanvasPal: Successfully scraped data:', data);\n        return data;\n    } catch (error) {\n        console.error('CanvasPal: Error scraping grades:', error);\n        return null;\n    }\n}\n\n// Initialize settings\nasync function initializeSettings(): Promise<void> {\n    try {\n        const result = await chrome.storage.sync.get('settings');\n        currentSettings = result.settings;\n        console.log('CanvasPal: Settings loaded:', currentSettings);\n    } catch (error) {\n        console.error('CanvasPal: Error loading settings:', error);\n    }\n}\n\n// Message listeners\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    // Handle grade requests\n    if (message.action === 'getGrades') {\n        console.log('CanvasPal: Received grade request');\n        const grades = scrapeGrades();\n        sendResponse({\n            grades,\n            success: grades !== null\n        });\n        return true;\n    }\n    \n    // Handle settings updates\n    if (message.type === 'SETTINGS_UPDATED') {\n        console.log('CanvasPal: Received settings update:', message.settings);\n        currentSettings = message.settings;\n        // Re-run grade scraping with new settings if we're on a grades page\n        if (document.querySelector('h1.ic-Action-header__Heading')?.textContent?.includes('Grades')) {\n            scrapeGrades();\n        }\n        sendResponse({ success: true });\n        return true;\n    }\n});\n\n// Load settings on initialization\ninitializeSettings();\n\n// Initialize grade scraping when page loads\nconst initializeScraping = () => {\n    // Wait for the grades table to be visible\n    const observer = new MutationObserver((mutations, obs) => {\n        const gradesTable = document.getElementById('grades_summary');\n        if (gradesTable) {\n            obs.disconnect();\n            scrapeGrades();\n        }\n    });\n\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n};\n\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializeScraping);\n} else {\n    initializeScraping();\n}\n"],"names":["currentSettings","scrapeGrades","console","log","pageTitle","document","querySelector","textContent","includes","warn","courseTitleSelectors","courseTitle","selector","el","trim","match","gradeTable","map","find","assignmentRowSelectors","assignments","rows","querySelectorAll","length","Array","from","filter","row","isMuted","getAttribute","isPending","isGroupTotal","classList","contains","isFinalGrade","gradeSelectors","nameLink","name","s","points","scoreHolder","originalPoints","parseFloat","replace","pointsPossible","weight","data","courseName","error","chrome","runtime","onMessage","addListener","message","sender","sendResponse","action","grades","success","type","settings","async","result","storage","sync","get","initializeSettings","initializeScraping","MutationObserver","mutations","obs","getElementById","disconnect","observe","body","childList","subtree","readyState","addEventListener"],"sourceRoot":""}