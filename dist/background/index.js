(()=>{"use strict";var e;!function(e){e[e.DEBUG=0]="DEBUG",e[e.INFO=1]="INFO",e[e.WARN=2]="WARN",e[e.ERROR=3]="ERROR"}(e||(e={}));class t{constructor(t,s=e.INFO){this.context=t,this.currentLevel=s,this.cleanOldLogs()}static getInstance(s,r=e.INFO){const i=`${s}-${r}`;return this.instances.has(i)||this.instances.set(i,new t(s,r)),this.instances.get(i)}setLevel(e){this.currentLevel=e}debug(t,s){this.log(e.DEBUG,t,s)}info(t,s){this.log(e.INFO,t,s)}warn(t,s){this.log(e.WARN,t,s)}error(t,s){this.log(e.ERROR,t,s)}async log(t,s,...r){if(t>=this.currentLevel){const i=(new Date).toISOString(),a=`[${i}] ${this.getLogPrefix(t)} [${this.context}] ${s}`;if(r.length){const e=this.formatLogData(r);console.log(a,e)}else console.log(a);const n={timestamp:i,level:t,message:s,data:r,stack:Error().stack};this.saveLogs(n),t===e.ERROR&&this.notifyError(n)}}getLogPrefix(t){switch(t){case e.DEBUG:return"🔍 DEBUG:";case e.INFO:return"📢 INFO:";case e.WARN:return"⚠️ WARN:";case e.ERROR:return"❌ ERROR:";default:return"📢"}}formatLogData(e){try{if(Array.isArray(e))return e.map((e=>this.formatLogData(e)));if(e&&"object"==typeof e){if(e instanceof Error)return{name:e.name,message:e.message,stack:e.stack};const t={};for(const[s,r]of Object.entries(e))t[s]=this.formatLogData(r);return t}return e}catch(e){return"[Error formatting log data]"}}async saveLogs(e){const{logs:s=[]}=await chrome.storage.local.get("logs");s.push(e),s.length>t.MAX_LOGS&&s.splice(0,s.length-t.MAX_LOGS),await chrome.storage.local.set({logs:s})}async cleanOldLogs(){const{logs:e=[]}=await chrome.storage.local.get("logs"),t=new Date;t.setDate(t.getDate()-30);const s=e.filter((e=>new Date(e.timestamp)>t));await chrome.storage.local.set({logs:s})}notifyError(e){chrome.notifications.create({type:"basic",iconUrl:"/dist/icons/icon128.png",title:"CanvasPal Error",message:e.message,priority:2})}async getLogs(e){const{logs:t=[]}=await chrome.storage.local.get("logs");return e?t.filter((t=>t.level===e)):t}}t.MAX_LOGS=1e3,t.instances=new Map,t.getInstance("default");class s{constructor(){this.logger=new t("BackgroundAssignmentDetector")}async detectAssignments(){try{const[e,t,s]=await Promise.all([this.fetchPlannerItems(),this.fetchMissingSubmissions(),this.parseDashboardCards()]);return[...e,...t,...s].filter((e=>this.isValidAssignment(e)))}catch(e){return this.logger.error("Error detecting assignments:",e),[]}}async fetchFromContentScript(e,t={}){const s=await chrome.tabs.query({active:!0,currentWindow:!0});if(!s[0]?.id)throw new Error("No active tab found");const r=await chrome.tabs.sendMessage(s[0].id,{type:"FETCH_REQUEST",url:e,options:{...t,credentials:"same-origin",headers:{Accept:"application/json","X-Requested-With":"XMLHttpRequest",...t.headers}}});if(!r.success)throw new Error(r.error||"Failed to fetch data");return r.data}async fetchPlannerItems(){try{return(await this.fetchFromContentScript("/api/v1/planner/items?per_page=50")).map((e=>this.convertPlannerItem(e))).filter((e=>null!==e))}catch(e){return this.logger.error("Error fetching planner items:",e),[]}}async fetchMissingSubmissions(){try{return(await this.fetchFromContentScript("/api/v1/users/self/missing_submissions?include[]=planner_overrides")).map((e=>this.convertMissingSubmission(e))).filter((e=>null!==e))}catch(e){return this.logger.error("Error fetching missing submissions:",e),[]}}async parseDashboardCards(){try{const e=await this.fetchFromContentScript("/api/v1/dashboard/dashboard_cards"),t=[];for(const s of e)if(s.assignments){const e=s.assignments.map((e=>this.convertDashboardAssignment(e,s))).filter((e=>null!==e));t.push(...e)}return t}catch(e){return this.logger.error("Error parsing dashboard cards:",e),[]}}convertPlannerItem(e){if(!e.plannable||!e.plannable_type)return null;const t=this.determineAssignmentType(e.plannable_type),s=e.plannable_date?new Date(e.plannable_date):null;return t&&s?{id:e.plannable_id.toString(),title:e.plannable?.title||e.plannable?.name||"",dueDate:s,course:e.context_name||"",courseId:e.course_id?.toString(),type:t,points:e.plannable?.points_possible,maxPoints:e.plannable?.points_possible,completed:!!e.planner_override?.marked_complete,priorityScore:0,url:e.html_url,details:{submissionType:e.plannable?.submission_types,isCompleted:!!e.planner_override?.marked_complete,isLocked:!!e.plannable?.locked_for_user,description:e.plannable?.description}}:null}convertMissingSubmission(e){return e.due_at?{id:e.id.toString(),title:e.name||e.assignment?.name||"",dueDate:new Date(e.due_at),course:e.course?.name||"",courseId:e.course_id?.toString(),type:"assignment",points:e.points_possible,maxPoints:e.points_possible,completed:!1,priorityScore:0,url:e.html_url,details:{isCompleted:!1,isLocked:!1}}:null}convertDashboardAssignment(e,t){if(!e.due_at)return null;const s=this.determineAssignmentType(e.type);return{id:e.id.toString(),title:e.name||"",dueDate:new Date(e.due_at),course:t.shortName||"",courseId:t.id?.toString(),type:s,points:e.points_possible,maxPoints:e.points_possible,completed:!!e.has_submitted_submissions,priorityScore:0,url:e.html_url,details:{submissionType:e.submission_types,isCompleted:!!e.has_submitted_submissions,isLocked:!!e.locked_for_user,description:e.description}}}determineAssignmentType(e){switch(e.toLowerCase()){case"quiz":case"quizzes/quiz":return"quiz";case"discussion_topic":return"discussion";case"announcement":return"announcement";default:return"assignment"}}isValidAssignment(e){return null!==e&&!!e.title&&!!e.dueDate&&!!e.course}}class r{constructor(){this.PRIORITY_WEIGHTS={GRADE_IMPACT:.4,COURSE_GRADE:.3,DUE_DATE:.3},this.logger=new t("BackgroundPriorityCalculator")}calculatePriority(e){try{const t={daysUntilDue:this.calculateDaysUntilDue(e.dueDate),gradeImpact:this.calculateGradeImpact(e),courseGradeImpact:this.calculateCourseGradeImpact(e),typeWeight:this.getTypeWeight(e.type)},s={gradeComponent:t.gradeImpact*this.PRIORITY_WEIGHTS.GRADE_IMPACT,courseComponent:t.courseGradeImpact*this.PRIORITY_WEIGHTS.COURSE_GRADE,dateComponent:this.calculateDueDatePriority(t.daysUntilDue)*this.PRIORITY_WEIGHTS.DUE_DATE},r=s.gradeComponent+s.courseComponent+s.dateComponent;return Math.min(Math.max(r*t.typeWeight,0),1)}catch(e){return this.logger.error("Error calculating priority:",e),0}}calculateDaysUntilDue(e){const t=new Date,s=e.getTime()-t.getTime();return Math.ceil(s/864e5)}calculateDueDatePriority(e){return e<=0?1:e>=14?.2:1-e/14}calculateGradeImpact(e){return e.points&&e.maxPoints?Math.min(e.points/100,1):.5}calculateCourseGradeImpact(e){return e.courseGrade?1-e.courseGrade:.85}getTypeWeight(e){switch(e){case"quiz":return 1.2;case"assignment":default:return 1;case"discussion":return.8;case"announcement":return.5}}setPriorityWeights(e){const t=(e.GRADE_IMPACT||this.PRIORITY_WEIGHTS.GRADE_IMPACT)+(e.COURSE_GRADE||this.PRIORITY_WEIGHTS.COURSE_GRADE)+(e.DUE_DATE||this.PRIORITY_WEIGHTS.DUE_DATE);Math.abs(t-1)>.001?this.logger.warn("Priority weights do not sum to 1. Using default weights."):(Object.assign(this.PRIORITY_WEIGHTS,e),this.logger.info("Priority weights updated:",this.PRIORITY_WEIGHTS))}}class i{constructor(){this.gradeData={},this.dashboardData={},this.lastSyncTime=0,this.assignments=[],this.contentScriptReady=!1,this.settings={priorityWeights:{GRADE_IMPACT:.4,COURSE_GRADE:.3,DUE_DATE:.3},typeWeights:{quiz:1.2,assignment:1,discussion:.8,announcement:.5},displayOptions:{showCourseNames:!0,showGradeImpact:!0,showPriorityScores:!0,highlightOverdue:!0},refreshInterval:30,debugSettings:{enabled:!1,logLevel:"info",showDateDebug:!1,showAssignmentDebug:!1,showPriorityDebug:!1},icalUrl:""},this.detector=new s,this.priorityCalculator=new r,this.logger=new t("BackgroundService"),this.initialize(),this.setupAutoRefresh()}async initialize(){try{const{settings:e}=await chrome.storage.sync.get("settings");e?this.settings=e:await chrome.storage.sync.set({settings:this.settings}),chrome.runtime.onMessage.addListener(((e,t,s)=>(this.handleMessage(e,t,s),!0))),this.startPeriodicSync(),this.logger.info("Background service initialized")}catch(e){this.logger.error("Error initializing background service:",e)}}async handleMessage(e,t,s){try{switch(e.type){case"SETTINGS_UPDATED":await this.handleSettingsUpdate(e.settings),s({success:!0});break;case"GET_ASSIGNMENTS":if(!this.contentScriptReady)return void s({assignments:[],message:"Loading assignments..."});s({assignments:await this.getAssignments()});break;case"UPDATE_ASSIGNMENT_COMPLETION":await this.updateAssignmentCompletion(e.assignmentId,e.completed),s({success:!0});break;case"REFRESH_ASSIGNMENTS":await this.refreshAssignments(),s({success:!0});break;case"GRADE_DATA":this.handleGradeData(e.data),s({success:!0});break;case"DASHBOARD_DATA":this.handleDashboardData(e.data),s({success:!0});break;case"CONTENT_SCRIPT_READY":this.logger.info("Content script ready"),this.contentScriptReady=!0,s({success:!0}),setTimeout((()=>{this.refreshAssignments()}),1e3);break;default:this.logger.warn("Unknown message type:",e),s({error:"Unknown message type"})}}catch(e){this.logger.error("Error handling message:",e),s({error:"Internal error"})}}async handleSettingsUpdate(e){try{this.settings=e,await chrome.storage.sync.set({settings:e}),this.logger.info("Settings saved to sync storage"),await chrome.storage.local.set({settings:e}),this.logger.info("Settings saved to local storage");const t=(await chrome.tabs.query({url:["*://*.instructure.com/*","*://*.canvas.com/*"]})).map((async t=>{if(t.id)try{await chrome.tabs.sendMessage(t.id,{type:"SETTINGS_UPDATED",settings:e}),this.logger.debug(`Settings updated in tab ${t.id}`)}catch(s){this.logger.debug(`Could not update tab ${t.id}, will retry:`,s),setTimeout((async()=>{try{t.id&&(await chrome.tabs.sendMessage(t.id,{type:"SETTINGS_UPDATED",settings:e}),this.logger.debug(`Settings updated in tab ${t.id} after retry`))}catch(e){this.logger.debug(`Failed to update tab ${t.id} after retry:`,e)}}),2e3)}}));await Promise.all(t),this.logger.info("Settings updated and propagated to all tabs"),await this.performSync()}catch(e){throw this.logger.error("Error in handleSettingsUpdate:",e),e}}async getAssignments(){return 0===this.assignments.length&&await this.refreshAssignments(),this.assignments}async refreshAssignments(){if(this.contentScriptReady)try{if(!(await chrome.tabs.query({active:!0,url:["*://*.instructure.com/*","*://*.canvas.com/*"]})).length)return this.logger.warn("No active Canvas tab found"),this.assignments=[],await this.saveAssignments(),void this.notifyPopups();const e=await this.detector.detectAssignments();e.forEach((e=>{e.priorityScore=this.priorityCalculator.calculatePriority(e)})),e.sort(((e,t)=>t.priorityScore-e.priorityScore)),this.assignments=e,await this.saveAssignments(),this.notifyPopups(),this.logger.info("Assignments refreshed:",{count:e.length,types:this.getAssignmentTypeCounts(e)})}catch(e){throw this.logger.error("Error refreshing assignments:",e),this.assignments=[],await this.saveAssignments(),this.notifyPopups(),e}else this.logger.warn("Content script not ready, waiting for initialization")}async updateAssignmentCompletion(e,t){const s=this.assignments.find((t=>t.id===e));s&&(s.completed=t,await this.saveAssignments(),this.notifyPopups())}async saveAssignments(){try{await chrome.storage.local.set({assignments:this.assignments,lastUpdated:(new Date).toISOString()})}catch(e){throw this.logger.error("Error saving assignments:",e),e}}notifyPopups(){const e={type:"ASSIGNMENTS_UPDATED",assignments:this.assignments,status:this.getAssignmentStatus()};chrome.runtime.sendMessage(e).catch((e=>{this.logger.debug("No popups to notify:",e)})),chrome.tabs.query({url:["*://*.instructure.com/*","*://*.canvas.com/*"]}).then((t=>{t.forEach((t=>{t.id&&chrome.tabs.sendMessage(t.id,e).catch((e=>{this.logger.debug(`Could not notify tab ${t.id}:`,e)}))}))}))}getAssignmentStatus(){return this.contentScriptReady?0===this.assignments.length?"No assignments found":`Found ${this.assignments.length} assignments`:"Loading assignments..."}setupAutoRefresh(){chrome.alarms.create("refreshAssignments",{periodInMinutes:30}),chrome.alarms.onAlarm.addListener((async e=>{"refreshAssignments"===e.name&&await this.refreshAssignments()}))}getAssignmentTypeCounts(e){return e.reduce(((e,t)=>(e[t.type]=(e[t.type]||0)+1,e)),{})}handleGradeData(e){try{this.logger.info("Received grade data:",e),this.gradeData[e.courseName]=e,chrome.storage.local.set({[`grades_${e.courseName}`]:e,lastUpdated:(new Date).toISOString()})}catch(e){this.logger.error("Error handling grade data:",e)}}handleDashboardData(e){try{this.logger.info("Received dashboard data:",e),e.forEach((e=>{this.dashboardData[e.courseName]=e,chrome.storage.local.set({[`dashboard_${e.courseName}`]:e,lastUpdated:(new Date).toISOString()})})),this.mergeDashboardData()}catch(e){this.logger.error("Error handling dashboard data:",e)}}mergeDashboardData(){this.assignments=this.assignments.map((e=>{const t=this.findDashboardAssignment(e);return t?{...e,dueDate:new Date(t.dueDate),type:t.type||e.type}:e})),Object.values(this.dashboardData).forEach((e=>{e.assignments.forEach((t=>{if(!this.assignments.some((s=>s.title.toLowerCase()===t.name.toLowerCase()&&s.course===e.courseName))){const s={id:`${e.courseName}_${t.name}`,title:t.name,dueDate:new Date(t.dueDate),course:e.courseName,courseId:e.courseName,type:t.type,points:0,maxPoints:0,priorityScore:0,completed:!1,url:"",details:{isCompleted:!1,isLocked:!1}};this.assignments.push(s)}}))})),this.assignments.forEach((e=>{e.priorityScore=this.priorityCalculator.calculatePriority(e)})),this.assignments.sort(((e,t)=>t.priorityScore-e.priorityScore)),this.saveAssignments()}findDashboardAssignment(e){const t=this.dashboardData[e.course];if(t)return t.assignments.find((t=>t.name.toLowerCase()===e.title.toLowerCase()))}startPeriodicSync(){this.syncIntervalId&&(window.clearInterval(this.syncIntervalId),this.syncIntervalId=void 0),this.retryTimeoutId&&(window.clearTimeout(this.retryTimeoutId),this.retryTimeoutId=void 0),this.performSync();const e=window.setInterval((()=>{this.performSync()}),i.SYNC_INTERVAL);this.syncIntervalId=e}async performSync(){try{const e=Date.now();if(e-this.lastSyncTime<6e4)return;await this.refreshAssignments(),this.lastSyncTime=e,await this.logger.info("Sync completed successfully"),chrome.runtime.sendMessage({type:"syncComplete",timestamp:e})}catch(e){await this.logger.error("Sync failed",e),console.error("Sync failed:",e);const t=window.setTimeout((()=>{this.performSync()}),i.RETRY_INTERVAL);this.retryTimeoutId=t,chrome.runtime.sendMessage({type:"syncError",error:e instanceof Error?e.message:"Unknown error"})}}}i.SYNC_INTERVAL=18e5,i.RETRY_INTERVAL=3e5;const a=new i;a.initialize().then((()=>{chrome.alarms.create("sync",{periodInMinutes:30}),chrome.alarms.onAlarm.addListener((e=>{"sync"===e.name&&a.performSync()})),chrome.commands.onCommand.addListener((e=>{"refresh-assignments"===e&&a.performSync()}))}))})();
//# sourceMappingURL=index.js.map