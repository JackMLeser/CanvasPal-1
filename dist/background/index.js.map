{"version":3,"file":"background/index.js","mappings":"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","sources":["webpack://canvaspal/webpack/runtime/chunk loaded","webpack://canvaspal/./src/utils/logger.ts","webpack://canvaspal/./src/utils/assignmentDetector.ts","webpack://canvaspal/./src/utils/dateDebugPanel.ts","webpack://canvaspal/./src/utils/debugPanel.ts","webpack://canvaspal/./src/utils/dateDebugger.ts","webpack://canvaspal/./src/utils/calendar.ts","webpack://canvaspal/./src/utils/priorityCalculator.ts","webpack://canvaspal/./src/background/index.ts","webpack://canvaspal/./src/utils/performanceMonitor.ts","webpack://canvaspal/webpack/bootstrap","webpack://canvaspal/webpack/runtime/hasOwnProperty shorthand","webpack://canvaspal/webpack/runtime/jsonp chunk loading","webpack://canvaspal/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export enum LogLevel {\n    DEBUG = 0,\n    INFO = 1,\n    WARN = 2,\n    ERROR = 3\n}\n\ninterface LogEntry {\n    timestamp: string;\n    level: LogLevel;\n    message: string;\n    data?: any;\n    stack?: string;\n}\n\nexport class Logger {\n    private static readonly MAX_LOGS = 1000;\n    private static instances: Map<string, Logger> = new Map();\n    private context: string;\n    private currentLevel: LogLevel;\n\n    public constructor(context: string, level: LogLevel = LogLevel.INFO) {\n        this.context = context;\n        this.currentLevel = level;\n        this.cleanOldLogs();\n    }\n\n    public static getInstance(context: string, level: LogLevel = LogLevel.INFO): Logger {\n        const key = `${context}-${level}`;\n        if (!this.instances.has(key)) {\n            this.instances.set(key, new Logger(context, level));\n        }\n        return this.instances.get(key)!;\n    }\n\n    setLevel(level: LogLevel): void {\n        this.currentLevel = level;\n    }\n\n    debug(message: string, data?: any): void {\n        this.log(LogLevel.DEBUG, message, data);\n    }\n\n    info(message: string, data?: any): void {\n        this.log(LogLevel.INFO, message, data);\n    }\n\n    warn(message: string, data?: any): void {\n        this.log(LogLevel.WARN, message, data);\n    }\n\n    error(message: string, data?: any): void {\n        this.log(LogLevel.ERROR, message, data);\n    }\n\n    public async log(level: LogLevel, message: string, ...args: any[]): Promise<void> {\n        if (level >= this.currentLevel) {\n            const timestamp = new Date().toISOString();\n            const prefix = this.getLogPrefix(level);\n            const formattedMessage = `[${timestamp}] ${prefix} [${this.context}] ${message}`;\n\n            if (args.length) {\n                const formattedData = this.formatLogData(args);\n                console.log(formattedMessage, formattedData);\n            } else {\n                console.log(formattedMessage);\n            }\n\n            const entry: LogEntry = {\n                timestamp,\n                level,\n                message,\n                data: args,\n                stack: Error().stack\n            };\n\n            this.saveLogs(entry);\n\n            if (level === LogLevel.ERROR) {\n                this.notifyError(entry);\n            }\n        }\n    }\n\n    private getLogPrefix(level: LogLevel): string {\n        switch (level) {\n            case LogLevel.DEBUG:\n                return '🔍 DEBUG:';\n            case LogLevel.INFO:\n                return '📢 INFO:';\n            case LogLevel.WARN:\n                return '⚠️ WARN:';\n            case LogLevel.ERROR:\n                return '❌ ERROR:';\n            default:\n                return '📢';\n        }\n    }\n\n    private formatLogData(data: any): any {\n        if (data instanceof Element) {\n            return {\n                tagName: data.tagName,\n                id: data.id,\n                className: data.className,\n                textContent: data.textContent?.substring(0, 100) + '...',\n                html: data.outerHTML?.substring(0, 200) + '...'\n            };\n        }\n\n        if (Array.isArray(data)) {\n            return data.map(item => this.formatLogData(item));\n        }\n\n        if (data && typeof data === 'object') {\n            const formatted: Record<string, any> = {};\n            for (const [key, value] of Object.entries(data)) {\n                formatted[key] = this.formatLogData(value);\n            }\n            return formatted;\n        }\n\n        return data;\n    }\n\n    private async saveLogs(entry: LogEntry): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        logs.push(entry);\n\n        if (logs.length > Logger.MAX_LOGS) {\n            logs.splice(0, logs.length - Logger.MAX_LOGS);\n        }\n\n        await chrome.storage.local.set({ logs });\n    }\n\n    private async cleanOldLogs(): Promise<void> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n        const filteredLogs = logs.filter((log: LogEntry) => \n            new Date(log.timestamp) > thirtyDaysAgo\n        );\n\n        await chrome.storage.local.set({ logs: filteredLogs });\n    }\n\n    private notifyError(entry: LogEntry): void {\n        chrome.notifications.create({\n            type: 'basic',\n            iconUrl: 'icons/icon128.png',\n            title: 'CanvasPal Error',\n            message: entry.message,\n            priority: 2\n        });\n    }\n\n    async getLogs(level?: LogLevel): Promise<LogEntry[]> {\n        const { logs = [] } = await chrome.storage.local.get('logs');\n        return level ? logs.filter((log: LogEntry) => log.level === level) : logs;\n    }\n}\n\nexport const logger = Logger.getInstance('default');\n","import { Assignment, AssignmentType, AssignmentDetails } from '../types/models';\nimport { Logger } from '../utils/logger';\nimport { DebugPanel } from './debugPanel';\nimport { DateDebugger } from './dateDebugger';\nimport { PerformanceMonitor } from './performanceMonitor';\n\nexport class AssignmentDetector {\n    private logger: Logger;\n    private debugPanel: DebugPanel;\n    private dateDebugger: DateDebugger;\n    private performanceMonitor: PerformanceMonitor;\n\n    constructor() {\n        this.logger = new Logger('AssignmentDetector');\n        this.debugPanel = new DebugPanel();\n        this.dateDebugger = new DateDebugger();\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n    }\n\n    public async detectAssignments(): Promise<Assignment[]> {\n        return this.performanceMonitor.monitorAsync('detectAssignments', async () => {\n            try {\n                this.debugPanel.logDetectionEvent('Starting assignment detection');\n                \n                // Monitor date detection\n                const dateMatches = await this.performanceMonitor.monitorAsync('dateDetection', \n                    async () => this.dateDebugger.highlightDates(),\n                    { totalElements: document.querySelectorAll('[class*=\"date\"]').length }\n                );\n\n                this.debugPanel.logDetectionEvent('Date detection complete', {\n                    totalDates: dateMatches.length,\n                    dueDates: dateMatches.filter(m => m.type === 'due').length,\n                    performance: this.performanceMonitor.getReport()\n                });\n\n                // Monitor API fetches in parallel\n                const [plannerItems, missingSubmissions, dashboardItems] = await Promise.all([\n                    this.performanceMonitor.monitorAsync('fetchPlannerItems', \n                        () => this.fetchPlannerItems()),\n                    this.performanceMonitor.monitorAsync('fetchMissingSubmissions', \n                        () => this.fetchMissingSubmissions()),\n                    this.performanceMonitor.monitorAsync('parseDashboardCards', \n                        () => this.parseDashboardCards())\n                ]);\n\n                const allAssignments = [...plannerItems, ...missingSubmissions, ...dashboardItems]\n                    .filter(assignment => this.isValidAssignment(assignment));\n\n                // Monitor date validation\n                await this.performanceMonitor.monitorAsync('validateDates', \n                    async () => this.validateAssignmentDates(allAssignments, dateMatches),\n                    { assignmentCount: allAssignments.length }\n                );\n\n                const performanceReport = this.performanceMonitor.getReport();\n                this.debugPanel.logDetectionEvent('Assignment detection complete', {\n                    totalAssignments: allAssignments.length,\n                    performance: performanceReport\n                });\n\n                return allAssignments;\n            } catch (error) {\n                this.logger.error('Error detecting assignments:', error);\n                return [];\n            }\n        });\n    }\n\n    private async validateAssignmentDates(assignments: Assignment[], dateMatches: any[]): Promise<void> {\n        return this.performanceMonitor.monitorAsync('validateAssignmentDates', async () => {\n            assignments.forEach(assignment => {\n                const matchingDateElements = dateMatches.filter(match => {\n                    const matchDate = match.date.getTime();\n                    const assignmentDate = assignment.dueDate.getTime();\n                    return Math.abs(matchDate - assignmentDate) < 24 * 60 * 60 * 1000;\n                });\n\n                if (matchingDateElements.length > 0) {\n                    this.debugPanel.logDetectionEvent('Date validation:', {\n                        assignment: assignment.title,\n                        dueDate: assignment.dueDate,\n                        matchingElements: matchingDateElements.length\n                    });\n                }\n            });\n        }, { assignmentCount: assignments.length, dateMatchCount: dateMatches.length });\n    }\n\n    private async fetchPlannerItems(): Promise<Assignment[]> {\n        try {\n            const response = await fetch('/api/v1/planner/items?per_page=50', {\n                headers: {\n                    'Accept': 'application/json+canvas-string-ids, application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                credentials: 'same-origin'\n            });\n\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            \n            const items = await response.json();\n            this.debugPanel.logDetectionEvent('Planner items retrieved:', items);\n\n            return items.map((item: any) => {\n                const assignment = this.convertPlannerItem(item);\n                if (assignment) {\n                    this.debugPanel.logDetectionEvent('Processed planner item:', {\n                        title: assignment.title,\n                        type: assignment.type,\n                        dueDate: assignment.dueDate\n                    });\n                }\n                return assignment;\n            }).filter((item: Assignment | null): item is Assignment => item !== null);\n        } catch (error) {\n            this.logger.error('Error fetching planner items:', error);\n            return [];\n        }\n    }\n\n    private async fetchMissingSubmissions(): Promise<Assignment[]> {\n        try {\n            const response = await fetch('/api/v1/users/self/missing_submissions?include[]=planner_overrides', {\n                headers: {\n                    'Accept': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                credentials: 'same-origin'\n            });\n\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            \n            const submissions = await response.json();\n            return submissions.map((submission: any) => this.convertMissingSubmission(submission))\n                .filter((item: Assignment | null) => item !== null) as Assignment[];\n        } catch (error) {\n            this.logger.error('Error fetching missing submissions:', error);\n            return [];\n        }\n    }\n\n    private async parseDashboardCards(): Promise<Assignment[]> {\n        try {\n            const response = await fetch('/api/v1/dashboard/dashboard_cards', {\n                headers: {\n                    'Accept': 'application/json+canvas-string-ids, application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                credentials: 'same-origin'\n            });\n\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            \n            const cards = await response.json();\n            this.debugPanel.logDetectionEvent('Dashboard cards retrieved:', cards);\n\n            const assignments: Assignment[] = [];\n            for (const card of cards) {\n                if (card.assignments) {\n                    const processed = card.assignments\n                        .map((assignment: any) => {\n                            const converted = this.convertDashboardAssignment(assignment, card);\n                            if (converted) {\n                                this.debugPanel.logDetectionEvent('Processed dashboard assignment:', {\n                                    title: converted.title,\n                                    type: converted.type,\n                                    course: converted.course\n                                });\n                            }\n                            return converted;\n                        })\n                        .filter((item: Assignment | null): item is Assignment => item !== null);\n                    assignments.push(...processed);\n                }\n            }\n\n            return assignments;\n        } catch (error) {\n            this.logger.error('Error parsing dashboard cards:', error);\n            return [];\n        }\n    }\n\n    private convertPlannerItem(item: any): Assignment | null {\n        if (!item.plannable || !item.plannable_type) return null;\n\n        const type = this.determineAssignmentType(item.plannable_type);\n        const dueDate = item.plannable_date ? new Date(item.plannable_date) : null;\n\n        if (!type || !dueDate) return null;\n\n        return {\n            id: item.plannable_id.toString(),\n            title: item.plannable?.title || item.plannable?.name || '',\n            dueDate,\n            course: item.context_name || '',\n            courseId: item.course_id?.toString(),\n            type,\n            points: item.plannable?.points_possible,\n            maxPoints: item.plannable?.points_possible,\n            completed: !!item.planner_override?.marked_complete,\n            priorityScore: 0, // Will be calculated later\n            url: item.html_url,\n            details: {\n                submissionType: item.plannable?.submission_types,\n                isCompleted: !!item.planner_override?.marked_complete,\n                isLocked: !!item.plannable?.locked_for_user,\n                description: item.plannable?.description\n            }\n        };\n    }\n\n    private convertMissingSubmission(submission: any): Assignment | null {\n        if (!submission.due_at) return null;\n\n        return {\n            id: submission.id.toString(),\n            title: submission.name || submission.assignment?.name || '',\n            dueDate: new Date(submission.due_at),\n            course: submission.course?.name || '',\n            courseId: submission.course_id?.toString(),\n            type: 'assignment',\n            points: submission.points_possible,\n            maxPoints: submission.points_possible,\n            completed: false,\n            priorityScore: 0,\n            url: submission.html_url,\n            details: {\n                isCompleted: false,\n                isLocked: false\n            }\n        };\n    }\n\n    private convertDashboardAssignment(assignment: any, card: any): Assignment | null {\n        if (!assignment.due_at) return null;\n\n        const type = this.determineAssignmentType(assignment.type);\n        \n        return {\n            id: assignment.id.toString(),\n            title: assignment.name || '',\n            dueDate: new Date(assignment.due_at),\n            course: card.shortName || '',\n            courseId: card.id?.toString(),\n            type,\n            points: assignment.points_possible,\n            maxPoints: assignment.points_possible,\n            completed: !!assignment.has_submitted_submissions,\n            priorityScore: 0,\n            url: assignment.html_url,\n            details: {\n                submissionType: assignment.submission_types,\n                isCompleted: !!assignment.has_submitted_submissions,\n                isLocked: !!assignment.locked_for_user,\n                description: assignment.description\n            }\n        };\n    }\n\n    private determineAssignmentType(type: string): AssignmentType {\n        switch (type.toLowerCase()) {\n            case 'quiz':\n            case 'quizzes/quiz':\n                return 'quiz';\n            case 'discussion_topic':\n                return 'discussion';\n            case 'announcement':\n                return 'announcement';\n            default:\n                return 'assignment';\n        }\n    }\n\n    private isValidAssignment(assignment: Assignment | null): assignment is Assignment {\n        return assignment !== null &&\n            !!assignment.title &&\n            !!assignment.dueDate &&\n            !!assignment.course;\n    }\n}","import { Logger } from './logger';\n\ninterface DateDebugInfo {\n    totalDates: number;\n    types: {\n        due: number;\n        availability: number;\n        unlock: number;\n        unknown: number;\n    };\n    detections: {\n        element: string;\n        text: string;\n        type: string;\n        date: string;\n    }[];\n}\n\nexport class DateDebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n\n    constructor() {\n        this.logger = new Logger('DateDebugPanel');\n        this.createPanel();\n    }\n\n    private createPanel(): void {\n        this.panel = document.createElement('div');\n        this.panel.id = 'date-debug-panel';\n        this.panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            left: 20px;\n            width: 300px;\n            max-height: 400px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 9999;\n            overflow-y: auto;\n            box-shadow: 0 0 10px rgba(0,0,0,0.5);\n            display: none;\n        `;\n\n        const header = document.createElement('div');\n        header.innerHTML = `\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;\">\n                <span style=\"color: #ffd700; font-weight: bold;\">📅 Date Detection Debug</span>\n                <button id=\"date-debug-close\" style=\"background: none; border: none; color: white; cursor: pointer;\">✕</button>\n            </div>\n        `;\n        this.panel.appendChild(header);\n\n        const content = document.createElement('div');\n        content.id = 'date-debug-content';\n        this.panel.appendChild(content);\n\n        document.body.appendChild(this.panel);\n\n        document.getElementById('date-debug-close')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n\n        // Add keyboard shortcut (Ctrl/Cmd + Shift + T)\n        document.addEventListener('keydown', (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            const isVisible = this.panel.style.display === 'block';\n            this.panel.style.display = isVisible ? 'none' : 'block';\n        }\n    }\n\n    public updateDebugInfo(info: DateDebugInfo): void {\n        const content = document.getElementById('date-debug-content');\n        if (!content) return;\n\n        content.innerHTML = `\n            <div class=\"date-stats\" style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${info.totalDates} date${info.totalDates !== 1 ? 's' : ''}\n                </div>\n                ${this.renderTypeDistribution(info.types)}\n            </div>\n            <div class=\"date-detections\">\n                <div style=\"color: #ffd700; margin-bottom: 8px;\">Detected Dates:</div>\n                ${this.renderDetections(info.detections)}\n            </div>\n        `;\n    }\n\n    private renderTypeDistribution(types: DateDebugInfo['types']): string {\n        const colors = {\n            due: '#ff6b6b',\n            availability: '#4CAF50',\n            unlock: '#2196F3',\n            unknown: '#9e9e9e'\n        };\n\n        return Object.entries(types)\n            .map(([type, count]) => `\n                <div style=\"margin-left: 10px; color: ${colors[type as keyof typeof colors]};\">\n                    ${type.charAt(0).toUpperCase() + type.slice(1)}: ${count}\n                </div>\n            `).join('');\n    }\n\n    private renderDetections(detections: DateDebugInfo['detections']): string {\n        return detections\n            .map(detection => `\n                <div style=\"margin: 8px 0; padding: 8px; background: rgba(255,255,255,0.1); border-radius: 4px;\">\n                    <div style=\"margin-bottom: 4px; color: #90EE90;\">\n                        ${detection.text}\n                    </div>\n                    <div style=\"font-size: 11px; color: #ADD8E6;\">\n                        Type: ${detection.type}\n                    </div>\n                    <div style=\"font-size: 11px; color: #DDA0DD;\">\n                        Parsed: ${detection.date}\n                    </div>\n                    <div style=\"font-size: 11px; color: #FFB6C1;\">\n                        Element: ${detection.element}\n                    </div>\n                </div>\n            `).join('');\n    }\n\n    public logDateDetection(message: string, data?: any): void {\n        this.logger.debug(message, data);\n    }\n}","import { Assignment } from '../types/models';\nimport { Logger } from './logger';\nimport { PerformanceMonitor } from './performanceMonitor';\n\nexport class DebugPanel {\n    private panel: HTMLElement | null = null;\n    private logger: Logger;\n    private performanceMonitor: PerformanceMonitor;\n    private isVisible: boolean = false;\n\n    constructor() {\n        this.logger = new Logger('DebugPanel');\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n        this.createPanel();\n        this.initializeKeyboardShortcut();\n    }\n\n    private createPanel(): void {\n        this.panel = document.createElement('div');\n        this.panel.id = 'canvaspal-debug-panel';\n        this.panel.innerHTML = `\n            <div class=\"debug-panel-header\">\n                <span>🔍 CanvasPal Debug</span>\n                <div class=\"debug-panel-controls\">\n                    <button id=\"clear-metrics\" title=\"Clear Performance Metrics\">🗑️</button>\n                    <button id=\"canvaspal-debug-close\">✕</button>\n                </div>\n            </div>\n            <div class=\"debug-panel-content\">\n                <div id=\"performance-metrics\"></div>\n                <div id=\"assignment-info\"></div>\n            </div>\n        `;\n\n        // Apply styles\n        this.panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            width: 350px;\n            max-height: 500px;\n            background: rgba(0, 0, 0, 0.9);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            font-size: 12px;\n            z-index: 9999;\n            overflow-y: auto;\n            box-shadow: 0 0 10px rgba(0,0,0,0.5);\n            display: none;\n        `;\n\n        // Add button styles\n        const style = document.createElement('style');\n        style.textContent = `\n            .debug-panel-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 10px;\n                padding-bottom: 10px;\n                border-bottom: 1px solid rgba(255,255,255,0.1);\n            }\n\n            .debug-panel-controls {\n                display: flex;\n                gap: 8px;\n            }\n\n            .debug-panel-controls button {\n                background: none;\n                border: none;\n                color: white;\n                cursor: pointer;\n                padding: 4px;\n                border-radius: 4px;\n                transition: background 0.2s;\n            }\n\n            .debug-panel-controls button:hover {\n                background: rgba(255,255,255,0.1);\n            }\n\n            .performance-section {\n                margin: 10px 0;\n                padding: 8px;\n                background: rgba(255,255,255,0.05);\n                border-radius: 4px;\n            }\n\n            .metric-item {\n                margin: 4px 0;\n                display: flex;\n                justify-content: space-between;\n            }\n\n            .metric-value {\n                color: #90EE90;\n            }\n\n            .slow-metric {\n                color: #ff6b6b;\n            }\n\n            .normal-metric {\n                color: #ffd700;\n            }\n\n            .fast-metric {\n                color: #90EE90;\n            }\n        `;\n        document.head.appendChild(style);\n\n        document.body.appendChild(this.panel);\n\n        // Add event listeners\n        document.getElementById('canvaspal-debug-close')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n\n        document.getElementById('clear-metrics')?.addEventListener('click', () => {\n            this.performanceMonitor.clear();\n            this.updatePerformanceMetrics();\n        });\n    }\n\n    private initializeKeyboardShortcut(): void {\n        document.addEventListener('keydown', (e) => {\n            // Ctrl/Cmd + Shift + D to toggle debug panel\n            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'D') {\n                e.preventDefault();\n                this.toggleVisibility();\n            }\n        });\n    }\n\n    public toggleVisibility(): void {\n        if (this.panel) {\n            this.isVisible = !this.isVisible;\n            this.panel.style.display = this.isVisible ? 'block' : 'none';\n            this.logger.debug(`Debug panel ${this.isVisible ? 'shown' : 'hidden'}`);\n        }\n    }\n\n    private updatePerformanceMetrics(): void {\n        const metricsContainer = document.getElementById('performance-metrics');\n        if (!metricsContainer) return;\n\n        const report = this.performanceMonitor.getReport();\n        \n        metricsContainer.innerHTML = `\n            <div class=\"performance-section\">\n                <h3>Performance Summary</h3>\n                <div class=\"metric-item\">\n                    <span>Total Duration:</span>\n                    <span class=\"metric-value\">${report.summary.totalDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Average Duration:</span>\n                    <span class=\"metric-value\">${report.summary.averageDuration.toFixed(2)}ms</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Slowest Operation:</span>\n                    <span class=\"slow-metric\">${report.summary.slowestOperation.name} (${report.summary.slowestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n                <div class=\"metric-item\">\n                    <span>Fastest Operation:</span>\n                    <span class=\"fast-metric\">${report.summary.fastestOperation.name} (${report.summary.fastestOperation.duration.toFixed(2)}ms)</span>\n                </div>\n            </div>\n            <div class=\"performance-section\">\n                <h3>Recent Operations</h3>\n                ${report.metrics.slice(-5).map(metric => `\n                    <div class=\"metric-item\">\n                        <span>${metric.name}</span>\n                        <span class=\"${this.getMetricSpeedClass(metric.duration || 0)}\">${metric.duration?.toFixed(2)}ms</span>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private getMetricSpeedClass(duration: number): string {\n        if (duration > 100) return 'slow-metric';\n        if (duration > 50) return 'normal-metric';\n        return 'fast-metric';\n    }\n\n    public updateAssignmentInfo(assignments: Assignment[]): void {\n        const container = document.getElementById('assignment-info');\n        if (!container) return;\n\n        const typeCounts = this.getAssignmentTypeCounts(assignments);\n        const priorityRanges = this.getPriorityRanges(assignments);\n\n        container.innerHTML = `\n            <div style=\"margin-bottom: 15px;\">\n                <div style=\"color: #0066cc; margin-bottom: 8px;\">\n                    Found ${assignments.length} assignments\n                </div>\n                ${this.renderTypeCounts(typeCounts)}\n                ${this.renderPriorityDistribution(priorityRanges)}\n            </div>\n            ${this.renderAssignmentList(assignments)}\n        `;\n\n        // Update performance metrics\n        this.updatePerformanceMetrics();\n    }\n\n    private getAssignmentTypeCounts(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            acc[assignment.type] = (acc[assignment.type] || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private getPriorityRanges(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((acc, assignment) => {\n            if (assignment.priorityScore >= 0.7) acc.high = (acc.high || 0) + 1;\n            else if (assignment.priorityScore >= 0.4) acc.medium = (acc.medium || 0) + 1;\n            else acc.low = (acc.low || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n    }\n\n    private renderTypeCounts(counts: Record<string, number>): string {\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Assignment Types:</div>\n                ${Object.entries(counts).map(([type, count]) => `\n                    <div style=\"margin-left: 10px; color: #90EE90;\">\n                        ${type}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderPriorityDistribution(ranges: Record<string, number>): string {\n        const colors = {\n            high: '#ff6b6b',\n            medium: '#ffd700',\n            low: '#90EE90'\n        };\n\n        return `\n            <div style=\"margin-bottom: 10px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Priority Distribution:</div>\n                ${Object.entries(ranges).map(([range, count]) => `\n                    <div style=\"margin-left: 10px; color: ${colors[range as keyof typeof colors]};\">\n                        ${range}: ${count}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentList(assignments: Assignment[]): string {\n        return `\n            <div style=\"margin-top: 15px;\">\n                <div style=\"color: #ffd700; margin-bottom: 5px;\">Detailed Assignments:</div>\n                ${assignments.map(assignment => this.renderAssignmentDetail(assignment)).join('')}\n            </div>\n        `;\n    }\n\n    private renderAssignmentDetail(assignment: Assignment): string {\n        const priorityColor = assignment.priorityScore >= 0.7 ? '#ff6b6b' :\n                            assignment.priorityScore >= 0.4 ? '#ffd700' : '#90EE90';\n\n        return `\n            <div style=\"margin: 8px 0; padding: 8px; border-left: 2px solid ${priorityColor}; background: rgba(255,255,255,0.1);\">\n                <div style=\"margin-bottom: 4px;\">📚 ${assignment.title}</div>\n                <div style=\"color: #90EE90; margin-bottom: 4px;\">\n                    ${assignment.points ? `📝 ${assignment.points}/${assignment.maxPoints} points` : 'No points data'}\n                </div>\n                <div style=\"color: #ADD8E6; font-size: 11px;\">\n                    ⏰ Due: ${assignment.dueDate.toLocaleDateString()}\n                </div>\n                <div style=\"color: #DDA0DD; font-size: 11px;\">\n                    📚 Course: ${assignment.course}\n                </div>\n                <div style=\"color: ${priorityColor}; font-size: 11px; margin-top: 4px;\">\n                    ⚡ Priority: ${Math.round(assignment.priorityScore * 100)}%\n                </div>\n            </div>\n        `;\n    }\n\n    public logDetectionEvent(message: string, data?: any): void {\n        this.logger.debug(message, data);\n        // Could add visual indication of new events in the panel\n    }\n\n    public updatePerformanceAnalysis(analysis: any): void {\n        // Implementation\n    }\n}","import { Logger } from './logger';\nimport { DateDebugPanel } from './dateDebugPanel';\n\ninterface DateMatch {\n    element: HTMLElement;\n    date: Date;\n    type: 'due' | 'availability' | 'unlock' | 'unknown';\n    text: string;\n}\n\nexport class DateDebugger {\n    private logger: Logger;\n    private debugPanel: DateDebugPanel;\n    private static readonly DATE_DEBUG_STYLES = `\n        .debug-date {\n            background-color: rgba(255, 255, 0, 0.3) !important;\n            border: 2px solid #ffd700 !important;\n            position: relative !important;\n            z-index: 1000;\n            padding: 2px !important;\n            margin: 2px !important;\n            border-radius: 3px !important;\n            display: inline-block !important;\n        }\n\n        .debug-date::after {\n            content: attr(data-debug-type);\n            position: absolute;\n            top: -20px;\n            left: 0;\n            background: #ffd700;\n            color: black;\n            font-size: 10px;\n            padding: 2px 4px;\n            border-radius: 2px;\n            z-index: 1001;\n            pointer-events: none;\n            white-space: nowrap;\n        }\n\n        .debug-date[data-debug-type=\"DUE DATE\"] {\n            border-color: #ff6b6b !important;\n        }\n\n        .debug-date[data-debug-type=\"DUE DATE\"]::after {\n            background: #ff6b6b;\n            color: white;\n        }\n\n        .debug-date[data-debug-type=\"AVAILABILITY\"] {\n            border-color: #4CAF50 !important;\n        }\n\n        .debug-date[data-debug-type=\"AVAILABILITY\"]::after {\n            background: #4CAF50;\n            color: white;\n        }\n\n        .debug-date[data-debug-type=\"UNLOCK\"] {\n            border-color: #2196F3 !important;\n        }\n\n        .debug-date[data-debug-type=\"UNLOCK\"]::after {\n            background: #2196F3;\n            color: white;\n        }\n    `;\n\n    constructor() {\n        this.logger = new Logger('DateDebugger');\n        this.debugPanel = new DateDebugPanel();\n        this.injectDebugStyles();\n    }\n\n    private injectDebugStyles(): void {\n        const styleElement = document.createElement('style');\n        styleElement.textContent = DateDebugger.DATE_DEBUG_STYLES;\n        document.head.appendChild(styleElement);\n    }\n\n    public highlightDates(): DateMatch[] {\n        const dateMatches: DateMatch[] = [];\n        \n        // Common date-containing elements\n        const dateElements = document.querySelectorAll<HTMLElement>(\n            '[class*=\"date\"], [class*=\"due\"], [class*=\"deadline\"], ' +\n            '[aria-label*=\"due\"], [title*=\"due\"], ' +\n            '[data-date], [datetime]'\n        );\n\n        dateElements.forEach(element => {\n            const match = this.processDateElement(element);\n            if (match) {\n                dateMatches.push(match);\n                this.applyDebugHighlight(match);\n            }\n        });\n\n        // Look for dates in text content\n        const textMatches = this.findDatesInTextNodes();\n        dateMatches.push(...textMatches);\n\n        // Update debug panel with results\n        this.updateDebugPanel(dateMatches);\n\n        this.logger.debug('Found dates:', dateMatches);\n        return dateMatches;\n    }\n\n    private findDatesInTextNodes(): DateMatch[] {\n        const matches: DateMatch[] = [];\n        const walker = document.createTreeWalker(\n            document.body,\n            NodeFilter.SHOW_TEXT,\n            {\n                acceptNode: (node) => {\n                    if (node.parentElement?.closest('.debug-date')) {\n                        return NodeFilter.FILTER_REJECT;\n                    }\n                    const hasDate = this.containsDatePattern(node.textContent || '');\n                    return hasDate ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n                }\n            }\n        );\n\n        let node: Text | null;\n        while (node = walker.nextNode() as Text) {\n            const textMatches = this.findDatesInText(node);\n            textMatches.forEach(match => {\n                matches.push(match);\n                this.applyDebugHighlight(match);\n            });\n        }\n\n        return matches;\n    }\n\n    private updateDebugPanel(matches: DateMatch[]): void {\n        const types = {\n            due: 0,\n            availability: 0,\n            unlock: 0,\n            unknown: 0\n        };\n\n        matches.forEach(match => {\n            types[match.type]++;\n        });\n\n        const debugInfo = {\n            totalDates: matches.length,\n            types,\n            detections: matches.map(match => ({\n                element: this.getElementDescription(match.element),\n                text: match.text,\n                type: this.getDebugLabel(match.type),\n                date: match.date.toLocaleString()\n            }))\n        };\n\n        this.debugPanel.updateDebugInfo(debugInfo);\n    }\n\n    private getElementDescription(element: HTMLElement): string {\n        const tagName = element.tagName.toLowerCase();\n        const id = element.id ? `#${element.id}` : '';\n        const classes = Array.from(element.classList)\n            .filter(cls => !cls.includes('debug-date'))\n            .map(cls => `.${cls}`)\n            .join('');\n        \n        return `${tagName}${id}${classes}`;\n    }\n\n    private processDateElement(element: HTMLElement): DateMatch | null {\n        const dateStr = element.getAttribute('data-date') ||\n                       element.getAttribute('datetime') ||\n                       element.getAttribute('title') ||\n                       element.getAttribute('aria-label') ||\n                       element.textContent;\n\n        if (!dateStr) return null;\n\n        const date = this.parseDate(dateStr);\n        if (!date) return null;\n\n        const type = this.determineDateType(element, dateStr);\n        \n        return {\n            element,\n            date,\n            type,\n            text: dateStr\n        };\n    }\n\n    private findDatesInText(node: Text): DateMatch[] {\n        const matches: DateMatch[] = [];\n        const text = node.textContent || '';\n        \n        // Common date patterns\n        const datePatterns = [\n            // ISO format\n            /\\d{4}-\\d{2}-\\d{2}/g,\n            // MM/DD/YYYY or DD/MM/YYYY\n            /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/g,\n            // Month DD, YYYY\n            /(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* \\d{1,2},? \\d{4}/gi,\n            // Tomorrow, Today, etc.\n            /\\b(?:today|tomorrow|yesterday)\\b/gi,\n            // Next/Last Day\n            /(?:next|last) (?:monday|tuesday|wednesday|thursday|friday|saturday|sunday)\\b/gi\n        ];\n\n        datePatterns.forEach(pattern => {\n            const regex = new RegExp(pattern);\n            let match;\n            while ((match = regex.exec(text)) !== null) {\n                const date = this.parseDate(match[0]);\n                if (date) {\n                    // Create a new span element to wrap the date text\n                    const span = document.createElement('span');\n                    node.splitText(match.index);\n                    const dateNode = node.splitText(match[0].length);\n                    span.textContent = match[0];\n                    node.parentNode?.replaceChild(span, node);\n\n                    matches.push({\n                        element: span,\n                        date,\n                        type: this.determineDateType(span, match[0]),\n                        text: match[0]\n                    });\n                }\n            }\n        });\n\n        return matches;\n    }\n\n    private parseDate(dateStr: string): Date | null {\n        try {\n            const normalized = dateStr.toLowerCase();\n            \n            // Handle relative dates\n            if (normalized.includes('today')) {\n                return new Date();\n            } else if (normalized.includes('tomorrow')) {\n                const tomorrow = new Date();\n                tomorrow.setDate(tomorrow.getDate() + 1);\n                return tomorrow;\n            } else if (normalized.includes('yesterday')) {\n                const yesterday = new Date();\n                yesterday.setDate(yesterday.getDate() - 1);\n                return yesterday;\n            }\n\n            // Try parsing as ISO date first\n            const date = new Date(dateStr);\n            if (!isNaN(date.getTime())) {\n                return date;\n            }\n\n            // Try other common formats\n            const formats = [\n                // Add more date formats as needed\n                /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/,\n                /(\\w+) (\\d{1,2}),? (\\d{4})/\n            ];\n\n            for (const format of formats) {\n                const match = dateStr.match(format);\n                if (match) {\n                    const parsed = new Date(dateStr);\n                    if (!isNaN(parsed.getTime())) {\n                        return parsed;\n                    }\n                }\n            }\n        } catch (error) {\n            this.logger.debug('Date parsing failed:', { dateStr, error });\n        }\n        return null;\n    }\n\n    private determineDateType(element: HTMLElement, text: string): DateMatch['type'] {\n        const context = (element.textContent + ' ' +\n                        (element.getAttribute('aria-label') || '') + ' ' +\n                        (element.getAttribute('title') || '')).toLowerCase();\n\n        if (context.includes('due') || context.includes('deadline')) {\n            return 'due';\n        } else if (context.includes('available') || context.includes('opens')) {\n            return 'availability';\n        } else if (context.includes('unlock') || context.includes('start')) {\n            return 'unlock';\n        }\n        return 'unknown';\n    }\n\n    private applyDebugHighlight(match: DateMatch): void {\n        const element = match.element;\n        element.classList.add('debug-date');\n        element.setAttribute('data-debug-type', this.getDebugLabel(match.type));\n        element.setAttribute('title', `Detected ${match.type} date: ${match.date.toLocaleDateString()}`);\n    }\n\n    private getDebugLabel(type: DateMatch['type']): string {\n        switch (type) {\n            case 'due': return 'DUE DATE';\n            case 'availability': return 'AVAILABILITY';\n            case 'unlock': return 'UNLOCK';\n            default: return 'DATE';\n        }\n    }\n\n    private containsDatePattern(text: string | null): boolean {\n        if (!text) return false;\n        return /\\d{4}-\\d{2}-\\d{2}|\\d{1,2}\\/\\d{1,2}\\/\\d{4}|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* \\d{1,2},? \\d{4}|\\b(?:today|tomorrow|yesterday)\\b|(?:next|last) (?:monday|tuesday|wednesday|thursday|friday|saturday|sunday)\\b/i.test(text);\n    }\n}","import * as ICAL from 'ical.js';\nimport type { CalendarEvent } from '../types/models';\n\nexport const parseICalFeed = (icalData: string): CalendarEvent[] => {\n  const jCalData = ICAL.parse(icalData);\n  const comp = new ICAL.Component(jCalData);\n  const vevents = comp.getAllSubcomponents('vevent');\n  \n  return vevents.map(vevent => {\n    const event = new ICAL.Event(vevent);\n    return {\n      title: event.summary,\n      dueDate: event.startDate.toJSDate(),\n      courseId: event.uid.split('_')[0],\n      assignmentId: event.uid.split('_')[1]\n    };\n  });\n};\n\nexport type { CalendarEvent };\n","import { Assignment, PriorityWeights } from '../types/models';\nimport { Logger } from './logger';\nimport { DebugPanel } from './debugPanel';\nimport { PerformanceMonitor } from './performanceMonitor';\n\nexport class PriorityCalculator {\n    private readonly PRIORITY_WEIGHTS: PriorityWeights = {\n        GRADE_IMPACT: 0.4,\n        COURSE_GRADE: 0.3,\n        DUE_DATE: 0.3\n    };\n\n    private logger: Logger;\n    private debugPanel: DebugPanel;\n    private performanceMonitor: PerformanceMonitor;\n\n    constructor() {\n        this.logger = new Logger('PriorityCalculator');\n        this.debugPanel = new DebugPanel();\n        this.performanceMonitor = PerformanceMonitor.getInstance();\n    }\n\n    public calculatePriority(assignment: Assignment): number {\n        return this.performanceMonitor.monitor('calculatePriority', () => {\n            try {\n                const metrics = {\n                    daysUntilDue: this.performanceMonitor.monitor('calculateDaysUntilDue', \n                        () => this.calculateDaysUntilDue(assignment.dueDate)),\n                    gradeImpact: this.performanceMonitor.monitor('calculateGradeImpact', \n                        () => this.calculateGradeImpact(assignment)),\n                    courseGradeImpact: this.performanceMonitor.monitor('calculateCourseGradeImpact', \n                        () => this.calculateCourseGradeImpact(assignment)),\n                    typeWeight: this.performanceMonitor.monitor('getTypeWeight', \n                        () => this.getTypeWeight(assignment.type))\n                };\n\n                // Calculate individual components\n                const components = this.performanceMonitor.monitor('calculateComponents', () => ({\n                    gradeComponent: metrics.gradeImpact * this.PRIORITY_WEIGHTS.GRADE_IMPACT,\n                    courseComponent: metrics.courseGradeImpact * this.PRIORITY_WEIGHTS.COURSE_GRADE,\n                    dateComponent: this.calculateDueDatePriority(metrics.daysUntilDue) * this.PRIORITY_WEIGHTS.DUE_DATE\n                }));\n\n                // Calculate final priority\n                const finalPriority = this.performanceMonitor.monitor('calculateFinalPriority', () => {\n                    const basePriority = components.gradeComponent + components.courseComponent + components.dateComponent;\n                    return Math.min(Math.max(basePriority * metrics.typeWeight, 0), 1);\n                });\n\n                // Log calculation details to debug panel\n                this.debugPanel.logDetectionEvent('Priority calculation:', {\n                    assignment: assignment.title,\n                    components,\n                    metrics,\n                    finalPriority,\n                    performance: this.performanceMonitor.getReport()\n                });\n\n                return finalPriority;\n            } catch (error) {\n                this.logger.error('Error calculating priority:', error);\n                return 0;\n            }\n        }, { assignmentTitle: assignment.title });\n    }\n\n    private calculateDaysUntilDue(dueDate: Date): number {\n        const now = new Date();\n        const diffTime = dueDate.getTime() - now.getTime();\n        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    }\n\n    private calculateDueDatePriority(daysUntilDue: number): number {\n        if (daysUntilDue <= 0) return 1; // Overdue assignments get highest priority\n        if (daysUntilDue >= 14) return 0.2; // Far future assignments get low priority\n        return 1 - (daysUntilDue / 14); // Linear decrease in priority over 14 days\n    }\n\n    private calculateGradeImpact(assignment: Assignment): number {\n        if (!assignment.points || !assignment.maxPoints) return 0.5; // Default impact if no points info\n        return Math.min(assignment.points / 100, 1); // Normalize to 0-1 range\n    }\n\n    private calculateCourseGradeImpact(assignment: Assignment): number {\n        if (!assignment.courseGrade) return 0.85; // Default if no course grade available\n        return 1 - assignment.courseGrade; // Lower grades mean higher priority\n    }\n\n    private getTypeWeight(type: Assignment['type']): number {\n        switch (type) {\n            case 'quiz':\n                return 1.2; // Quizzes get 20% boost\n            case 'assignment':\n                return 1.0; // Standard weight\n            case 'discussion':\n                return 0.8; // Discussions slightly lower\n            case 'announcement':\n                return 0.5; // Announcements lowest priority\n            default:\n                return 1.0;\n        }\n    }\n\n    public setPriorityWeights(weights: Partial<PriorityWeights>): void {\n        const totalWeight = (weights.GRADE_IMPACT || this.PRIORITY_WEIGHTS.GRADE_IMPACT) +\n                          (weights.COURSE_GRADE || this.PRIORITY_WEIGHTS.COURSE_GRADE) +\n                          (weights.DUE_DATE || this.PRIORITY_WEIGHTS.DUE_DATE);\n\n        if (Math.abs(totalWeight - 1) > 0.001) {\n            this.logger.warn('Priority weights do not sum to 1. Using default weights.');\n            return;\n        }\n\n        Object.assign(this.PRIORITY_WEIGHTS, weights);\n        this.logger.info('Priority weights updated:', this.PRIORITY_WEIGHTS);\n        this.debugPanel.logDetectionEvent('Priority weights updated:', this.PRIORITY_WEIGHTS);\n    }\n}\n","import type { CalendarEvent, PrioritySettings, GradeData, Assignment } from '../types/models';\nimport { parseICalFeed } from '../utils/calendar';\nimport { calculatePriority } from '../utils/priorities';\nimport { logger, LogLevel, Logger } from '../utils/logger';\nimport { AssignmentDetector } from '../utils/assignmentDetector';\nimport { PriorityCalculator } from '../utils/priorityCalculator';\n\nimport { Settings } from '../types/models';\n\ninterface ICalEvent extends CalendarEvent {\n    gradeWeight?: number;\n    pointsPossible?: number;\n    currentScore?: number;\n}\n\nclass BackgroundService {\n    private static readonly SYNC_INTERVAL = 30 * 60 * 1000;\n    private static readonly RETRY_INTERVAL = 5 * 60 * 1000;\n    private gradeData: { [courseId: string]: GradeData } = {};\n    private lastSyncTime = 0;\n    private syncIntervalId?: number;\n    private retryTimeoutId?: number;\n    private settings: Settings;\n    private assignments: Assignment[] = [];\n    private detector: AssignmentDetector;\n    private priorityCalculator: PriorityCalculator;\n    private logger: Logger;\n\n    constructor() {\n        this.settings = {\n            priorityWeights: {\n                GRADE_IMPACT: 0.4,\n                COURSE_GRADE: 0.3,\n                DUE_DATE: 0.3\n            },\n            typeWeights: {\n                quiz: 1.2,\n                assignment: 1.0,\n                discussion: 0.8,\n                announcement: 0.5\n            },\n            displayOptions: {\n                showCourseNames: true,\n                showGradeImpact: true,\n                showPriorityScores: true,\n                highlightOverdue: true\n            },\n            refreshInterval: 30,\n            debugSettings: {\n                enabled: false,\n                logLevel: 'info',\n                showDateDebug: false,\n                showAssignmentDebug: false,\n                showPriorityDebug: false\n            },\n            icalUrl: ''\n        };\n        this.detector = new AssignmentDetector();\n        this.priorityCalculator = new PriorityCalculator();\n        this.logger = new Logger('BackgroundService');\n        this.initialize();\n        this.initializeMessageHandlers();\n        this.setupAutoRefresh();\n    }\n\n    public async initialize(): Promise<void> {\n        // Load settings from sync storage\n        const { settings } = await chrome.storage.sync.get('settings');\n        if (settings) {\n            this.settings = settings;\n        } else {\n            // Initialize default settings if none exist\n            await chrome.storage.sync.set({ settings: this.settings });\n        }\n\n        // Set up message listeners\n        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n            switch (message.type) {\n                case 'SETTINGS_UPDATED':\n                    this.settings = message.settings;\n                    void this.performSync();\n                    break;\n                case 'GET_ASSIGNMENTS':\n                    void this.fetchAndProcessAssignments()\n                        .then(sendResponse)\n                        .catch(error => sendResponse({ error: error.message }));\n                    return true;\n            }\n        });\n\n        this.startPeriodicSync();\n    }\n\n    private initializeMessageHandlers(): void {\n        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n            if (message.type === 'GRADE_DATA') {\n                this.handleGradeData(message.data);\n                sendResponse({ success: true });\n                return true;\n            }\n            this.handleMessage(message, sender, sendResponse);\n            return true; // Keep the message channel open for async response\n        });\n    }\n\n    private async handleMessage(\n        message: any, \n        sender: chrome.runtime.MessageSender, \n        sendResponse: (response?: any) => void\n    ): Promise<void> {\n        try {\n            switch (message.type) {\n                case 'GET_ASSIGNMENTS':\n                    const assignments = await this.getAssignments();\n                    sendResponse({ assignments });\n                    break;\n\n                case 'UPDATE_ASSIGNMENT_COMPLETION':\n                    await this.updateAssignmentCompletion(\n                        message.assignmentId,\n                        message.completed\n                    );\n                    sendResponse({ success: true });\n                    break;\n\n                case 'REFRESH_ASSIGNMENTS':\n                    await this.refreshAssignments();\n                    sendResponse({ success: true });\n                    break;\n\n                default:\n                    this.logger.warn('Unknown message type:', message);\n                    sendResponse({ error: 'Unknown message type' });\n            }\n        } catch (error) {\n            this.logger.error('Error handling message:', error);\n            sendResponse({ error: 'Internal error' });\n        }\n    }\n\n    private async getAssignments(): Promise<Assignment[]> {\n        if (this.assignments.length === 0) {\n            await this.refreshAssignments();\n        }\n        return this.assignments;\n    }\n\n    public async refreshAssignments(): Promise<void> {\n        try {\n            // Get assignments from detector\n            const newAssignments = await this.detector.detectAssignments();\n\n            // Calculate priorities for each assignment\n            newAssignments.forEach(assignment => {\n                assignment.priorityScore = this.priorityCalculator.calculatePriority(assignment);\n            });\n\n            // Sort by priority\n            newAssignments.sort((a, b) => b.priorityScore - a.priorityScore);\n\n            // Update stored assignments\n            this.assignments = newAssignments;\n\n            // Notify any open popups\n            this.notifyPopups();\n\n            this.logger.info('Assignments refreshed:', {\n                count: newAssignments.length,\n                types: this.getAssignmentTypeCounts(newAssignments)\n            });\n        } catch (error) {\n            this.logger.error('Error refreshing assignments:', error);\n            throw error;\n        }\n    }\n\n    public async updateAssignmentCompletion(\n        assignmentId: string,\n        completed: boolean\n    ): Promise<void> {\n        const assignment = this.assignments.find(a => a.id === assignmentId);\n        if (assignment) {\n            assignment.completed = completed;\n            await this.saveAssignments();\n            this.notifyPopups();\n        }\n    }\n\n    private async saveAssignments(): Promise<void> {\n        try {\n            await chrome.storage.local.set({ \n                assignments: this.assignments,\n                lastUpdated: new Date().toISOString()\n            });\n        } catch (error) {\n            this.logger.error('Error saving assignments:', error);\n            throw error;\n        }\n    }\n\n    private notifyPopups(): void {\n        chrome.runtime.sendMessage({ \n            type: 'ASSIGNMENTS_UPDATED',\n            assignments: this.assignments\n        }).catch(error => {\n            // Ignore errors - popups might not be open\n            this.logger.debug('No popups to notify:', error);\n        });\n    }\n\n    private setupAutoRefresh(): void {\n        // Refresh every 30 minutes\n        chrome.alarms.create('refreshAssignments', { periodInMinutes: 30 });\n        \n        chrome.alarms.onAlarm.addListener(async (alarm) => {\n            if (alarm.name === 'refreshAssignments') {\n                await this.refreshAssignments();\n            }\n        });\n    }\n\n    private getAssignmentTypeCounts(assignments: Assignment[]): Record<string, number> {\n        return assignments.reduce((counts, assignment) => {\n            counts[assignment.type] = (counts[assignment.type] || 0) + 1;\n            return counts;\n        }, {} as Record<string, number>);\n    }\n\n    private async fetchCalendarData(url: string): Promise<CalendarEvent[]> {\n        const response = await fetch(url);\n        const icalData = await response.text();\n        return parseICalFeed(icalData);\n    }\n\n    private handleGradeData(data: GradeData): void {\n        try {\n            this.logger.info('Received grade data:', data);\n            this.gradeData[data.courseName] = data;\n            chrome.storage.local.set({ \n                [`grades_${data.courseName}`]: data,\n                lastUpdated: new Date().toISOString()\n            });\n        } catch (error) {\n            this.logger.error('Error handling grade data:', error);\n        }\n    }\n\n    private startPeriodicSync(): void {\n        if (this.syncIntervalId) {\n            window.clearInterval(this.syncIntervalId);\n            this.syncIntervalId = undefined;\n        }\n        if (this.retryTimeoutId) {\n            window.clearTimeout(this.retryTimeoutId);\n            this.retryTimeoutId = undefined;\n        }\n\n        void this.performSync();\n        const intervalId = window.setInterval(\n            () => { void this.performSync(); },\n            BackgroundService.SYNC_INTERVAL\n        );\n        this.syncIntervalId = intervalId;\n    }\n\n    public async performSync(): Promise<void> {\n        try {\n            const now = Date.now();\n            if (now - this.lastSyncTime < 60000) {\n                return;\n            }\n\n            await this.fetchAndProcessAssignments();\n            this.lastSyncTime = now;\n            await this.logger.info('Sync completed successfully');\n            chrome.runtime.sendMessage({ type: \"syncComplete\", timestamp: now });\n        } catch (error) {\n            await this.logger.error('Sync failed', error);\n            console.error(\"Sync failed:\", error);\n            const timeoutId = window.setTimeout(() => {\n                void this.performSync();\n            }, BackgroundService.RETRY_INTERVAL);\n            this.retryTimeoutId = timeoutId;\n            chrome.runtime.sendMessage({ \n                type: \"syncError\", \n                error: error instanceof Error ? error.message : \"Unknown error\"\n            });\n        }\n    }\n\n    private async fetchAndProcessAssignments(): Promise<ICalEvent[]> {\n        if (!this.settings.icalUrl) {\n            throw new Error(\"iCalendar URL not set\");\n        }\n\n        try {\n            const response = await fetch(this.settings.icalUrl);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch iCal feed: ${response.statusText}`);\n            }\n            const icalData = await response.text();\n            const assignments = this.parseICalData(icalData);\n            return this.enrichAssignmentsWithGrades(assignments);\n        } catch (error) {\n            console.error(\"Failed to fetch or parse iCal data:\", error);\n            throw new Error(\"Failed to fetch assignments\");\n        }\n    }\n\n    private enrichAssignmentsWithGrades(assignments: ICalEvent[]): ICalEvent[] {\n        return assignments.map(assignment => ({\n            ...assignment,\n            ...this.findGradeInfo(assignment)\n        }));\n    }\n\n    private findGradeInfo(assignment: CalendarEvent): Partial<ICalEvent> {\n        const courseData = this.gradeData[assignment.courseId];\n        if (!courseData) return {};\n\n        const gradeInfo = courseData.assignments.find((a: { name: string }) => \n            a.name.toLowerCase() === assignment.title.toLowerCase()\n        );\n\n        if (!gradeInfo) return {};\n\n        return {\n            gradeWeight: gradeInfo.weight,\n            pointsPossible: gradeInfo.pointsPossible,\n            currentScore: gradeInfo.points\n        };\n    }\n\n    private parseICalData(icalData: string): ICalEvent[] {\n        return parseICalFeed(icalData).map(event => ({\n            ...event,\n            courseId: this.extractCourseId(event.courseId)\n        }));\n    }\n\n    private extractCourseId(description: string): string {\n        const courseMatch = description.match(/Course: (.*?)(?:\\n|$)/);\n        return courseMatch ? courseMatch[1] : \"Unknown Course\";\n    }\n}\n\n// Create and export a singleton instance\nexport const backgroundService = new BackgroundService();\n\n// Initialize background service and set up listeners\nbackgroundService.initialize().then(() => {\n    // Set up alarm listener for periodic sync\n    chrome.alarms.create('sync', { periodInMinutes: 30 });\n    chrome.alarms.onAlarm.addListener((alarm) => {\n        if (alarm.name === 'sync') {\n            void backgroundService.performSync();\n        }\n    });\n\n    // Add keyboard command listener\n    chrome.commands.onCommand.addListener((command) => {\n        if (command === 'refresh-assignments') {\n            void backgroundService.performSync();\n        }\n    });\n});\n","import { Logger } from './logger';\n\ninterface PerformanceMetric {\n    name: string;\n    startTime: number;\n    endTime?: number;\n    duration?: number;\n    metadata?: Record<string, any>;\n}\n\ninterface PerformanceReport {\n    metrics: PerformanceMetric[];\n    summary: {\n        totalDuration: number;\n        averageDuration: number;\n        slowestOperation: {\n            name: string;\n            duration: number;\n        };\n        fastestOperation: {\n            name: string;\n            duration: number;\n        };\n    };\n}\n\nexport class PerformanceMonitor {\n    private metrics: PerformanceMetric[] = [];\n    private logger: Logger;\n    private static instance: PerformanceMonitor;\n\n    private constructor() {\n        this.logger = new Logger('PerformanceMonitor');\n    }\n\n    public static getInstance(): PerformanceMonitor {\n        if (!PerformanceMonitor.instance) {\n            PerformanceMonitor.instance = new PerformanceMonitor();\n        }\n        return PerformanceMonitor.instance;\n    }\n\n    public startMetric(name: string, metadata?: Record<string, any>): string {\n        const id = `${name}_${Date.now()}`;\n        this.metrics.push({\n            name,\n            startTime: performance.now(),\n            metadata\n        });\n        return id;\n    }\n\n    public endMetric(name: string): void {\n        const metric = this.metrics.find(m => m.name === name && !m.endTime);\n        if (metric) {\n            metric.endTime = performance.now();\n            metric.duration = metric.endTime - metric.startTime;\n            this.logger.debug(`Performance metric - ${name}:`, {\n                duration: `${metric.duration.toFixed(2)}ms`,\n                metadata: metric.metadata\n            });\n        }\n    }\n\n    public getReport(): PerformanceReport {\n        const completedMetrics = this.metrics.filter(m => m.duration !== undefined);\n        \n        if (completedMetrics.length === 0) {\n            return {\n                metrics: [],\n                summary: {\n                    totalDuration: 0,\n                    averageDuration: 0,\n                    slowestOperation: { name: 'none', duration: 0 },\n                    fastestOperation: { name: 'none', duration: 0 }\n                }\n            };\n        }\n\n        const totalDuration = completedMetrics.reduce((sum, m) => sum + (m.duration || 0), 0);\n        const averageDuration = totalDuration / completedMetrics.length;\n\n        const sorted = [...completedMetrics].sort((a, b) => \n            (b.duration || 0) - (a.duration || 0));\n\n        return {\n            metrics: completedMetrics,\n            summary: {\n                totalDuration,\n                averageDuration,\n                slowestOperation: {\n                    name: sorted[0].name,\n                    duration: sorted[0].duration || 0\n                },\n                fastestOperation: {\n                    name: sorted[sorted.length - 1].name,\n                    duration: sorted[sorted.length - 1].duration || 0\n                }\n            }\n        };\n    }\n\n    public clear(): void {\n        this.metrics = [];\n    }\n\n    public monitorAsync<T>(name: string, fn: () => Promise<T>, metadata?: Record<string, any>): Promise<T> {\n        this.startMetric(name, metadata);\n        return fn().finally(() => this.endMetric(name));\n    }\n\n    public monitor<T>(name: string, fn: () => T, metadata?: Record<string, any>): T {\n        this.startMetric(name, metadata);\n        const result = fn();\n        this.endMetric(name);\n        return result;\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t286: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcanvaspal\"] = self[\"webpackChunkcanvaspal\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [281], () => (__webpack_require__(922)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","LogLevel","Logger","context","level","INFO","this","currentLevel","cleanOldLogs","getInstance","key","instances","has","set","get","setLevel","debug","message","data","log","DEBUG","info","warn","WARN","error","ERROR","args","timestamp","Date","toISOString","formattedMessage","getLogPrefix","length","formattedData","formatLogData","console","entry","stack","Error","saveLogs","notifyError","Element","tagName","id","className","textContent","substring","html","outerHTML","Array","isArray","map","item","formatted","value","Object","entries","logs","chrome","storage","local","push","MAX_LOGS","splice","thirtyDaysAgo","setDate","getDate","filteredLogs","filter","notifications","create","type","iconUrl","title","priority","getLogs","Map","logger","constructor","debugPanel","DebugPanel","dateDebugger","DateDebugger","performanceMonitor","PerformanceMonitor","detectAssignments","monitorAsync","async","logDetectionEvent","dateMatches","highlightDates","totalElements","document","querySelectorAll","totalDates","dueDates","m","performance","getReport","plannerItems","missingSubmissions","dashboardItems","Promise","all","fetchPlannerItems","fetchMissingSubmissions","parseDashboardCards","allAssignments","assignment","isValidAssignment","validateAssignmentDates","assignmentCount","performanceReport","totalAssignments","assignments","forEach","matchingDateElements","match","matchDate","date","getTime","assignmentDate","dueDate","Math","abs","matchingElements","dateMatchCount","response","fetch","headers","credentials","ok","status","items","json","convertPlannerItem","submission","convertMissingSubmission","cards","card","processed","converted","convertDashboardAssignment","course","plannable","plannable_type","determineAssignmentType","plannable_date","plannable_id","toString","name","context_name","courseId","course_id","points","points_possible","maxPoints","completed","planner_override","marked_complete","priorityScore","url","html_url","details","submissionType","submission_types","isCompleted","isLocked","locked_for_user","description","due_at","shortName","has_submitted_submissions","toLowerCase","panel","createPanel","createElement","style","cssText","header","innerHTML","appendChild","content","body","getElementById","addEventListener","toggleVisibility","e","ctrlKey","metaKey","shiftKey","preventDefault","isVisible","display","updateDebugInfo","renderTypeDistribution","types","renderDetections","detections","colors","due","availability","unlock","unknown","count","charAt","toUpperCase","slice","join","detection","text","element","logDateDetection","initializeKeyboardShortcut","head","clear","updatePerformanceMetrics","metricsContainer","report","summary","totalDuration","toFixed","averageDuration","slowestOperation","duration","fastestOperation","metrics","metric","getMetricSpeedClass","updateAssignmentInfo","container","typeCounts","getAssignmentTypeCounts","priorityRanges","getPriorityRanges","renderTypeCounts","renderPriorityDistribution","renderAssignmentList","reduce","acc","high","medium","low","counts","ranges","range","renderAssignmentDetail","priorityColor","toLocaleDateString","round","updatePerformanceAnalysis","analysis","DateDebugPanel","injectDebugStyles","styleElement","DATE_DEBUG_STYLES","processDateElement","applyDebugHighlight","textMatches","findDatesInTextNodes","updateDebugPanel","matches","walker","createTreeWalker","NodeFilter","SHOW_TEXT","acceptNode","node","parentElement","closest","FILTER_REJECT","containsDatePattern","FILTER_ACCEPT","nextNode","findDatesInText","debugInfo","getElementDescription","getDebugLabel","toLocaleString","from","classList","cls","includes","dateStr","getAttribute","parseDate","determineDateType","pattern","regex","RegExp","exec","span","splitText","index","parentNode","replaceChild","normalized","tomorrow","yesterday","isNaN","formats","format","parsed","add","setAttribute","test","parseICalFeed","icalData","jCalData","ICAL","parse","Component","getAllSubcomponents","vevent","event","Event","startDate","toJSDate","uid","split","assignmentId","PRIORITY_WEIGHTS","GRADE_IMPACT","COURSE_GRADE","DUE_DATE","calculatePriority","monitor","daysUntilDue","calculateDaysUntilDue","gradeImpact","calculateGradeImpact","courseGradeImpact","calculateCourseGradeImpact","typeWeight","getTypeWeight","components","gradeComponent","courseComponent","dateComponent","calculateDueDatePriority","finalPriority","basePriority","min","max","assignmentTitle","now","diffTime","ceil","courseGrade","setPriorityWeights","weights","totalWeight","assign","BackgroundService","gradeData","lastSyncTime","settings","priorityWeights","typeWeights","quiz","discussion","announcement","displayOptions","showCourseNames","showGradeImpact","showPriorityScores","highlightOverdue","refreshInterval","debugSettings","enabled","logLevel","showDateDebug","showAssignmentDebug","showPriorityDebug","icalUrl","detector","AssignmentDetector","priorityCalculator","PriorityCalculator","initialize","initializeMessageHandlers","setupAutoRefresh","sync","runtime","onMessage","addListener","sender","sendResponse","performSync","fetchAndProcessAssignments","then","catch","startPeriodicSync","handleGradeData","success","handleMessage","getAssignments","updateAssignmentCompletion","refreshAssignments","newAssignments","sort","a","b","notifyPopups","find","saveAssignments","lastUpdated","sendMessage","alarms","periodInMinutes","onAlarm","alarm","fetchCalendarData","courseName","syncIntervalId","window","clearInterval","undefined","retryTimeoutId","clearTimeout","intervalId","setInterval","SYNC_INTERVAL","timeoutId","setTimeout","RETRY_INTERVAL","statusText","parseICalData","enrichAssignmentsWithGrades","findGradeInfo","courseData","gradeInfo","gradeWeight","weight","pointsPossible","currentScore","extractCourseId","courseMatch","commands","onCommand","command","instance","startMetric","metadata","startTime","endMetric","endTime","completedMetrics","sum","sorted","fn","finally","result","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","O","chunkIds","notFulfilled","Infinity","i","fulfilled","j","keys","every","r","o","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}