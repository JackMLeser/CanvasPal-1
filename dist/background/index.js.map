{"version":3,"file":"background/index.js","mappings":"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","sources":["webpack://canvaspal/./src/background/index.ts"],"sourcesContent":["console.log('Background script loaded');\n\nimport { Assignment, AssignmentType } from '../types/models';\n\n// Store for assignments\nlet assignments: Assignment[] = [];\n\n// Function to calculate priority score\nfunction calculatePriorityScore(assignment: Assignment): number {\n    let score = 0;\n    const weights = {\n        DUE_DATE: 0.4,\n        POINTS: 0.35,\n        TYPE: 0.25\n    };\n\n    // Due date priority (higher priority for closer due dates)\n    const dueDate = new Date(assignment.dueDate);\n    const now = new Date();\n    const daysUntilDue = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    \n    let dateScore = 0;\n    if (daysUntilDue <= 0) dateScore = 1.5; // Past due\n    else if (daysUntilDue <= 1) dateScore = 1.2; // Due within 24 hours\n    else if (daysUntilDue <= 3) dateScore = 1.0; // Due within 3 days\n    else if (daysUntilDue <= 7) dateScore = 0.8; // Due within a week\n    else if (daysUntilDue <= 14) dateScore = 0.5; // Due within 2 weeks\n    else dateScore = 0.3; // Due later\n\n    // Points priority (higher priority for assignments worth more points)\n    let pointsScore = 0;\n    if (assignment.maxPoints >= 100) pointsScore = 1.0;\n    else if (assignment.maxPoints >= 50) pointsScore = 0.9;\n    else if (assignment.maxPoints >= 20) pointsScore = 0.7;\n    else if (assignment.maxPoints >= 10) pointsScore = 0.5;\n    else pointsScore = 0.3;\n\n    // Type priority and title-based adjustments\n    let typeScore = 0;\n    const title = assignment.title.toLowerCase();\n    if (title.includes('exam') || title.includes('final') || title.includes('midterm')) {\n        typeScore = 1.4; // Highest priority for exams\n    } else {\n        switch (assignment.type.toLowerCase()) {\n            case 'quiz':\n                typeScore = 1.2;\n                break;\n            case 'assignment':\n                typeScore = 1.0;\n                break;\n            case 'discussion':\n                typeScore = 0.8;\n                break;\n            default:\n                typeScore = 1.0;\n        }\n    }\n\n    // Calculate weighted score\n    score = (dateScore * weights.DUE_DATE) +\n            (pointsScore * weights.POINTS) +\n            (typeScore * weights.TYPE);\n\n    // Add priority details to assignment\n    assignment.priorityDetails = {\n        dueStatus: getDueStatus(daysUntilDue),\n        daysUntilDue,\n        pointsImpact: getPointsImpact(assignment.maxPoints),\n        typeImportance: getTypeImportance(assignment.type, title),\n        components: {\n            dueDateScore: dateScore,\n            gradeImpactScore: pointsScore,\n            typeScore: typeScore\n        }\n    };\n\n    // Cap final score at 1.5\n    return Math.min(Math.max(score, 0), 1.5);\n}\n\nfunction getDueStatus(daysUntilDue: number): 'overdue' | 'due-soon' | 'upcoming' | 'far-future' {\n    if (daysUntilDue <= 0) return 'overdue';\n    if (daysUntilDue <= 1) return 'due-soon';\n    if (daysUntilDue <= 7) return 'upcoming';\n    return 'far-future';\n}\n\nfunction getPointsImpact(points: number): 'high' | 'medium' | 'low' {\n    if (points >= 50) return 'high';\n    if (points >= 20) return 'medium';\n    return 'low';\n}\n\nfunction getTypeImportance(type: string, title: string): 'critical' | 'high' | 'normal' | 'low' {\n    if (title.includes('exam') || title.includes('final') || title.includes('midterm')) {\n        return 'critical';\n    }\n    switch (type.toLowerCase()) {\n        case 'quiz':\n            return 'high';\n        case 'assignment':\n            return 'normal';\n        case 'discussion':\n            return 'low';\n        default:\n            return 'normal';\n    }\n}\n\n// Function to notify all tabs about assignment updates\nfunction notifyTabs() {\n    chrome.tabs.query({}, (tabs) => {\n        tabs.forEach(tab => {\n            if (tab.id) {\n                chrome.tabs.sendMessage(tab.id, {\n                    type: 'ASSIGNMENTS_UPDATE',\n                    data: assignments\n                }).catch(error => {\n                    console.log('Error sending message to tab:', error);\n                });\n            }\n        });\n    });\n}\n\n// Listen for messages from content script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Background received message:', message);\n\n    switch (message.type) {\n        case 'DASHBOARD_DATA':\n            console.log('Processing dashboard data:', message.data);\n            const dashboardAssignments: Assignment[] = [];\n            \n            message.data.forEach((course: any) => {\n                course.assignments.forEach((assignment: any) => {\n                    // Create assignment with all data from detector\n                    const newAssignment: Assignment = {\n                        id: `${course.courseName}-${assignment.name}`,\n                        title: assignment.name,\n                        dueDate: assignment.dueDate,\n                        course: course.courseName,\n                        courseId: course.id?.toString() || '0',\n                        type: assignment.type,\n                        points: assignment.points || 0,\n                        maxPoints: assignment.maxPoints || assignment.points || 0,\n                        completed: assignment.completed || false,\n                        priorityScore: assignment.priorityScore || 0,\n                        url: assignment.url || '#',\n                        details: {\n                            isCompleted: assignment.completed || false,\n                            isLocked: assignment.locked || false,\n                            submissionType: assignment.submissionType,\n                            description: assignment.description\n                        },\n                        priorityDetails: assignment.priorityDetails || {\n                            dueStatus: getDueStatus(Math.ceil((new Date(assignment.dueDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))),\n                            daysUntilDue: Math.ceil((new Date(assignment.dueDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)),\n                            pointsImpact: getPointsImpact(assignment.maxPoints || 0),\n                            typeImportance: getTypeImportance(assignment.type, assignment.name),\n                            components: {\n                                dueDateScore: 0,\n                                gradeImpactScore: 0,\n                                typeScore: 0\n                            }\n                        }\n                    };\n\n                    // Only calculate priority if not provided\n                    if (!newAssignment.priorityScore) {\n                        newAssignment.priorityScore = calculatePriorityScore(newAssignment);\n                    }\n\n                    dashboardAssignments.push(newAssignment);\n                });\n            });\n\n            // Sort and store assignments\n            dashboardAssignments.sort((a, b) => b.priorityScore - a.priorityScore);\n            assignments = dashboardAssignments;\n            notifyTabs();\n            break;\n\n        case 'GRADE_DATA':\n            console.log('Processing grade data:', message.data);\n            if (message.data?.assignments) {\n                message.data.assignments.forEach((gradeData: any) => {\n                    const assignment = assignments.find(a => a.title === gradeData.name);\n                    if (assignment) {\n                        assignment.points = gradeData.points;\n                        assignment.maxPoints = gradeData.pointsPossible;\n                        assignment.gradeWeight = gradeData.weight;\n                        assignment.priorityScore = calculatePriorityScore(assignment);\n                    }\n                });\n\n                // Sort and notify about updates\n                assignments.sort((a, b) => b.priorityScore - a.priorityScore);\n                notifyTabs();\n            }\n            break;\n\n        case 'GET_ASSIGNMENTS':\n            console.log('Sending assignments:', assignments);\n            sendResponse({ assignments });\n            break;\n\n        case 'CLEAR_ASSIGNMENTS':\n            assignments = [];\n            sendResponse({ success: true });\n            break;\n    }\n\n    // Return true to indicate we'll send a response asynchronously\n    return true;\n});\n\n// Handle extension installation or update\nchrome.runtime.onInstalled.addListener(() => {\n    console.log('Extension installed/updated');\n    // Initialize storage\n    chrome.storage.local.set({\n        settings: {\n            displayOptions: {\n                showOutsideCanvas: true\n            }\n        }\n    });\n});\n\n// Handle alarm for periodic assignment updates\nchrome.alarms.create('refreshAssignments', {\n    periodInMinutes: 5 // Check every 5 minutes\n});\n\nchrome.alarms.onAlarm.addListener((alarm) => {\n    if (alarm.name === 'refreshAssignments') {\n        // Notify tabs to refresh assignments\n        chrome.tabs.query({}, (tabs) => {\n            tabs.forEach(tab => {\n                if (tab.id) {\n                    chrome.tabs.sendMessage(tab.id, {\n                        type: 'REFRESH_ASSIGNMENTS'\n                    }).catch(error => {\n                        console.log('Error sending refresh message to tab:', error);\n                    });\n                }\n            });\n        });\n    }\n});\n"],"names":["console","log","assignments","calculatePriorityScore","assignment","score","dueDate","Date","now","daysUntilDue","Math","ceil","getTime","dateScore","pointsScore","maxPoints","typeScore","title","toLowerCase","includes","type","priorityDetails","dueStatus","getDueStatus","pointsImpact","getPointsImpact","typeImportance","getTypeImportance","components","dueDateScore","gradeImpactScore","min","max","points","notifyTabs","chrome","tabs","query","forEach","tab","id","sendMessage","data","catch","error","runtime","onMessage","addListener","message","sender","sendResponse","dashboardAssignments","course","newAssignment","courseName","name","courseId","toString","completed","priorityScore","url","details","isCompleted","isLocked","locked","submissionType","description","push","sort","a","b","gradeData","find","pointsPossible","gradeWeight","weight","success","onInstalled","storage","local","set","settings","displayOptions","showOutsideCanvas","alarms","create","periodInMinutes","onAlarm","alarm"],"sourceRoot":""}