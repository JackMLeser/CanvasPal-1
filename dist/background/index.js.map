{"version":3,"file":"background/index.js","mappings":"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","sources":["webpack://canvaspal/./src/background/index.ts"],"sourcesContent":["console.log('Background script loaded');\n\ninterface Assignment {\n    title: string;\n    dueDate: string;\n    courseName: string;\n    type: string;\n    points: number;\n    maxPoints?: number;\n    weight?: number;\n    priorityScore: number;\n}\n\n// Store for assignments\nlet assignments: Assignment[] = [];\n\n// Function to calculate priority score\nfunction calculatePriorityScore(assignment: Assignment): number {\n    let score = 0;\n\n    // Due date priority (higher priority for closer due dates)\n    const dueDate = new Date(assignment.dueDate);\n    const now = new Date();\n    const daysUntilDue = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (daysUntilDue <= 0) score += 1; // Past due or due today\n    else if (daysUntilDue <= 1) score += 0.9; // Due tomorrow\n    else if (daysUntilDue <= 3) score += 0.8; // Due in 2-3 days\n    else if (daysUntilDue <= 7) score += 0.6; // Due in 4-7 days\n    else score += 0.3; // Due in more than a week\n\n    // Points priority (higher priority for assignments worth more points)\n    if (assignment.maxPoints) {\n        const pointsRatio = assignment.maxPoints / 100; // Normalize to 0-1 range\n        score += pointsRatio * 0.5; // Points contribute up to 0.5 to the score\n    }\n\n    // Type priority\n    switch (assignment.type.toLowerCase()) {\n        case 'quiz':\n            score += 0.2; // Higher priority for quizzes\n            break;\n        case 'assignment':\n            score += 0.1; // Medium priority for regular assignments\n            break;\n        case 'discussion':\n            score += 0.05; // Lower priority for discussions\n            break;\n    }\n\n    // Normalize final score to 0-1 range\n    return Math.min(Math.max(score / 2, 0), 1);\n}\n\n// Function to process and store assignments\nfunction processAssignments(newAssignments: Assignment[]) {\n    console.log('Processing assignments:', newAssignments);\n\n    // Calculate priority scores\n    newAssignments.forEach(assignment => {\n        assignment.priorityScore = calculatePriorityScore(assignment);\n    });\n\n    // Sort by priority score\n    newAssignments.sort((a, b) => b.priorityScore - a.priorityScore);\n\n    // Update stored assignments\n    assignments = newAssignments;\n\n    // Notify all tabs about the update\n    chrome.tabs.query({}, (tabs) => {\n        tabs.forEach(tab => {\n            if (tab.id) {\n                chrome.tabs.sendMessage(tab.id, {\n                    type: 'ASSIGNMENTS_UPDATE',\n                    data: assignments\n                }).catch(error => {\n                    console.log('Error sending message to tab:', error);\n                });\n            }\n        });\n    });\n}\n\n// Listen for messages from content script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Background received message:', message);\n\n    switch (message.type) {\n        case 'DASHBOARD_DATA':\n            console.log('Processing dashboard data:', message.data);\n            const dashboardAssignments: Assignment[] = [];\n            message.data.forEach((course: any) => {\n                course.assignments.forEach((assignment: any) => {\n                    dashboardAssignments.push({\n                        title: assignment.name,\n                        dueDate: assignment.dueDate,\n                        courseName: course.courseName,\n                        type: assignment.type,\n                        points: 0, // Will be updated with grade data\n                        priorityScore: 0 // Will be calculated\n                    });\n                });\n            });\n            processAssignments(dashboardAssignments);\n            break;\n\n        case 'GRADE_DATA':\n            console.log('Processing grade data:', message.data);\n            // Update points for existing assignments\n            const gradeMap = new Map();\n            message.data.assignments.forEach((assignment: any) => {\n                gradeMap.set(assignment.name, {\n                    points: assignment.points,\n                    maxPoints: assignment.pointsPossible,\n                    weight: assignment.weight\n                });\n            });\n\n            assignments.forEach(assignment => {\n                const gradeInfo = gradeMap.get(assignment.title);\n                if (gradeInfo) {\n                    assignment.points = gradeInfo.points;\n                    assignment.maxPoints = gradeInfo.maxPoints;\n                    assignment.weight = gradeInfo.weight;\n                    assignment.priorityScore = calculatePriorityScore(assignment);\n                }\n            });\n\n            // Sort and notify about updates\n            assignments.sort((a, b) => b.priorityScore - a.priorityScore);\n            chrome.tabs.query({}, (tabs) => {\n                tabs.forEach(tab => {\n                    if (tab.id) {\n                        chrome.tabs.sendMessage(tab.id, {\n                            type: 'ASSIGNMENTS_UPDATE',\n                            data: assignments\n                        }).catch(error => {\n                            console.log('Error sending message to tab:', error);\n                        });\n                    }\n                });\n            });\n            break;\n\n        case 'GET_ASSIGNMENTS':\n            console.log('Sending assignments:', assignments);\n            sendResponse({ assignments });\n            break;\n\n        case 'CLEAR_ASSIGNMENTS':\n            assignments = [];\n            sendResponse({ success: true });\n            break;\n    }\n\n    // Return true to indicate we'll send a response asynchronously\n    return true;\n});\n\n// Handle extension installation or update\nchrome.runtime.onInstalled.addListener(() => {\n    console.log('Extension installed/updated');\n    // Initialize storage\n    chrome.storage.local.set({\n        settings: {\n            displayOptions: {\n                showOutsideCanvas: true\n            }\n        }\n    });\n});\n\n// Handle alarm for periodic assignment updates\nchrome.alarms.create('refreshAssignments', {\n    periodInMinutes: 5 // Check every 5 minutes\n});\n\nchrome.alarms.onAlarm.addListener((alarm) => {\n    if (alarm.name === 'refreshAssignments') {\n        // Notify tabs to refresh assignments\n        chrome.tabs.query({}, (tabs) => {\n            tabs.forEach(tab => {\n                if (tab.id) {\n                    chrome.tabs.sendMessage(tab.id, {\n                        type: 'REFRESH_ASSIGNMENTS'\n                    }).catch(error => {\n                        console.log('Error sending refresh message to tab:', error);\n                    });\n                }\n            });\n        });\n    }\n});\n"],"names":["console","log","assignments","calculatePriorityScore","assignment","score","dueDate","Date","now","daysUntilDue","Math","ceil","getTime","maxPoints","type","toLowerCase","min","max","chrome","runtime","onMessage","addListener","message","sender","sendResponse","data","dashboardAssignments","forEach","course","push","title","name","courseName","points","priorityScore","newAssignments","sort","a","b","tabs","query","tab","id","sendMessage","catch","error","gradeMap","Map","set","pointsPossible","weight","gradeInfo","get","success","onInstalled","storage","local","settings","displayOptions","showOutsideCanvas","alarms","create","periodInMinutes","onAlarm","alarm"],"sourceRoot":""}